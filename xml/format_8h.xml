<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="format_8h" kind="file" language="C++">
    <compoundname>format.h</compoundname>
    <includes local="no">cassert</includes>
    <includes local="no">clocale</includes>
    <includes local="no">cmath</includes>
    <includes local="no">cstdio</includes>
    <includes local="no">cstring</includes>
    <includes local="no">limits</includes>
    <includes local="no">memory</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">utility</includes>
    <includes refid="stdint_8h" local="no">stdint.h</includes>
    <includedby refid="_rib_export_8cpp" local="yes">RibExport.cpp</includedby>
    <includedby refid="_shader_program_8cpp" local="yes">ShaderProgram.cpp</includedby>
    <includedby refid="_x_m_l_serializer_8cpp" local="yes">XMLSerializer.cpp</includedby>
    <includedby refid="format_8cc" local="yes">format.cc</includedby>
    <includedby refid="ostream_8h" local="yes">ostream.h</includedby>
    <includedby refid="posix_8h" local="yes">posix.h</includedby>
    <includedby refid="string_8h" local="yes">string.h</includedby>
    <includedby refid="time_8h" local="yes">time.h</includedby>
    <incdepgraph>
      <node id="4356">
        <label>limits</label>
      </node>
      <node id="4353">
        <label>cmath</label>
      </node>
      <node id="4351">
        <label>cassert</label>
      </node>
      <node id="4358">
        <label>stdexcept</label>
      </node>
      <node id="4362">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
        <childnode refid="4363" relation="include">
        </childnode>
        <childnode refid="4364" relation="include">
        </childnode>
      </node>
      <node id="4359">
        <label>string</label>
      </node>
      <node id="4363">
        <label>limits.h</label>
      </node>
      <node id="4364">
        <label>wchar.h</label>
      </node>
      <node id="4354">
        <label>cstdio</label>
      </node>
      <node id="4360">
        <label>vector</label>
      </node>
      <node id="4361">
        <label>utility</label>
      </node>
      <node id="4350">
        <label>format.h</label>
        <link refid="format.h"/>
        <childnode refid="4351" relation="include">
        </childnode>
        <childnode refid="4352" relation="include">
        </childnode>
        <childnode refid="4353" relation="include">
        </childnode>
        <childnode refid="4354" relation="include">
        </childnode>
        <childnode refid="4355" relation="include">
        </childnode>
        <childnode refid="4356" relation="include">
        </childnode>
        <childnode refid="4357" relation="include">
        </childnode>
        <childnode refid="4358" relation="include">
        </childnode>
        <childnode refid="4359" relation="include">
        </childnode>
        <childnode refid="4360" relation="include">
        </childnode>
        <childnode refid="4361" relation="include">
        </childnode>
        <childnode refid="4362" relation="include">
        </childnode>
      </node>
      <node id="4352">
        <label>clocale</label>
      </node>
      <node id="4355">
        <label>cstring</label>
      </node>
      <node id="4357">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4373">
        <label>posix.h</label>
        <link refid="posix_8h"/>
        <childnode refid="4374" relation="include">
        </childnode>
      </node>
      <node id="4370">
        <label>ostream.h</label>
        <link refid="ostream_8h"/>
        <childnode refid="4371" relation="include">
        </childnode>
        <childnode refid="4372" relation="include">
        </childnode>
      </node>
      <node id="4376">
        <label>time.h</label>
        <link refid="time_8h"/>
      </node>
      <node id="4367">
        <label>ShaderProgram.cpp</label>
        <link refid="_shader_program_8cpp"/>
      </node>
      <node id="4371">
        <label>ostream.cc</label>
        <link refid="ostream_8cc"/>
      </node>
      <node id="4365">
        <label>format.h</label>
        <link refid="format.h"/>
        <childnode refid="4366" relation="include">
        </childnode>
        <childnode refid="4367" relation="include">
        </childnode>
        <childnode refid="4368" relation="include">
        </childnode>
        <childnode refid="4369" relation="include">
        </childnode>
        <childnode refid="4370" relation="include">
        </childnode>
        <childnode refid="4373" relation="include">
        </childnode>
        <childnode refid="4375" relation="include">
        </childnode>
        <childnode refid="4376" relation="include">
        </childnode>
      </node>
      <node id="4372">
        <label>printf.h</label>
        <link refid="printf_8h"/>
        <childnode refid="4369" relation="include">
        </childnode>
      </node>
      <node id="4366">
        <label>RibExport.cpp</label>
        <link refid="_rib_export_8cpp"/>
      </node>
      <node id="4374">
        <label>posix.cc</label>
        <link refid="posix_8cc"/>
      </node>
      <node id="4375">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="4369" relation="include">
        </childnode>
      </node>
      <node id="4368">
        <label>XMLSerializer.cpp</label>
        <link refid="_x_m_l_serializer_8cpp"/>
      </node>
      <node id="4369">
        <label>format.cc</label>
        <link refid="format_8cc"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structfmt_1_1internal_1_1_dummy_int" prot="public">fmt::internal::DummyInt</innerclass>
    <innerclass refid="classstd_1_1numeric__limits_3_01fmt_1_1internal_1_1_dummy_int_01_4" prot="public">std::numeric_limits&lt; fmt::internal::DummyInt &gt;</innerclass>
    <innerclass refid="classfmt_1_1_basic_writer" prot="public">fmt::BasicWriter</innerclass>
    <innerclass refid="classfmt_1_1_arg_formatter" prot="public">fmt::ArgFormatter</innerclass>
    <innerclass refid="classfmt_1_1_basic_printf_arg_formatter" prot="public">fmt::BasicPrintfArgFormatter</innerclass>
    <innerclass refid="classfmt_1_1_basic_formatter" prot="public">fmt::BasicFormatter</innerclass>
    <innerclass refid="classfmt_1_1_basic_string_ref" prot="public">fmt::BasicStringRef</innerclass>
    <innerclass refid="classfmt_1_1_basic_c_string_ref" prot="public">fmt::BasicCStringRef</innerclass>
    <innerclass refid="classfmt_1_1_format_error" prot="public">fmt::FormatError</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_make_unsigned" prot="public">fmt::internal::MakeUnsigned</innerclass>
    <innerclass refid="classfmt_1_1_buffer" prot="public">fmt::Buffer</innerclass>
    <innerclass refid="classfmt_1_1internal_1_1_memory_buffer" prot="public">fmt::internal::MemoryBuffer</innerclass>
    <innerclass refid="classfmt_1_1internal_1_1_fixed_buffer" prot="public">fmt::internal::FixedBuffer</innerclass>
    <innerclass refid="classfmt_1_1internal_1_1_basic_char_traits" prot="public">fmt::internal::BasicCharTraits</innerclass>
    <innerclass refid="classfmt_1_1internal_1_1_char_traits" prot="public">fmt::internal::CharTraits</innerclass>
    <innerclass refid="classfmt_1_1internal_1_1_char_traits_3_01char_01_4" prot="public">fmt::internal::CharTraits&lt; char &gt;</innerclass>
    <innerclass refid="classfmt_1_1internal_1_1_char_traits_3_01wchar__t_01_4" prot="public">fmt::internal::CharTraits&lt; wchar_t &gt;</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_sign_checker" prot="public">fmt::internal::SignChecker</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_sign_checker_3_01false_01_4" prot="public">fmt::internal::SignChecker&lt; false &gt;</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_type_selector" prot="public">fmt::internal::TypeSelector</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_type_selector_3_01false_01_4" prot="public">fmt::internal::TypeSelector&lt; false &gt;</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_int_traits" prot="public">fmt::internal::IntTraits</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_basic_data" prot="public">fmt::internal::BasicData</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_no_thousands_sep" prot="public">fmt::internal::NoThousandsSep</innerclass>
    <innerclass refid="classfmt_1_1internal_1_1_thousands_sep" prot="public">fmt::internal::ThousandsSep</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_value" prot="public">fmt::internal::Value</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_value_1_1_string_value" prot="public">fmt::internal::Value::StringValue</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_value_1_1_custom_value" prot="public">fmt::internal::Value::CustomValue</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_arg" prot="public">fmt::internal::Arg</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_named_arg" prot="public">fmt::internal::NamedArg</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_null" prot="public">fmt::internal::Null</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_w_char_helper" prot="public">fmt::internal::WCharHelper</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_w_char_helper_3_01_t_00_01wchar__t_01_4" prot="public">fmt::internal::WCharHelper&lt; T, wchar_t &gt;</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_convert_to_int_impl" prot="public">fmt::internal::ConvertToIntImpl</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_convert_to_int_impl2" prot="public">fmt::internal::ConvertToIntImpl2</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_convert_to_int_impl2_3_01_t_00_01true_01_4" prot="public">fmt::internal::ConvertToIntImpl2&lt; T, true &gt;</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_convert_to_int" prot="public">fmt::internal::ConvertToInt</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_enable_if" prot="public">fmt::internal::EnableIf</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_enable_if_3_01true_00_01_t_01_4" prot="public">fmt::internal::EnableIf&lt; true, T &gt;</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_conditional" prot="public">fmt::internal::Conditional</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_conditional_3_01false_00_01_t_00_01_f_01_4" prot="public">fmt::internal::Conditional&lt; false, T, F &gt;</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_not" prot="public">fmt::internal::Not</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_not_3_01false_01_4" prot="public">fmt::internal::Not&lt; false &gt;</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_false" prot="public">fmt::internal::False</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_l_conv_check" prot="public">fmt::internal::LConvCheck</innerclass>
    <innerclass refid="classfmt_1_1internal_1_1_make_value" prot="public">fmt::internal::MakeValue</innerclass>
    <innerclass refid="classfmt_1_1internal_1_1_make_arg" prot="public">fmt::internal::MakeArg</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_named_arg" prot="public">fmt::internal::NamedArg</innerclass>
    <innerclass refid="classfmt_1_1internal_1_1_runtime_error" prot="public">fmt::internal::RuntimeError</innerclass>
    <innerclass refid="classfmt_1_1internal_1_1_arg_map" prot="public">fmt::internal::ArgMap</innerclass>
    <innerclass refid="classfmt_1_1_arg_list" prot="public">fmt::ArgList</innerclass>
    <innerclass refid="classfmt_1_1_arg_visitor" prot="public">fmt::ArgVisitor</innerclass>
    <innerclass refid="structfmt_1_1_empty_spec" prot="public">fmt::EmptySpec</innerclass>
    <innerclass refid="structfmt_1_1_type_spec" prot="public">fmt::TypeSpec</innerclass>
    <innerclass refid="structfmt_1_1_width_spec" prot="public">fmt::WidthSpec</innerclass>
    <innerclass refid="structfmt_1_1_align_spec" prot="public">fmt::AlignSpec</innerclass>
    <innerclass refid="structfmt_1_1_align_type_spec" prot="public">fmt::AlignTypeSpec</innerclass>
    <innerclass refid="structfmt_1_1_format_spec" prot="public">fmt::FormatSpec</innerclass>
    <innerclass refid="classfmt_1_1_int_format_spec" prot="public">fmt::IntFormatSpec</innerclass>
    <innerclass refid="classfmt_1_1_str_format_spec" prot="public">fmt::StrFormatSpec</innerclass>
    <innerclass refid="classfmt_1_1internal_1_1_arg_map" prot="public">fmt::internal::ArgMap</innerclass>
    <innerclass refid="classfmt_1_1internal_1_1_arg_formatter_base" prot="public">fmt::internal::ArgFormatterBase</innerclass>
    <innerclass refid="classfmt_1_1internal_1_1_formatter_base" prot="public">fmt::internal::FormatterBase</innerclass>
    <innerclass refid="classfmt_1_1_basic_arg_formatter" prot="public">fmt::BasicArgFormatter</innerclass>
    <innerclass refid="classfmt_1_1_arg_formatter" prot="public">fmt::ArgFormatter</innerclass>
    <innerclass refid="classfmt_1_1_basic_formatter" prot="public">fmt::BasicFormatter</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_arg_array" prot="public">fmt::internal::ArgArray</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_arg_array_3_01_n_00_01true_01_4" prot="public">fmt::internal::ArgArray&lt; N, true &gt;</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_arg_array_3_01_n_00_01false_01_4" prot="public">fmt::internal::ArgArray&lt; N, false &gt;</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_arg_type" prot="public">fmt::internal::ArgType</innerclass>
    <innerclass refid="classfmt_1_1_system_error" prot="public">fmt::SystemError</innerclass>
    <innerclass refid="classfmt_1_1_basic_writer" prot="public">fmt::BasicWriter</innerclass>
    <innerclass refid="classfmt_1_1_basic_memory_writer" prot="public">fmt::BasicMemoryWriter</innerclass>
    <innerclass refid="classfmt_1_1_basic_array_writer" prot="public">fmt::BasicArrayWriter</innerclass>
    <innerclass refid="classfmt_1_1_format_int" prot="public">fmt::FormatInt</innerclass>
    <innernamespace refid="namespacefmt">fmt</innernamespace>
    <innernamespace refid="namespacefmt_1_1internal">fmt::internal</innernamespace>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="format_8h_1a47258eefd01b3b6278d8057e5c89616a" prot="public" static="no">
        <name>FMT_SECURE_SCL</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="46" column="11" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a363cb0623e6975ff2b357a52a03e4728" prot="public" static="no">
        <name>FMT_MSC_VER</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="56" column="11" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a9a4960b70582ed2620911a0b75dce0b5" prot="public" static="no">
        <name>FMT_API</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="75" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a4c23d7785df6fc141d8c6e93846042c6" prot="public" static="no">
        <name>FMT_GCC_EXTENSION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="97" column="11" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a749169f277bb21ccf12b1c665e68e88a" prot="public" static="no">
        <name>FMT_HAS_FEATURE</name>
        <param><defname>x</defname></param>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="119" column="11" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a160d3314a3cdbd49e187b75d6ce2a652" prot="public" static="no">
        <name>FMT_HAS_BUILTIN</name>
        <param><defname>x</defname></param>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="125" column="11" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a55d7b78b0300ddda018f77208e80f3e9" prot="public" static="no">
        <name>FMT_HAS_CPP_ATTRIBUTE</name>
        <param><defname>x</defname></param>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="131" column="11" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a30de7da3394d4e7b577ef4b7beb4834c" prot="public" static="no">
        <name>FMT_USE_VARIADIC_TEMPLATES</name>
        <initializer>(<ref refid="format_8h_1a749169f277bb21ccf12b1c665e68e88a" kindref="member">FMT_HAS_FEATURE</ref>(cxx_variadic_templates) || \
       (FMT_GCC_VERSION &gt;= 404 &amp;&amp; FMT_HAS_GXX_CXX11) || <ref refid="format_8h_1a363cb0623e6975ff2b357a52a03e4728" kindref="member">FMT_MSC_VER</ref> &gt;= 1800)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="138" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a675e81932738ad290a4ce56eb64bb81c" prot="public" static="no">
        <name>FMT_USE_RVALUE_REFERENCES</name>
        <initializer>(<ref refid="format_8h_1a749169f277bb21ccf12b1c665e68e88a" kindref="member">FMT_HAS_FEATURE</ref>(cxx_rvalue_references) || \
        (FMT_GCC_VERSION &gt;= 403 &amp;&amp; FMT_HAS_GXX_CXX11) || <ref refid="format_8h_1a363cb0623e6975ff2b357a52a03e4728" kindref="member">FMT_MSC_VER</ref> &gt;= 1600)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="149" column="13" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a5d3b416a99857b69e3b7de8e88c71ff3" prot="public" static="no">
        <name>FMT_EXCEPTIONS</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="167" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" prot="public" static="no">
        <name>FMT_THROW</name>
        <param><defname>x</defname></param>
        <initializer>throw <ref refid="glew_8h_1ad77deca22f617d3f0e0eb786445689fc" kindref="member">x</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="172" column="11" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a65490b89e8bd22fd0b8ae4491643d60c" prot="public" static="no">
        <name>FMT_USE_NOEXCEPT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="180" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1aef128913e8400683b1cbd1a3a2e11df3" prot="public" static="no">
        <name>FMT_NOEXCEPT</name>
        <initializer>throw()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="190" column="15" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a6eec3712890dce6f99fc1036efd36daa" prot="public" static="no">
        <name>FMT_USE_DELETED_FUNCTIONS</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="200" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1abf373cec341655be2a0b95e741898ef1" prot="public" static="no">
        <name>FMT_DELETED_OR_UNDEFINED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="210" column="11" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1acc0b3b39544c7a0930ae1567d952a8d4" prot="public" static="no">
        <name>FMT_DISALLOW_COPY_AND_ASSIGN</name>
        <param><defname>TypeName</defname></param>
        <initializer>TypeName(const TypeName&amp;); \
    TypeName&amp; operator=(const TypeName&amp;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="211" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a7c29e7b4a54045f13bd664979804998d" prot="public" static="no">
        <name>FMT_USE_USER_DEFINED_LITERALS</name>
        <initializer><ref refid="format_8h_1a30de7da3394d4e7b577ef4b7beb4834c" kindref="member">FMT_USE_VARIADIC_TEMPLATES</ref> &amp;&amp; <ref refid="format_8h_1a675e81932738ad290a4ce56eb64bb81c" kindref="member">FMT_USE_RVALUE_REFERENCES</ref> &amp;&amp; \
   (<ref refid="format_8h_1a749169f277bb21ccf12b1c665e68e88a" kindref="member">FMT_HAS_FEATURE</ref>(cxx_user_literals) || \
     (FMT_GCC_VERSION &gt;= 407 &amp;&amp; FMT_HAS_GXX_CXX11) || <ref refid="format_8h_1a363cb0623e6975ff2b357a52a03e4728" kindref="member">FMT_MSC_VER</ref> &gt;= 1900) &amp;&amp; \
   (!defined(FMT_ICC_VERSION) || FMT_ICC_VERSION &gt;= 1500)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="221" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a03e7ee720f43adc7d83c652a6a5dd5f8" prot="public" static="no">
        <name>FMT_ASSERT</name>
        <param><defname>condition</defname></param>
        <param><defname>message</defname></param>
        <initializer>assert((<ref refid="glew_8h_1a3fd7759b3d6e5284475eee14a613b9f9" kindref="member">condition</ref>) &amp;&amp; <ref refid="glew_8h_1a7b6161cffb9b8aee272b3b916183d28c" kindref="member">message</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="229" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1ac85df894213837005d52db89fff91ea3" prot="public" static="no">
        <name>FMT_SPECIALIZE_MAKE_UNSIGNED</name>
        <param><defname>T</defname></param>
        <param><defname>U</defname></param>
        <initializer>template &lt;&gt; \
  struct <ref refid="structfmt_1_1internal_1_1_make_unsigned" kindref="compound">MakeUnsigned</ref>&lt;T&gt; { typedef U <ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">Type</ref>; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="551" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="551" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a3ae8cc1f3fba8eb2083d6a34aa73b5e1" prot="public" static="no">
        <name>FMT_USE_EXTERN_TEMPLATES</name>
        <initializer>(__clang__ &amp;&amp; <ref refid="format_8h_1a30de7da3394d4e7b577ef4b7beb4834c" kindref="member">FMT_USE_VARIADIC_TEMPLATES</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="844" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="844" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a66278651d81592645cef28ca33a6ab92" prot="public" static="no">
        <name>FMT_USE_WINDOWS_H</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="949" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="949" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a178dfa469e0fb5d8d60203f8e1c8c993" prot="public" static="no">
        <name>FMT_DISABLE_CONVERSION_TO_INT</name>
        <param><defname>Type</defname></param>
        <initializer>template &lt;&gt; \
  struct <ref refid="structfmt_1_1internal_1_1_convert_to_int" kindref="compound">ConvertToInt</ref>&lt;<ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">Type</ref>&gt; {  enum { <ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref> = 0 }; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="1096" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="1096" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a3e04d7bac3d8124e4fe7d64d3de25cfa" prot="public" static="no">
        <name>FMT_CONCAT</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer><ref refid="glew_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>##<ref refid="glew_8h_1a7b01aaccb6b1691185992154f99088cb" kindref="member">b</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="1142" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="1142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a653d623d320379b9426e13643059777b" prot="public" static="no">
        <name>FMT_UNUSED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="1147" column="11" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="1147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1ace633c5bc82b65dc459849ade76e25cb" prot="public" static="no">
        <name>FMT_USE_STATIC_ASSERT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="1151" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="1151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a8c43eda874e268d89b969939f98ea5e9" prot="public" static="no">
        <name>FMT_CONCAT_</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer><ref refid="format_8h_1a3e04d7bac3d8124e4fe7d64d3de25cfa" kindref="member">FMT_CONCAT</ref>(<ref refid="glew_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>, <ref refid="glew_8h_1a7b01aaccb6b1691185992154f99088cb" kindref="member">b</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="1158" column="11" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="1158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a204f6e58eced6add1741a1778c4690b9" prot="public" static="no">
        <name>FMT_STATIC_ASSERT</name>
        <param><defname>cond</defname></param>
        <param><defname>message</defname></param>
        <initializer>typedef <ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref> <ref refid="format_8h_1a8c43eda874e268d89b969939f98ea5e9" kindref="member">FMT_CONCAT_</ref>(Assert, __LINE__)[(cond) ? 1 : -1] <ref refid="format_8h_1a653d623d320379b9426e13643059777b" kindref="member">FMT_UNUSED</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="1159" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="1159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1abf0e2d842013f277ceae700cd6f6e747" prot="public" static="no">
        <name>FMT_MAKE_VALUE_</name>
        <param><defname>Type</defname></param>
        <param><defname>field</defname></param>
        <param><defname>TYPE</defname></param>
        <param><defname>rhs</defname></param>
        <initializer><ref refid="classfmt_1_1internal_1_1_make_value" kindref="compound">MakeValue</ref>(<ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">Type</ref> <ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>) { field = rhs; } \
  static <ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref> <ref refid="glew_8h_1a8d78e2e8a676abd547a596dd84811285" kindref="member">type</ref>(<ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">Type</ref>) { return Arg::TYPE; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="1222" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="1222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a05acd9bf561906ac7164ca5ea6a37177" prot="public" static="no">
        <name>FMT_MAKE_VALUE</name>
        <param><defname>Type</defname></param>
        <param><defname>field</defname></param>
        <param><defname>TYPE</defname></param>
        <initializer><ref refid="format_8h_1abf0e2d842013f277ceae700cd6f6e747" kindref="member">FMT_MAKE_VALUE_</ref>(<ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">Type</ref>, field, TYPE, <ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="1226" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="1226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a0f2f1f6506ad63de82c05f55d0056d3d" prot="public" static="no">
        <name>FMT_MAKE_STR_VALUE</name>
        <param><defname>Type</defname></param>
        <param><defname>TYPE</defname></param>
        <initializer><ref refid="classfmt_1_1internal_1_1_make_value" kindref="compound">MakeValue</ref>(<ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">Type</ref> <ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>) { set_string(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>); } \
  static <ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref> <ref refid="glew_8h_1a8d78e2e8a676abd547a596dd84811285" kindref="member">type</ref>(<ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">Type</ref>) { return Arg::TYPE; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="1274" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="1274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1aef24527160ce50a5b12d87ffd3b38cfe" prot="public" static="no">
        <name>FMT_MAKE_WSTR_VALUE</name>
        <param><defname>Type</defname></param>
        <param><defname>TYPE</defname></param>
        <initializer><ref refid="classfmt_1_1internal_1_1_make_value" kindref="compound">MakeValue</ref>(typename <ref refid="structfmt_1_1internal_1_1_w_char_helper" kindref="compound">WCharHelper</ref>&lt;<ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">Type</ref>, Char&gt;::Supported <ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>) { \
    set_string(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>); \
  } \
  static <ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref> <ref refid="glew_8h_1a8d78e2e8a676abd547a596dd84811285" kindref="member">type</ref>(<ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">Type</ref>) { return Arg::TYPE; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="1288" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="1288" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a9a003951252892f923664ed197381349" prot="public" static="no">
        <name>FMT_DISPATCH</name>
        <param><defname>call</defname></param>
        <initializer>static_cast&lt;Impl*&gt;(this)-&gt;call</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="1427" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="1427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a435fd66d1fbca043c2da3188040f6f23" prot="public" static="no">
        <name>FMT_DEFINE_INT_FORMATTERS</name>
        <param><defname>TYPE</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="1730" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="1730" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1ab581aee8e1b94e923b16e7146b777a4a" prot="public" static="no">
        <name>FMT_GEN</name>
        <param><defname>n</defname></param>
        <param><defname>f</defname></param>
        <initializer>FMT_GEN##<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>(<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2080" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2080" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a3c8f64756453f72ccf16b23dd82f79f5" prot="public" static="no">
        <name>FMT_GEN1</name>
        <param><defname>f</defname></param>
        <initializer><ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2081" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2081" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1ab7f734cb3a84b230e2adad93dace3551" prot="public" static="no">
        <name>FMT_GEN2</name>
        <param><defname>f</defname></param>
        <initializer><ref refid="format_8h_1a3c8f64756453f72ccf16b23dd82f79f5" kindref="member">FMT_GEN1</ref>(<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>),  <ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2082" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2082" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a08e0a4f9682a7f2ab1d6613bb6bca425" prot="public" static="no">
        <name>FMT_GEN3</name>
        <param><defname>f</defname></param>
        <initializer><ref refid="format_8h_1ab7f734cb3a84b230e2adad93dace3551" kindref="member">FMT_GEN2</ref>(<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>),  <ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>(2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2083" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2083" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1ae97e890522b7c1f5afea43729d7a398d" prot="public" static="no">
        <name>FMT_GEN4</name>
        <param><defname>f</defname></param>
        <initializer><ref refid="format_8h_1a08e0a4f9682a7f2ab1d6613bb6bca425" kindref="member">FMT_GEN3</ref>(<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>),  <ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>(3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2084" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2084" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1afe82fdb8f3d5b212a61bde39ee02da40" prot="public" static="no">
        <name>FMT_GEN5</name>
        <param><defname>f</defname></param>
        <initializer><ref refid="format_8h_1ae97e890522b7c1f5afea43729d7a398d" kindref="member">FMT_GEN4</ref>(<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>),  <ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>(4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2085" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2085" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a96d8ff068a628137a907eafa7bbb8d53" prot="public" static="no">
        <name>FMT_GEN6</name>
        <param><defname>f</defname></param>
        <initializer><ref refid="format_8h_1afe82fdb8f3d5b212a61bde39ee02da40" kindref="member">FMT_GEN5</ref>(<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>),  <ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>(5)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2086" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2086" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1ad3d21b7ef2694e5af2ddf87bb8785adb" prot="public" static="no">
        <name>FMT_GEN7</name>
        <param><defname>f</defname></param>
        <initializer><ref refid="format_8h_1a96d8ff068a628137a907eafa7bbb8d53" kindref="member">FMT_GEN6</ref>(<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>),  <ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>(6)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2087" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2087" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a8f0dff4cbc3ea545304a7ec377abc7f3" prot="public" static="no">
        <name>FMT_GEN8</name>
        <param><defname>f</defname></param>
        <initializer><ref refid="format_8h_1ad3d21b7ef2694e5af2ddf87bb8785adb" kindref="member">FMT_GEN7</ref>(<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>),  <ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>(7)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2088" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2088" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1ae68851faa26196e43a96354e4d25bfe2" prot="public" static="no">
        <name>FMT_GEN9</name>
        <param><defname>f</defname></param>
        <initializer><ref refid="format_8h_1a8f0dff4cbc3ea545304a7ec377abc7f3" kindref="member">FMT_GEN8</ref>(<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>),  <ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>(8)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2089" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2089" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1af8253bd513c8b71eae91b59958b451a7" prot="public" static="no">
        <name>FMT_GEN10</name>
        <param><defname>f</defname></param>
        <initializer><ref refid="format_8h_1ae68851faa26196e43a96354e4d25bfe2" kindref="member">FMT_GEN9</ref>(<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>),  <ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>(9)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2090" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2090" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a0a5a11fd57614486ccb33394734860a0" prot="public" static="no">
        <name>FMT_GEN11</name>
        <param><defname>f</defname></param>
        <initializer><ref refid="format_8h_1af8253bd513c8b71eae91b59958b451a7" kindref="member">FMT_GEN10</ref>(<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>), <ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>(10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2091" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2091" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1ae56463f86d0ad37dc5b959c9a9c41609" prot="public" static="no">
        <name>FMT_GEN12</name>
        <param><defname>f</defname></param>
        <initializer><ref refid="format_8h_1a0a5a11fd57614486ccb33394734860a0" kindref="member">FMT_GEN11</ref>(<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>), <ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>(11)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2092" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2092" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a866896114300cda7c5af8cd6e59386c3" prot="public" static="no">
        <name>FMT_GEN13</name>
        <param><defname>f</defname></param>
        <initializer><ref refid="format_8h_1ae56463f86d0ad37dc5b959c9a9c41609" kindref="member">FMT_GEN12</ref>(<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>), <ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>(12)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2093" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2093" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a6600eae5791e892ffdbf002ee22c1378" prot="public" static="no">
        <name>FMT_GEN14</name>
        <param><defname>f</defname></param>
        <initializer><ref refid="format_8h_1a866896114300cda7c5af8cd6e59386c3" kindref="member">FMT_GEN13</ref>(<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>), <ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>(13)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2094" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2094" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1af245ed926303d044c943b467f3ae31b8" prot="public" static="no">
        <name>FMT_GEN15</name>
        <param><defname>f</defname></param>
        <initializer><ref refid="format_8h_1a6600eae5791e892ffdbf002ee22c1378" kindref="member">FMT_GEN14</ref>(<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>), <ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>(14)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2095" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2095" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a314a375c57af00408d198600634361d2" prot="public" static="no">
        <name>FMT_ARG_TYPE_DEFAULT</name>
        <param><defname>n</defname></param>
        <initializer><ref refid="structfmt_1_1internal_1_1_arg_type" kindref="compound">ArgType</ref> <ref refid="glew_8h_1ade5636ea600ca40c1f2c8cd08c1dcd3e" kindref="member">t</ref>##<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref> = <ref refid="structfmt_1_1internal_1_1_arg_type" kindref="compound">ArgType</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2151" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1aefc75463cfc08c7dc38ae368787bb2f7" prot="public" static="no">
        <name>FMT_MAKE_TEMPLATE_ARG</name>
        <param><defname>n</defname></param>
        <initializer>typename T##<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2162" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1ac5490b83127f8004dde07cd6fd80034f" prot="public" static="no">
        <name>FMT_MAKE_ARG_TYPE</name>
        <param><defname>n</defname></param>
        <initializer>T##<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2163" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a2887a50989bee3473bbb79232a99212d" prot="public" static="no">
        <name>FMT_MAKE_ARG</name>
        <param><defname>n</defname></param>
        <initializer>const T##<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref> &amp;<ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref>##<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2164" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1ae2da8743fd9e1d54b0d5336f9b6ef843" prot="public" static="no">
        <name>FMT_ASSIGN_char</name>
        <param><defname>n</defname></param>
        <initializer>arr[<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>] = <ref refid="classfmt_1_1internal_1_1_make_value" kindref="compound">fmt::internal::MakeValue</ref>&lt; <ref refid="classfmt_1_1_basic_formatter" kindref="compound">fmt::BasicFormatter</ref>&lt;char&gt; &gt;(<ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref>##<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2165" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1abbc11ee1c13d66afdeae89b3900393c7" prot="public" static="no">
        <name>FMT_ASSIGN_wchar_t</name>
        <param><defname>n</defname></param>
        <initializer>arr[<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>] = <ref refid="classfmt_1_1internal_1_1_make_value" kindref="compound">fmt::internal::MakeValue</ref>&lt; <ref refid="classfmt_1_1_basic_formatter" kindref="compound">fmt::BasicFormatter</ref>&lt;wchar_t&gt; &gt;(<ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref>##<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2167" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1ac80624946184b29ccd34717410c65096" prot="public" static="no">
        <name>FMT_MAKE_REF</name>
        <param><defname>n</defname></param>
        <initializer><ref refid="classfmt_1_1internal_1_1_make_value" kindref="compound">fmt::internal::MakeValue</ref>&lt; <ref refid="classfmt_1_1_basic_formatter" kindref="compound">fmt::BasicFormatter</ref>&lt;Char&gt; &gt;(<ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref>##<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2193" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a4230ffbc609374a0f9d1bdcac4f9db31" prot="public" static="no">
        <name>FMT_MAKE_REF2</name>
        <param><defname>n</defname></param>
        <initializer><ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref>##<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2195" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1af93fc1d475de12d8d4aff81b1ff43d0e" prot="public" static="no">
        <name>FMT_WRAP1</name>
        <param><defname>func</defname></param>
        <param><defname>arg_type</defname></param>
        <param><defname>n</defname></param>
        <initializer>template &lt;<ref refid="format_8h_1ab581aee8e1b94e923b16e7146b777a4a" kindref="member">FMT_GEN</ref>(<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>, <ref refid="format_8h_1aefc75463cfc08c7dc38ae368787bb2f7" kindref="member">FMT_MAKE_TEMPLATE_ARG</ref>)&gt; \
  inline <ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref> func(arg_type <ref refid="glew_8h_1a4b247ab422408c1761a36f9034c2585b" kindref="member">arg1</ref>, <ref refid="format_8h_1ab581aee8e1b94e923b16e7146b777a4a" kindref="member">FMT_GEN</ref>(<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>, <ref refid="format_8h_1a2887a50989bee3473bbb79232a99212d" kindref="member">FMT_MAKE_ARG</ref>)) { \
    const <ref refid="structfmt_1_1internal_1_1_arg_array" kindref="compound">fmt::internal::ArgArray</ref>&lt;<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>&gt;::<ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">Type</ref> <ref refid="glew_8h_1a52f38e7d822a46377fde7a02708eedb1" kindref="member">array</ref> = {<ref refid="format_8h_1ab581aee8e1b94e923b16e7146b777a4a" kindref="member">FMT_GEN</ref>(<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>, <ref refid="format_8h_1ac80624946184b29ccd34717410c65096" kindref="member">FMT_MAKE_REF</ref>)}; \
    func(<ref refid="glew_8h_1a4b247ab422408c1761a36f9034c2585b" kindref="member">arg1</ref>, <ref refid="classfmt_1_1_arg_list" kindref="compound">fmt::ArgList</ref>( \
      <ref refid="namespacefmt_1_1internal_1a7d8abb1ded2bf7989f6658811a0ca93e" kindref="member">fmt::internal::make_type</ref>(<ref refid="format_8h_1ab581aee8e1b94e923b16e7146b777a4a" kindref="member">FMT_GEN</ref>(<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>, <ref refid="format_8h_1a4230ffbc609374a0f9d1bdcac4f9db31" kindref="member">FMT_MAKE_REF2</ref>)), <ref refid="glew_8h_1a52f38e7d822a46377fde7a02708eedb1" kindref="member">array</ref>)); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2199" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a125f5651dc472ff4c5ef4662902e25c5" prot="public" static="no">
        <name>FMT_VARIADIC_VOID</name>
        <param><defname>func</defname></param>
        <param><defname>arg_type</defname></param>
        <initializer>inline <ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref> func(arg_type arg) { func(arg, <ref refid="classfmt_1_1_arg_list" kindref="compound">fmt::ArgList</ref>()); } \
  <ref refid="format_8h_1af93fc1d475de12d8d4aff81b1ff43d0e" kindref="member">FMT_WRAP1</ref>(func, arg_type, 1) <ref refid="format_8h_1af93fc1d475de12d8d4aff81b1ff43d0e" kindref="member">FMT_WRAP1</ref>(func, arg_type, 2) \
  <ref refid="format_8h_1af93fc1d475de12d8d4aff81b1ff43d0e" kindref="member">FMT_WRAP1</ref>(func, arg_type, 3) <ref refid="format_8h_1af93fc1d475de12d8d4aff81b1ff43d0e" kindref="member">FMT_WRAP1</ref>(func, arg_type, 4) \
  <ref refid="format_8h_1af93fc1d475de12d8d4aff81b1ff43d0e" kindref="member">FMT_WRAP1</ref>(func, arg_type, 5) <ref refid="format_8h_1af93fc1d475de12d8d4aff81b1ff43d0e" kindref="member">FMT_WRAP1</ref>(func, arg_type, 6) \
  <ref refid="format_8h_1af93fc1d475de12d8d4aff81b1ff43d0e" kindref="member">FMT_WRAP1</ref>(func, arg_type, 7) <ref refid="format_8h_1af93fc1d475de12d8d4aff81b1ff43d0e" kindref="member">FMT_WRAP1</ref>(func, arg_type, 8) \
  <ref refid="format_8h_1af93fc1d475de12d8d4aff81b1ff43d0e" kindref="member">FMT_WRAP1</ref>(func, arg_type, 9) <ref refid="format_8h_1af93fc1d475de12d8d4aff81b1ff43d0e" kindref="member">FMT_WRAP1</ref>(func, arg_type, 10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2208" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a958a38c4bea597054e6b420b23d6b332" prot="public" static="no">
        <name>FMT_CTOR</name>
        <param><defname>ctor</defname></param>
        <param><defname>func</defname></param>
        <param><defname>arg0_type</defname></param>
        <param><defname>arg1_type</defname></param>
        <param><defname>n</defname></param>
        <initializer>template &lt;<ref refid="format_8h_1ab581aee8e1b94e923b16e7146b777a4a" kindref="member">FMT_GEN</ref>(<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>, <ref refid="format_8h_1aefc75463cfc08c7dc38ae368787bb2f7" kindref="member">FMT_MAKE_TEMPLATE_ARG</ref>)&gt; \
  ctor(arg0_type arg0, arg1_type <ref refid="glew_8h_1a4b247ab422408c1761a36f9034c2585b" kindref="member">arg1</ref>, <ref refid="format_8h_1ab581aee8e1b94e923b16e7146b777a4a" kindref="member">FMT_GEN</ref>(<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>, <ref refid="format_8h_1a2887a50989bee3473bbb79232a99212d" kindref="member">FMT_MAKE_ARG</ref>)) { \
    const <ref refid="structfmt_1_1internal_1_1_arg_array" kindref="compound">fmt::internal::ArgArray</ref>&lt;<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>&gt;::<ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">Type</ref> <ref refid="glew_8h_1a52f38e7d822a46377fde7a02708eedb1" kindref="member">array</ref> = {<ref refid="format_8h_1ab581aee8e1b94e923b16e7146b777a4a" kindref="member">FMT_GEN</ref>(<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>, <ref refid="format_8h_1ac80624946184b29ccd34717410c65096" kindref="member">FMT_MAKE_REF</ref>)}; \
    func(arg0, <ref refid="glew_8h_1a4b247ab422408c1761a36f9034c2585b" kindref="member">arg1</ref>, <ref refid="classfmt_1_1_arg_list" kindref="compound">fmt::ArgList</ref>( \
      <ref refid="namespacefmt_1_1internal_1a7d8abb1ded2bf7989f6658811a0ca93e" kindref="member">fmt::internal::make_type</ref>(<ref refid="format_8h_1ab581aee8e1b94e923b16e7146b777a4a" kindref="member">FMT_GEN</ref>(<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>, <ref refid="format_8h_1a4230ffbc609374a0f9d1bdcac4f9db31" kindref="member">FMT_MAKE_REF2</ref>)), <ref refid="glew_8h_1a52f38e7d822a46377fde7a02708eedb1" kindref="member">array</ref>)); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2216" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a5a549dd8fe2e1f2c72dbbba54218394f" prot="public" static="no">
        <name>FMT_VARIADIC_CTOR</name>
        <param><defname>ctor</defname></param>
        <param><defname>func</defname></param>
        <param><defname>arg0_type</defname></param>
        <param><defname>arg1_type</defname></param>
        <initializer><ref refid="format_8h_1a958a38c4bea597054e6b420b23d6b332" kindref="member">FMT_CTOR</ref>(ctor, func, arg0_type, arg1_type, 1) \
  <ref refid="format_8h_1a958a38c4bea597054e6b420b23d6b332" kindref="member">FMT_CTOR</ref>(ctor, func, arg0_type, arg1_type, 2) \
  <ref refid="format_8h_1a958a38c4bea597054e6b420b23d6b332" kindref="member">FMT_CTOR</ref>(ctor, func, arg0_type, arg1_type, 3) \
  <ref refid="format_8h_1a958a38c4bea597054e6b420b23d6b332" kindref="member">FMT_CTOR</ref>(ctor, func, arg0_type, arg1_type, 4) \
  <ref refid="format_8h_1a958a38c4bea597054e6b420b23d6b332" kindref="member">FMT_CTOR</ref>(ctor, func, arg0_type, arg1_type, 5) \
  <ref refid="format_8h_1a958a38c4bea597054e6b420b23d6b332" kindref="member">FMT_CTOR</ref>(ctor, func, arg0_type, arg1_type, 6) \
  <ref refid="format_8h_1a958a38c4bea597054e6b420b23d6b332" kindref="member">FMT_CTOR</ref>(ctor, func, arg0_type, arg1_type, 7) \
  <ref refid="format_8h_1a958a38c4bea597054e6b420b23d6b332" kindref="member">FMT_CTOR</ref>(ctor, func, arg0_type, arg1_type, 8) \
  <ref refid="format_8h_1a958a38c4bea597054e6b420b23d6b332" kindref="member">FMT_CTOR</ref>(ctor, func, arg0_type, arg1_type, 9) \
  <ref refid="format_8h_1a958a38c4bea597054e6b420b23d6b332" kindref="member">FMT_CTOR</ref>(ctor, func, arg0_type, arg1_type, 10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2225" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a4cc0f61b722443b16c5f1108976a9a29" prot="public" static="no">
        <name>FMT_FOR_EACH1</name>
        <param><defname>f</defname></param>
        <param><defname>x0</defname></param>
        <initializer><ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>(<ref refid="glew_8h_1a98ac434677655cc8438bb72de2719f39" kindref="member">x0</ref>, 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2240" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a56f160d15497bd2afcf96b02073c1bb0" prot="public" static="no">
        <name>FMT_FOR_EACH2</name>
        <param><defname>f</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <initializer><ref refid="format_8h_1a4cc0f61b722443b16c5f1108976a9a29" kindref="member">FMT_FOR_EACH1</ref>(<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>, <ref refid="glew_8h_1a98ac434677655cc8438bb72de2719f39" kindref="member">x0</ref>), <ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>(<ref refid="glew_8h_1a49825216c96caaeb09237b36651181c5" kindref="member">x1</ref>, 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2241" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a0c997e7d57bb5e92fee72f0a7322f74b" prot="public" static="no">
        <name>FMT_FOR_EACH3</name>
        <param><defname>f</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>x2</defname></param>
        <initializer><ref refid="format_8h_1a56f160d15497bd2afcf96b02073c1bb0" kindref="member">FMT_FOR_EACH2</ref>(<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>, <ref refid="glew_8h_1a98ac434677655cc8438bb72de2719f39" kindref="member">x0</ref> ,<ref refid="glew_8h_1a49825216c96caaeb09237b36651181c5" kindref="member">x1</ref>), <ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>(x2, 2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2243" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a5fc33959dc752d58a04640be7720be58" prot="public" static="no">
        <name>FMT_FOR_EACH4</name>
        <param><defname>f</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>x2</defname></param>
        <param><defname>x3</defname></param>
        <initializer><ref refid="format_8h_1a0c997e7d57bb5e92fee72f0a7322f74b" kindref="member">FMT_FOR_EACH3</ref>(<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>, <ref refid="glew_8h_1a98ac434677655cc8438bb72de2719f39" kindref="member">x0</ref>, <ref refid="glew_8h_1a49825216c96caaeb09237b36651181c5" kindref="member">x1</ref>, x2), <ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>(x3, 3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2245" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1ae3fabc476221bb06dd3d6af85c9692dd" prot="public" static="no">
        <name>FMT_FOR_EACH5</name>
        <param><defname>f</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>x2</defname></param>
        <param><defname>x3</defname></param>
        <param><defname>x4</defname></param>
        <initializer><ref refid="format_8h_1a5fc33959dc752d58a04640be7720be58" kindref="member">FMT_FOR_EACH4</ref>(<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>, <ref refid="glew_8h_1a98ac434677655cc8438bb72de2719f39" kindref="member">x0</ref>, <ref refid="glew_8h_1a49825216c96caaeb09237b36651181c5" kindref="member">x1</ref>, x2, x3), <ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>(x4, 4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2247" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1ae988f066706485bc4b37a3d818e27848" prot="public" static="no">
        <name>FMT_FOR_EACH6</name>
        <param><defname>f</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>x2</defname></param>
        <param><defname>x3</defname></param>
        <param><defname>x4</defname></param>
        <param><defname>x5</defname></param>
        <initializer><ref refid="format_8h_1ae3fabc476221bb06dd3d6af85c9692dd" kindref="member">FMT_FOR_EACH5</ref>(<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>, <ref refid="glew_8h_1a98ac434677655cc8438bb72de2719f39" kindref="member">x0</ref>, <ref refid="glew_8h_1a49825216c96caaeb09237b36651181c5" kindref="member">x1</ref>, x2, x3, x4), <ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>(x5, 5)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2249" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1aeae47f26149b7140ff098dd9dc582d03" prot="public" static="no">
        <name>FMT_FOR_EACH7</name>
        <param><defname>f</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>x2</defname></param>
        <param><defname>x3</defname></param>
        <param><defname>x4</defname></param>
        <param><defname>x5</defname></param>
        <param><defname>x6</defname></param>
        <initializer><ref refid="format_8h_1ae988f066706485bc4b37a3d818e27848" kindref="member">FMT_FOR_EACH6</ref>(<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>, <ref refid="glew_8h_1a98ac434677655cc8438bb72de2719f39" kindref="member">x0</ref>, <ref refid="glew_8h_1a49825216c96caaeb09237b36651181c5" kindref="member">x1</ref>, x2, x3, x4, x5), <ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>(x6, 6)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2251" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a19679e2f14d327b364d16ac90f0563ac" prot="public" static="no">
        <name>FMT_FOR_EACH8</name>
        <param><defname>f</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>x2</defname></param>
        <param><defname>x3</defname></param>
        <param><defname>x4</defname></param>
        <param><defname>x5</defname></param>
        <param><defname>x6</defname></param>
        <param><defname>x7</defname></param>
        <initializer><ref refid="format_8h_1aeae47f26149b7140ff098dd9dc582d03" kindref="member">FMT_FOR_EACH7</ref>(<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>, <ref refid="glew_8h_1a98ac434677655cc8438bb72de2719f39" kindref="member">x0</ref>, <ref refid="glew_8h_1a49825216c96caaeb09237b36651181c5" kindref="member">x1</ref>, x2, x3, x4, x5, x6), <ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>(x7, 7)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2253" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1ad78f0ebd1e537d53b8c00c288819d5cc" prot="public" static="no">
        <name>FMT_FOR_EACH9</name>
        <param><defname>f</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>x2</defname></param>
        <param><defname>x3</defname></param>
        <param><defname>x4</defname></param>
        <param><defname>x5</defname></param>
        <param><defname>x6</defname></param>
        <param><defname>x7</defname></param>
        <param><defname>x8</defname></param>
        <initializer><ref refid="format_8h_1a19679e2f14d327b364d16ac90f0563ac" kindref="member">FMT_FOR_EACH8</ref>(<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>, <ref refid="glew_8h_1a98ac434677655cc8438bb72de2719f39" kindref="member">x0</ref>, <ref refid="glew_8h_1a49825216c96caaeb09237b36651181c5" kindref="member">x1</ref>, x2, x3, x4, x5, x6, x7), <ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>(x8, 8)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2255" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a1ca5ca0e6b98c8ae5b209d94c3bc2bff" prot="public" static="no">
        <name>FMT_FOR_EACH10</name>
        <param><defname>f</defname></param>
        <param><defname>x0</defname></param>
        <param><defname>x1</defname></param>
        <param><defname>x2</defname></param>
        <param><defname>x3</defname></param>
        <param><defname>x4</defname></param>
        <param><defname>x5</defname></param>
        <param><defname>x6</defname></param>
        <param><defname>x7</defname></param>
        <param><defname>x8</defname></param>
        <param><defname>x9</defname></param>
        <initializer><ref refid="format_8h_1ad78f0ebd1e537d53b8c00c288819d5cc" kindref="member">FMT_FOR_EACH9</ref>(<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>, <ref refid="glew_8h_1a98ac434677655cc8438bb72de2719f39" kindref="member">x0</ref>, <ref refid="glew_8h_1a49825216c96caaeb09237b36651181c5" kindref="member">x1</ref>, x2, x3, x4, x5, x6, x7, x8), <ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>(x9, 9)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="2257" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="2257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1af2b14c99c910ab490448bf9f176207d1" prot="public" static="no">
        <name>FMT_EXPAND</name>
        <param><defname>args</defname></param>
        <initializer>args</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="3351" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="3351" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1accdb20f44b377869369141b5c67d2d93" prot="public" static="no">
        <name>FMT_NARG</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="format_8h_1acd8ac92441b2b4a11806bbda27fa8cb7" kindref="member">FMT_NARG_</ref>(__VA_ARGS__, <ref refid="format_8h_1a15b24ba706c9e53f760a9b9071e1b82c" kindref="member">FMT_RSEQ_N</ref>())</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="3355" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="3355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1acd8ac92441b2b4a11806bbda27fa8cb7" prot="public" static="no">
        <name>FMT_NARG_</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="format_8h_1af2b14c99c910ab490448bf9f176207d1" kindref="member">FMT_EXPAND</ref>(<ref refid="format_8h_1a9ff9cfec1b5fc4472b64466ae2421375" kindref="member">FMT_ARG_N</ref>(__VA_ARGS__))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="3356" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="3356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a9ff9cfec1b5fc4472b64466ae2421375" prot="public" static="no">
        <name>FMT_ARG_N</name>
        <param><defname>_1</defname></param>
        <param><defname>_2</defname></param>
        <param><defname>_3</defname></param>
        <param><defname>_4</defname></param>
        <param><defname>_5</defname></param>
        <param><defname>_6</defname></param>
        <param><defname>_7</defname></param>
        <param><defname>_8</defname></param>
        <param><defname>_9</defname></param>
        <param><defname>_10</defname></param>
        <param><defname>N</defname></param>
        <param><defname>...</defname></param>
        <initializer>N</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="3357" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="3357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a15b24ba706c9e53f760a9b9071e1b82c" prot="public" static="no">
        <name>FMT_RSEQ_N</name>
        <param></param>
        <initializer>10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="3358" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="3358" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1abe4b038281180aa67854053184169ac8" prot="public" static="no">
        <name>FMT_FOR_EACH_</name>
        <param><defname>N</defname></param>
        <param><defname>f</defname></param>
        <param><defname>...</defname></param>
        <initializer><ref refid="format_8h_1af2b14c99c910ab490448bf9f176207d1" kindref="member">FMT_EXPAND</ref>(<ref refid="format_8h_1a3e04d7bac3d8124e4fe7d64d3de25cfa" kindref="member">FMT_CONCAT</ref>(<ref refid="format_8h_1a0c2d6083cbd70985bcf9cd992094b6ad" kindref="member">FMT_FOR_EACH</ref>, N)(<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>, __VA_ARGS__))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="3360" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="3360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a0c2d6083cbd70985bcf9cd992094b6ad" prot="public" static="no">
        <name>FMT_FOR_EACH</name>
        <param><defname>f</defname></param>
        <param><defname>...</defname></param>
        <initializer><ref refid="format_8h_1af2b14c99c910ab490448bf9f176207d1" kindref="member">FMT_EXPAND</ref>(<ref refid="format_8h_1abe4b038281180aa67854053184169ac8" kindref="member">FMT_FOR_EACH_</ref>(<ref refid="format_8h_1accdb20f44b377869369141b5c67d2d93" kindref="member">FMT_NARG</ref>(__VA_ARGS__), <ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>, __VA_ARGS__))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="3362" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="3362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1aa46f8a0487315fdb94f1c67b5364166f" prot="public" static="no">
        <name>FMT_ADD_ARG_NAME</name>
        <param><defname>type</defname></param>
        <param><defname>index</defname></param>
        <initializer><ref refid="glew_8h_1a8d78e2e8a676abd547a596dd84811285" kindref="member">type</ref> arg##<ref refid="glew_8h_1a57f14e05b1900f16a2da82ade47d0c6d" kindref="member">index</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="3365" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="3365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a7e610b1eaae640f58bbb945ab9a57359" prot="public" static="no">
        <name>FMT_GET_ARG_NAME</name>
        <param><defname>type</defname></param>
        <param><defname>index</defname></param>
        <initializer>arg##<ref refid="glew_8h_1a57f14e05b1900f16a2da82ade47d0c6d" kindref="member">index</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="3366" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="3366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a0a128dd850a99084d540bc2f2a89fe37" prot="public" static="no">
        <name>FMT_WRAP</name>
        <param><defname>Char</defname></param>
        <param><defname>ReturnType</defname></param>
        <param><defname>func</defname></param>
        <param><defname>call</defname></param>
        <param><defname>n</defname></param>
        <param><defname>...</defname></param>
        <initializer>template &lt;<ref refid="format_8h_1ab581aee8e1b94e923b16e7146b777a4a" kindref="member">FMT_GEN</ref>(<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>, <ref refid="format_8h_1aefc75463cfc08c7dc38ae368787bb2f7" kindref="member">FMT_MAKE_TEMPLATE_ARG</ref>)&gt; \
  inline ReturnType func(<ref refid="format_8h_1a0c2d6083cbd70985bcf9cd992094b6ad" kindref="member">FMT_FOR_EACH</ref>(<ref refid="format_8h_1aa46f8a0487315fdb94f1c67b5364166f" kindref="member">FMT_ADD_ARG_NAME</ref>, __VA_ARGS__), \
      <ref refid="format_8h_1ab581aee8e1b94e923b16e7146b777a4a" kindref="member">FMT_GEN</ref>(<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>, <ref refid="format_8h_1a2887a50989bee3473bbb79232a99212d" kindref="member">FMT_MAKE_ARG</ref>)) { \
    <ref refid="structfmt_1_1internal_1_1_arg_array" kindref="compound">fmt::internal::ArgArray</ref>&lt;<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>&gt;::<ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">Type</ref> arr; \
    <ref refid="format_8h_1ab581aee8e1b94e923b16e7146b777a4a" kindref="member">FMT_GEN</ref>(<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>, FMT_ASSIGN_##Char); \
    call(<ref refid="format_8h_1a0c2d6083cbd70985bcf9cd992094b6ad" kindref="member">FMT_FOR_EACH</ref>(<ref refid="format_8h_1a7e610b1eaae640f58bbb945ab9a57359" kindref="member">FMT_GET_ARG_NAME</ref>, __VA_ARGS__), <ref refid="classfmt_1_1_arg_list" kindref="compound">fmt::ArgList</ref>( \
      <ref refid="namespacefmt_1_1internal_1a7d8abb1ded2bf7989f6658811a0ca93e" kindref="member">fmt::internal::make_type</ref>(<ref refid="format_8h_1ab581aee8e1b94e923b16e7146b777a4a" kindref="member">FMT_GEN</ref>(<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>, <ref refid="format_8h_1a4230ffbc609374a0f9d1bdcac4f9db31" kindref="member">FMT_MAKE_REF2</ref>)), arr)); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="3382" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="3382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1ad975649fe541a22d6a79cd6f9a406124" prot="public" static="no">
        <name>FMT_VARIADIC_</name>
        <param><defname>Char</defname></param>
        <param><defname>ReturnType</defname></param>
        <param><defname>func</defname></param>
        <param><defname>call</defname></param>
        <param><defname>...</defname></param>
        <initializer>inline ReturnType func(<ref refid="format_8h_1a0c2d6083cbd70985bcf9cd992094b6ad" kindref="member">FMT_FOR_EACH</ref>(<ref refid="format_8h_1aa46f8a0487315fdb94f1c67b5364166f" kindref="member">FMT_ADD_ARG_NAME</ref>, __VA_ARGS__)) { \
    call(<ref refid="format_8h_1a0c2d6083cbd70985bcf9cd992094b6ad" kindref="member">FMT_FOR_EACH</ref>(<ref refid="format_8h_1a7e610b1eaae640f58bbb945ab9a57359" kindref="member">FMT_GET_ARG_NAME</ref>, __VA_ARGS__), <ref refid="classfmt_1_1_arg_list" kindref="compound">fmt::ArgList</ref>()); \
  } \
  <ref refid="format_8h_1a0a128dd850a99084d540bc2f2a89fe37" kindref="member">FMT_WRAP</ref>(Char, ReturnType, func, call, 1, __VA_ARGS__) \
  <ref refid="format_8h_1a0a128dd850a99084d540bc2f2a89fe37" kindref="member">FMT_WRAP</ref>(Char, ReturnType, func, call, 2, __VA_ARGS__) \
  <ref refid="format_8h_1a0a128dd850a99084d540bc2f2a89fe37" kindref="member">FMT_WRAP</ref>(Char, ReturnType, func, call, 3, __VA_ARGS__) \
  <ref refid="format_8h_1a0a128dd850a99084d540bc2f2a89fe37" kindref="member">FMT_WRAP</ref>(Char, ReturnType, func, call, 4, __VA_ARGS__) \
  <ref refid="format_8h_1a0a128dd850a99084d540bc2f2a89fe37" kindref="member">FMT_WRAP</ref>(Char, ReturnType, func, call, 5, __VA_ARGS__) \
  <ref refid="format_8h_1a0a128dd850a99084d540bc2f2a89fe37" kindref="member">FMT_WRAP</ref>(Char, ReturnType, func, call, 6, __VA_ARGS__) \
  <ref refid="format_8h_1a0a128dd850a99084d540bc2f2a89fe37" kindref="member">FMT_WRAP</ref>(Char, ReturnType, func, call, 7, __VA_ARGS__) \
  <ref refid="format_8h_1a0a128dd850a99084d540bc2f2a89fe37" kindref="member">FMT_WRAP</ref>(Char, ReturnType, func, call, 8, __VA_ARGS__) \
  <ref refid="format_8h_1a0a128dd850a99084d540bc2f2a89fe37" kindref="member">FMT_WRAP</ref>(Char, ReturnType, func, call, 9, __VA_ARGS__) \
  <ref refid="format_8h_1a0a128dd850a99084d540bc2f2a89fe37" kindref="member">FMT_WRAP</ref>(Char, ReturnType, func, call, 10, __VA_ARGS__) \
  <ref refid="format_8h_1a0a128dd850a99084d540bc2f2a89fe37" kindref="member">FMT_WRAP</ref>(Char, ReturnType, func, call, 11, __VA_ARGS__) \
  <ref refid="format_8h_1a0a128dd850a99084d540bc2f2a89fe37" kindref="member">FMT_WRAP</ref>(Char, ReturnType, func, call, 12, __VA_ARGS__) \
  <ref refid="format_8h_1a0a128dd850a99084d540bc2f2a89fe37" kindref="member">FMT_WRAP</ref>(Char, ReturnType, func, call, 13, __VA_ARGS__) \
  <ref refid="format_8h_1a0a128dd850a99084d540bc2f2a89fe37" kindref="member">FMT_WRAP</ref>(Char, ReturnType, func, call, 14, __VA_ARGS__) \
  <ref refid="format_8h_1a0a128dd850a99084d540bc2f2a89fe37" kindref="member">FMT_WRAP</ref>(Char, ReturnType, func, call, 15, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="3392" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="3392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a65215c7dfcc0e942cd0798860877e86b" prot="public" static="no">
        <name>FMT_VARIADIC</name>
        <param><defname>ReturnType</defname></param>
        <param><defname>func</defname></param>
        <param><defname>...</defname></param>
        <initializer><ref refid="format_8h_1ad975649fe541a22d6a79cd6f9a406124" kindref="member">FMT_VARIADIC_</ref>(char, ReturnType, func, return func, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines a variadic function with the specified return type, function name and argument types passed as variable arguments to this macro.</para><para>Example**::</para><para>void print_error(const char *file, int line, const char *format, <ref refid="classfmt_1_1_arg_list" kindref="compound">fmt::ArgList</ref> args) { <ref refid="namespacefmt_1adec465a02f79e1e023ec283fa6da9f13" kindref="member">fmt::print</ref>(&quot;{}: {}: &quot;, file, line); fmt::print(format, args); } <ref refid="format_8h_1a65215c7dfcc0e942cd0798860877e86b" kindref="member">FMT_VARIADIC(void, print_error, const char *, int, const char *)</ref></para><para><computeroutput>FMT_VARIADIC</computeroutput> is used for compatibility with legacy C++ compilers that don&apos;t implement variadic templates. You don&apos;t have to use this macro if you don&apos;t need legacy compiler support and can use variadic templates directly::</para><para>template &lt;typename... Args&gt; void print_error(const char *file, int line, const char *format, const Args &amp; ... args) { <ref refid="namespacefmt_1adec465a02f79e1e023ec283fa6da9f13" kindref="member">fmt::print</ref>(&quot;{}: {}: &quot;, file, line); <ref refid="namespacefmt_1adec465a02f79e1e023ec283fa6da9f13" kindref="member">fmt::print</ref>(format, args...); }  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="3440" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="3440" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1ade3d94cf1857de68f99e7059277d51f5" prot="public" static="no">
        <name>FMT_VARIADIC_W</name>
        <param><defname>ReturnType</defname></param>
        <param><defname>func</defname></param>
        <param><defname>...</defname></param>
        <initializer><ref refid="format_8h_1ad975649fe541a22d6a79cd6f9a406124" kindref="member">FMT_VARIADIC_</ref>(wchar_t, ReturnType, func, return func, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="3443" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="3443" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a568d86f12c11293ea2759739461cb334" prot="public" static="no">
        <name>FMT_CAPTURE_ARG_</name>
        <param><defname>id</defname></param>
        <param><defname>index</defname></param>
        <initializer>::<ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">fmt::arg</ref>(#<ref refid="glew_8h_1a58c2a664503e14ffb8f21012aabff3e9" kindref="member">id</ref>, <ref refid="glew_8h_1a58c2a664503e14ffb8f21012aabff3e9" kindref="member">id</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="3446" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="3446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a0e8f79fea6b4e4bee2d7a0164adf1c76" prot="public" static="no">
        <name>FMT_CAPTURE_ARG_W_</name>
        <param><defname>id</defname></param>
        <param><defname>index</defname></param>
        <initializer>::<ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">fmt::arg</ref>(L###<ref refid="glew_8h_1a58c2a664503e14ffb8f21012aabff3e9" kindref="member">id</ref>, <ref refid="glew_8h_1a58c2a664503e14ffb8f21012aabff3e9" kindref="member">id</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="3448" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="3448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a3caa326fabdddb0e4fbcad7e5ec8bd37" prot="public" static="no">
        <name>FMT_CAPTURE</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="format_8h_1a0c2d6083cbd70985bcf9cd992094b6ad" kindref="member">FMT_FOR_EACH</ref>(<ref refid="format_8h_1a568d86f12c11293ea2759739461cb334" kindref="member">FMT_CAPTURE_ARG_</ref>, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenient macro to capture the arguments&apos; names and values into several <computeroutput>fmt::arg(name, value)</computeroutput>.</para><para>Example**::</para><para>int x = 1, y = 2; print(&quot;point: ({x}, {y})&quot;, <ref refid="format_8h_1a3caa326fabdddb0e4fbcad7e5ec8bd37" kindref="member">FMT_CAPTURE(x, y)</ref>); same as: print(&quot;point: ({x}, {y})&quot;, arg(&quot;x&quot;, x), arg(&quot;y&quot;, y));</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="3464" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="3464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1ab8c33d2ac5dba6eacde282ca2490e66d" prot="public" static="no">
        <name>FMT_CAPTURE_W</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="format_8h_1a0c2d6083cbd70985bcf9cd992094b6ad" kindref="member">FMT_FOR_EACH</ref>(<ref refid="format_8h_1a0e8f79fea6b4e4bee2d7a0164adf1c76" kindref="member">FMT_CAPTURE_ARG_W_</ref>, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="3466" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="3466" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8h_1a02c8898388e0ae59aab58be14fcd4e05" prot="public" static="no">
        <name>FMT_FUNC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="3832" column="11" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="3832" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>Formatting<sp/>library<sp/>for<sp/>C++</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>Copyright<sp/>(c)<sp/>2012<sp/>-<sp/>2016,<sp/>Victor<sp/>Zverovich</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_FORMAT_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_FORMAT_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;clocale&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_SECURE_SCL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_SECURE_SCL<sp/>_SECURE_SCL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="format_8h_1a47258eefd01b3b6278d8057e5c89616a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_SECURE_SCL<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_SECURE_SCL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_MSC_VER<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="format_8h_1a363cb0623e6975ff2b357a52a03e4728" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_MSC_VER<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_MSC_VER<sp/>&amp;&amp;<sp/>FMT_MSC_VER<sp/>&lt;=<sp/>1500</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int32<sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int64<sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>__int64<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a036cd61bb4b30bb510b9538af4cebd1d" kindref="member">intmax_t</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdint_8h" kindref="compound">stdint.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(FMT_HEADER_ONLY)<sp/>&amp;&amp;<sp/>defined(_WIN32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>FMT_EXPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_API<sp/>__declspec(dllexport)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>elif<sp/>defined(FMT_SHARED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_API<sp/>__declspec(dllimport)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="format_8h_1a9a4960b70582ed2620911a0b75dce0b5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_GCC_VERSION<sp/>(__GNUC__<sp/>*<sp/>100<sp/>+<sp/>__GNUC_MINOR__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_GCC_EXTENSION<sp/>__extension__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>FMT_GCC_VERSION<sp/>&gt;=<sp/>406</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Disable<sp/>the<sp/>warning<sp/>about<sp/>&quot;long<sp/>long&quot;<sp/>which<sp/>is<sp/>sometimes<sp/>reported<sp/>even</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>when<sp/>using<sp/>__extension__.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wlong-long&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Disable<sp/>the<sp/>warning<sp/>about<sp/>declaration<sp/>shadowing<sp/>because<sp/>it<sp/>affects<sp/>too</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>many<sp/>valid<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wshadow&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Disable<sp/>the<sp/>warning<sp/>about<sp/>implicit<sp/>conversions<sp/>that<sp/>may<sp/>change<sp/>the<sp/>sign<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>integer;<sp/>silencing<sp/>it<sp/>otherwise<sp/>would<sp/>require<sp/>many<sp/>explicit<sp/>casts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wsign-conversion&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>__cplusplus<sp/>&gt;=<sp/>201103L<sp/>||<sp/>defined<sp/>__GXX_EXPERIMENTAL_CXX0X__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_HAS_GXX_CXX11<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="format_8h_1a4c23d7785df6fc141d8c6e93846042c6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_GCC_EXTENSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__INTEL_COMPILER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_ICC_VERSION<sp/>__INTEL_COMPILER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__ICL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_ICC_VERSION<sp/>__ICL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)<sp/>&amp;&amp;<sp/>!defined(FMT_ICC_VERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wdocumentation-unknown-command&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wpadded&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC_LIBSTD__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_GNUC_LIBSTD_VERSION<sp/>(__GNUC_LIBSTD__<sp/>*<sp/>100<sp/>+<sp/>__GNUC_LIBSTD_MINOR__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__has_feature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_HAS_FEATURE(x)<sp/>__has_feature(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="format_8h_1a749169f277bb21ccf12b1c665e68e88a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_HAS_FEATURE(x)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__has_builtin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_HAS_BUILTIN(x)<sp/>__has_builtin(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="format_8h_1a160d3314a3cdbd49e187b75d6ce2a652" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_HAS_BUILTIN(x)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__has_cpp_attribute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_HAS_CPP_ATTRIBUTE(x)<sp/>__has_cpp_attribute(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="format_8h_1a55d7b78b0300ddda018f77208e80f3e9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_HAS_CPP_ATTRIBUTE(x)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_USE_VARIADIC_TEMPLATES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Variadic<sp/>templates<sp/>are<sp/>available<sp/>in<sp/>GCC<sp/>since<sp/>version<sp/>4.4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(http://gcc.gnu.org/projects/cxx0x.html)<sp/>and<sp/>in<sp/>Visual<sp/>C++</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>since<sp/>version<sp/>2013.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="format_8h_1a30de7da3394d4e7b577ef4b7beb4834c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_USE_VARIADIC_TEMPLATES<sp/>\</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"><sp/><sp/><sp/>(FMT_HAS_FEATURE(cxx_variadic_templates)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(FMT_GCC_VERSION<sp/>&gt;=<sp/>404<sp/>&amp;&amp;<sp/>FMT_HAS_GXX_CXX11)<sp/>||<sp/>FMT_MSC_VER<sp/>&gt;=<sp/>1800)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_USE_RVALUE_REFERENCES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>use<sp/>rvalue<sp/>references<sp/>when<sp/>compiling<sp/>with<sp/>clang<sp/>and<sp/>an<sp/>old<sp/>libstdc++</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>the<sp/>latter<sp/>doesn&apos;t<sp/>provide<sp/>std::move.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(FMT_GNUC_LIBSTD_VERSION)<sp/>&amp;&amp;<sp/>FMT_GNUC_LIBSTD_VERSION<sp/>&lt;=<sp/>402</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_USE_RVALUE_REFERENCES<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="format_8h_1a675e81932738ad290a4ce56eb64bb81c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_USE_RVALUE_REFERENCES<sp/>\</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(FMT_HAS_FEATURE(cxx_rvalue_references)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(FMT_GCC_VERSION<sp/>&gt;=<sp/>403<sp/>&amp;&amp;<sp/>FMT_HAS_GXX_CXX11)<sp/>||<sp/>FMT_MSC_VER<sp/>&gt;=<sp/>1600)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_RVALUE_REFERENCES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;utility&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>std::move</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>exceptions<sp/>are<sp/>disabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>!defined(__EXCEPTIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_EXCEPTIONS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_MSC_VER<sp/>&amp;&amp;<sp/>!_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_EXCEPTIONS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="format_8h_1a5d3b416a99857b69e3b7de8e88c71ff3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_EXCEPTIONS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_THROW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>FMT_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_THROW(x)<sp/>throw<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_THROW(x)<sp/>assert(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>FMT_USE_NOEXCEPT<sp/>to<sp/>make<sp/>fmt<sp/>use<sp/>noexcept<sp/>(C++11<sp/>feature).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_USE_NOEXCEPT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="format_8h_1a65490b89e8bd22fd0b8ae4491643d60c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_USE_NOEXCEPT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_NOEXCEPT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>FMT_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>FMT_USE_NOEXCEPT<sp/>||<sp/>FMT_HAS_FEATURE(cxx_noexcept)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(FMT_GCC_VERSION<sp/>&gt;=<sp/>408<sp/>&amp;&amp;<sp/>FMT_HAS_GXX_CXX11)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>FMT_MSC_VER<sp/>&gt;=<sp/>1900</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>FMT_NOEXCEPT<sp/>noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="format_8h_1aef128913e8400683b1cbd1a3a2e11df3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>FMT_NOEXCEPT<sp/>throw()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_NOEXCEPT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>macro<sp/>to<sp/>disallow<sp/>the<sp/>copy<sp/>constructor<sp/>and<sp/>operator=<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>should<sp/>be<sp/>used<sp/>in<sp/>the<sp/>private:<sp/>declarations<sp/>for<sp/>a<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_USE_DELETED_FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="format_8h_1a6eec3712890dce6f99fc1036efd36daa" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_USE_DELETED_FUNCTIONS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_DELETED_FUNCTIONS<sp/>||<sp/>FMT_HAS_FEATURE(cxx_deleted_functions)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"><sp/><sp/>(FMT_GCC_VERSION<sp/>&gt;=<sp/>404<sp/>&amp;&amp;<sp/>FMT_HAS_GXX_CXX11)<sp/>||<sp/>FMT_MSC_VER<sp/>&gt;=<sp/>1800</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_DELETED_OR_UNDEFINED<sp/><sp/>=<sp/>delete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_DISALLOW_COPY_AND_ASSIGN(TypeName)<sp/>\</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TypeName(const<sp/>TypeName&amp;)<sp/>=<sp/>delete;<sp/>\</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TypeName&amp;<sp/>operator=(const<sp/>TypeName&amp;)<sp/>=<sp/>delete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="format_8h_1abf373cec341655be2a0b95e741898ef1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_DELETED_OR_UNDEFINED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="format_8h_1acc0b3b39544c7a0930ae1567d952a8d4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_DISALLOW_COPY_AND_ASSIGN(TypeName)<sp/>\</highlight></codeline>
<codeline lineno="212"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TypeName(const<sp/>TypeName&amp;);<sp/>\</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TypeName&amp;<sp/>operator=(const<sp/>TypeName&amp;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_USE_USER_DEFINED_LITERALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>compilers<sp/>which<sp/>support<sp/>UDLs<sp/>also<sp/>support<sp/>variadic<sp/>templates.<sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//<sp/>makes<sp/>the<sp/>fmt::literals<sp/>implementation<sp/>easier.<sp/>However,<sp/>an<sp/>explicit<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>variadic<sp/>templates<sp/>is<sp/>added<sp/>here<sp/>just<sp/>in<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>Intel&apos;s<sp/>compiler<sp/>both<sp/>it<sp/>and<sp/>the<sp/>system<sp/>gcc/msc<sp/>must<sp/>support<sp/>UDLs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221" refid="format_8h_1a7c29e7b4a54045f13bd664979804998d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_USE_USER_DEFINED_LITERALS<sp/>\</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"><sp/><sp/><sp/>FMT_USE_VARIADIC_TEMPLATES<sp/>&amp;&amp;<sp/>FMT_USE_RVALUE_REFERENCES<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="223"><highlight class="preprocessor"><sp/><sp/><sp/>(FMT_HAS_FEATURE(cxx_user_literals)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="224"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(FMT_GCC_VERSION<sp/>&gt;=<sp/>407<sp/>&amp;&amp;<sp/>FMT_HAS_GXX_CXX11)<sp/>||<sp/>FMT_MSC_VER<sp/>&gt;=<sp/>1900)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="225"><highlight class="preprocessor"><sp/><sp/><sp/>(!defined(FMT_ICC_VERSION)<sp/>||<sp/>FMT_ICC_VERSION<sp/>&gt;=<sp/>1500)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_ASSERT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="format_8h_1a03e7ee720f43adc7d83c652a6a5dd5f8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_ASSERT(condition,<sp/>message)<sp/>assert((condition)<sp/>&amp;&amp;<sp/>message)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_GCC_VERSION<sp/>&gt;=<sp/>400<sp/>||<sp/>FMT_HAS_BUILTIN(__builtin_clz)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_BUILTIN_CLZ(n)<sp/>__builtin_clz(n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_GCC_VERSION<sp/>&gt;=<sp/>400<sp/>||<sp/>FMT_HAS_BUILTIN(__builtin_clzll)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_BUILTIN_CLZLL(n)<sp/>__builtin_clzll(n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>compilers<sp/>masquerade<sp/>as<sp/>both<sp/>MSVC<sp/>and<sp/>GCC-likes<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//<sp/>otherwise<sp/>support<sp/>__builtin_clz<sp/>and<sp/>__builtin_clzll,<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>only<sp/>define<sp/>FMT_BUILTIN_CLZ<sp/>using<sp/>the<sp/>MSVC<sp/>intrinsics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>clz<sp/>and<sp/>clzll<sp/>builtins<sp/>are<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_MSC_VER<sp/>&amp;&amp;<sp/>!defined(FMT_BUILTIN_CLZLL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;intrin.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>_BitScanReverse,<sp/>_BitScanReverse64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefmt" kindref="compound">fmt</ref><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceinternal" kindref="compound">internal</ref><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>intrinsic(_BitScanReverse)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>clz(<ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/><ref refid="glew_8h_1ad77deca22f617d3f0e0eb786445689fc" kindref="member">x</ref>)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1afc1d5bdb45878ca9a9eb0b223d646b35" kindref="member">r</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>_BitScanReverse(&amp;r,<sp/>x);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>assert(x<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Static<sp/>analysis<sp/>complains<sp/>about<sp/>using<sp/>uninitialized<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;r&quot;,<sp/>but<sp/>the<sp/>only<sp/>way<sp/>that<sp/>can<sp/>happen<sp/>is<sp/>if<sp/>&quot;x&quot;<sp/>is<sp/>0,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>the<sp/>callers<sp/>guarantee<sp/>to<sp/>not<sp/>happen.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(suppress:<sp/>6102)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>31<sp/>-<sp/><ref refid="glew_8h_1afc1d5bdb45878ca9a9eb0b223d646b35" kindref="member">r</ref>;</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_BUILTIN_CLZ(n)<sp/>fmt::internal::clz(n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>_WIN64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>intrinsic(_BitScanReverse64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>clzll(<ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1afc1d5bdb45878ca9a9eb0b223d646b35" kindref="member">r</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>_WIN64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>_BitScanReverse64(&amp;r,<sp/>x);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Scan<sp/>the<sp/>high<sp/>32<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_BitScanReverse(&amp;r,<sp/>static_cast&lt;uint32_t&gt;(x<sp/>&gt;&gt;<sp/>32)))</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>63<sp/>-<sp/>(r<sp/>+<sp/>32);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Scan<sp/>the<sp/>low<sp/>32<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>_BitScanReverse(&amp;r,<sp/>static_cast&lt;uint32_t&gt;(x));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>assert(x<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Static<sp/>analysis<sp/>complains<sp/>about<sp/>using<sp/>uninitialized<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;r&quot;,<sp/>but<sp/>the<sp/>only<sp/>way<sp/>that<sp/>can<sp/>happen<sp/>is<sp/>if<sp/>&quot;x&quot;<sp/>is<sp/>0,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>the<sp/>callers<sp/>guarantee<sp/>to<sp/>not<sp/>happen.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(suppress:<sp/>6102)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>63<sp/>-<sp/><ref refid="glew_8h_1afc1d5bdb45878ca9a9eb0b223d646b35" kindref="member">r</ref>;</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_BUILTIN_CLZLL(n)<sp/>fmt::internal::clzll(n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefmt" kindref="compound">fmt</ref><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceinternal" kindref="compound">internal</ref><sp/>{</highlight></codeline>
<codeline lineno="294" refid="structfmt_1_1internal_1_1_dummy_int" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_dummy_int" kindref="compound">DummyInt</ref><sp/>{</highlight></codeline>
<codeline lineno="295" refid="structfmt_1_1internal_1_1_dummy_int_1a0b785da86f9605b7fbebba9014dcfa61" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a42c2b1d86fa71a425e73a882cb0a72c8" kindref="member">data</ref>[2];</highlight></codeline>
<codeline lineno="296" refid="structfmt_1_1internal_1_1_dummy_int_1a661adc117b3c83ab3aa91aaef0b3bf29" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal">};</highlight></codeline>
<codeline lineno="298" refid="namespacefmt_1_1internal_1ac98c581b032c82b08ee8b1e3c2046a42" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1numeric__limits_3_01fmt_1_1internal_1_1_dummy_int_01_4" kindref="compound">std::numeric_limits&lt;fmt::internal::DummyInt&gt;</ref><sp/><ref refid="namespacefmt_1_1internal_1ac98c581b032c82b08ee8b1e3c2046a42" kindref="member">FPUtil</ref>;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dummy<sp/>implementations<sp/>of<sp/>system<sp/>functions<sp/>such<sp/>as<sp/>signbit<sp/>and<sp/>ecvt<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>latter<sp/>are<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="namespacefmt_1_1internal_1a59ee392c090dd871eaa9dd487e741fae" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_dummy_int" kindref="compound">DummyInt</ref><sp/><ref refid="namespacefmt_1_1internal_1a59ee392c090dd871eaa9dd487e741fae" kindref="member">signbit</ref>(...)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_dummy_int" kindref="compound">DummyInt</ref>();<sp/>}</highlight></codeline>
<codeline lineno="303" refid="namespacefmt_1_1internal_1a6658cd22b7b3a0a43fed978d905b486d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_dummy_int" kindref="compound">DummyInt</ref><sp/><ref refid="namespacefmt_1_1internal_1a6658cd22b7b3a0a43fed978d905b486d" kindref="member">_ecvt_s</ref>(...)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_dummy_int" kindref="compound">DummyInt</ref>();<sp/>}</highlight></codeline>
<codeline lineno="304" refid="namespacefmt_1_1internal_1a41f3251b84cad32ce5f2ab18152ce3e3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_dummy_int" kindref="compound">DummyInt</ref><sp/><ref refid="namespacefmt_1_1internal_1a41f3251b84cad32ce5f2ab18152ce3e3" kindref="member">isinf</ref>(...)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_dummy_int" kindref="compound">DummyInt</ref>();<sp/>}</highlight></codeline>
<codeline lineno="305" refid="namespacefmt_1_1internal_1a364338fa2e549b40a69eb2f89c3ed1b7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_dummy_int" kindref="compound">DummyInt</ref><sp/><ref refid="namespacefmt_1_1internal_1a364338fa2e549b40a69eb2f89c3ed1b7" kindref="member">_finite</ref>(...)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_dummy_int" kindref="compound">DummyInt</ref>();<sp/>}</highlight></codeline>
<codeline lineno="306" refid="namespacefmt_1_1internal_1aa010b06d42f81bf80b44aa2291f7b166" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_dummy_int" kindref="compound">DummyInt</ref><sp/><ref refid="namespacefmt_1_1internal_1aa010b06d42f81bf80b44aa2291f7b166" kindref="member">isnan</ref>(...)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_dummy_int" kindref="compound">DummyInt</ref>();<sp/>}</highlight></codeline>
<codeline lineno="307" refid="namespacefmt_1_1internal_1ac71e5e42e71cb4c22fc1da6225b6be50" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_dummy_int" kindref="compound">DummyInt</ref><sp/><ref refid="namespacefmt_1_1internal_1ac71e5e42e71cb4c22fc1da6225b6be50" kindref="member">_isnan</ref>(...)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_dummy_int" kindref="compound">DummyInt</ref>();<sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>helper<sp/>function<sp/>to<sp/>suppress<sp/>bogus<sp/>&quot;conditional<sp/>expression<sp/>is<sp/>constant&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment">//<sp/>warnings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="312" refid="namespacefmt_1_1internal_1abe2cbab571913bf19a52c6f6bc1b5a5a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/><ref refid="namespacefmt_1_1internal_1abe2cbab571913bf19a52c6f6bc1b5a5a" kindref="member">const_check</ref>(T<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>;<sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>fmt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316" refid="namespacestd" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref><sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Standard<sp/>permits<sp/>specialization<sp/>of<sp/>std::numeric_limits.<sp/>This<sp/>specialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>used<sp/>to<sp/>resolve<sp/>ambiguity<sp/>between<sp/>isinf<sp/>and<sp/>std::isinf<sp/>in<sp/>glibc:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://gcc.gnu.org/bugzilla/show_bug.cgi?id=48891</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>same<sp/>for<sp/>isnan<sp/>and<sp/>signbit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="322" refid="classstd_1_1numeric__limits_3_01fmt_1_1internal_1_1_dummy_int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">numeric_limits&lt;<ref refid="namespacefmt" kindref="compound">fmt</ref>::internal::DummyInt&gt;<sp/>:</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::numeric_limits&lt;int&gt;<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Portable<sp/>version<sp/>of<sp/>isinf.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="327" refid="classstd_1_1numeric__limits_3_01fmt_1_1internal_1_1_dummy_int_01_4_1abd1469673d6c36a014a988bce1dfb0ee" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1numeric__limits_3_01fmt_1_1internal_1_1_dummy_int_01_4_1abd1469673d6c36a014a988bce1dfb0ee" kindref="member">isinfinity</ref>(T<sp/><ref refid="glew_8h_1ad77deca22f617d3f0e0eb786445689fc" kindref="member">x</ref>)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefmt_1_1internal" kindref="compound">fmt::internal</ref>;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>resolution<sp/>&quot;priority&quot;<sp/>is:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>isinf<sp/>macro<sp/>&gt;<sp/>std::isinf<sp/>&gt;<sp/>::isinf<sp/>&gt;<sp/>fmt::internal::isinf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacefmt_1_1internal_1abe2cbab571913bf19a52c6f6bc1b5a5a" kindref="member">const_check</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="namespacefmt_1_1internal_1a41f3251b84cad32ce5f2ab18152ce3e3" kindref="member">isinf</ref>(x))<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="namespacefmt_1_1internal_1a41f3251b84cad32ce5f2ab18152ce3e3" kindref="member">isinf</ref>(x))<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1a41f3251b84cad32ce5f2ab18152ce3e3" kindref="member">isinf</ref>(x)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="namespacefmt_1_1internal_1a364338fa2e549b40a69eb2f89c3ed1b7" kindref="member">_finite</ref>(static_cast&lt;double&gt;(x));</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Portable<sp/>version<sp/>of<sp/>isnan.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="340" refid="classstd_1_1numeric__limits_3_01fmt_1_1internal_1_1_dummy_int_01_4_1a89433356fbf5b68eb0c13208a5e3b6b1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1numeric__limits_3_01fmt_1_1internal_1_1_dummy_int_01_4_1a89433356fbf5b68eb0c13208a5e3b6b1" kindref="member">isnotanumber</ref>(T<sp/><ref refid="glew_8h_1ad77deca22f617d3f0e0eb786445689fc" kindref="member">x</ref>)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefmt_1_1internal" kindref="compound">fmt::internal</ref>;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacefmt_1_1internal_1abe2cbab571913bf19a52c6f6bc1b5a5a" kindref="member">const_check</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="namespacefmt_1_1internal_1aa010b06d42f81bf80b44aa2291f7b166" kindref="member">isnan</ref>(x))<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="namespacefmt_1_1internal_1aa010b06d42f81bf80b44aa2291f7b166" kindref="member">isnan</ref>(x))<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1aa010b06d42f81bf80b44aa2291f7b166" kindref="member">isnan</ref>(x)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1ac71e5e42e71cb4c22fc1da6225b6be50" kindref="member">_isnan</ref>(static_cast&lt;double&gt;(x))<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Portable<sp/>version<sp/>of<sp/>signbit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350" refid="classstd_1_1numeric__limits_3_01fmt_1_1internal_1_1_dummy_int_01_4_1a1cc82945f63918e9a8603d3ef750990d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1numeric__limits_3_01fmt_1_1internal_1_1_dummy_int_01_4_1a1cc82945f63918e9a8603d3ef750990d" kindref="member">isnegative</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1ad77deca22f617d3f0e0eb786445689fc" kindref="member">x</ref>)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefmt_1_1internal" kindref="compound">fmt::internal</ref>;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacefmt_1_1internal_1abe2cbab571913bf19a52c6f6bc1b5a5a" kindref="member">const_check</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="namespacefmt_1_1internal_1a59ee392c090dd871eaa9dd487e741fae" kindref="member">signbit</ref>(x))<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1a59ee392c090dd871eaa9dd487e741fae" kindref="member">signbit</ref>(x)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isnotanumber(x))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dec<sp/>=<sp/>0,<sp/>sign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a6c0f527f003707dfaca177b40f406ed9" kindref="member">buffer</ref>[2];<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>buffer<sp/>size<sp/>must<sp/>be<sp/>&gt;=<sp/>2<sp/>or<sp/>_ecvt_s<sp/>will<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1a6658cd22b7b3a0a43fed978d905b486d" kindref="member">_ecvt_s</ref>(buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer),<sp/>x,<sp/>0,<sp/>&amp;dec,<sp/>&amp;sign);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sign<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal">};</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefmt" kindref="compound">fmt</ref><sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Fix<sp/>the<sp/>warning<sp/>about<sp/>long<sp/>long<sp/>on<sp/>older<sp/>versions<sp/>of<sp/>GCC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>don&apos;t<sp/>support<sp/>the<sp/>diagnostic<sp/>pragma.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368" refid="namespacefmt_1aef84b50b68fdc25388fed2952c2db563" refkind="member"><highlight class="normal"><ref refid="format_8h_1a4c23d7785df6fc141d8c6e93846042c6" kindref="member">FMT_GCC_EXTENSION</ref><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1aef84b50b68fdc25388fed2952c2db563" kindref="member">LongLong</ref>;</highlight></codeline>
<codeline lineno="369" refid="namespacefmt_1af495ed85910212d4ba243ae2a8ce8f1f" refkind="member"><highlight class="normal"><ref refid="format_8h_1a4c23d7785df6fc141d8c6e93846042c6" kindref="member">FMT_GCC_EXTENSION</ref><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1af495ed85910212d4ba243ae2a8ce8f1f" kindref="member">ULongLong</ref>;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_RVALUE_REFERENCES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1a37ba44826afa04fddf20fd70c45ac3b4" kindref="member">std::move</ref>;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="376" refid="namespacefmt_1a4d870bb235d29dfe8f82e22c4c5574e7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter</ref>;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter&lt;char&gt;</ref><sp/><ref refid="namespacefmt_1a4d870bb235d29dfe8f82e22c4c5574e7" kindref="member">Writer</ref>;</highlight></codeline>
<codeline lineno="379" refid="namespacefmt_1afeac86b4bae798ed9eaedef61113d0db" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter&lt;wchar_t&gt;</ref><sp/><ref refid="namespacefmt_1afeac86b4bae798ed9eaedef61113d0db" kindref="member">WWriter</ref>;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="382" refid="classfmt_1_1_arg_formatter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1_arg_formatter" kindref="compound">ArgFormatter</ref>;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Impl,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="385" refid="classfmt_1_1_basic_printf_arg_formatter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1_basic_printf_arg_formatter" kindref="compound">BasicPrintfArgFormatter</ref>;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_arg_formatter" kindref="compound">ArgFormatter</ref><sp/>=<sp/><ref refid="classfmt_1_1_arg_formatter" kindref="compound">fmt::ArgFormatter&lt;CharType&gt;</ref><sp/>&gt;</highlight></codeline>
<codeline lineno="389" refid="classfmt_1_1_basic_formatter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1_basic_formatter" kindref="compound">BasicFormatter</ref>;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="416" refid="classfmt_1_1_basic_string_ref" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1_basic_string_ref" kindref="compound">BasicStringRef</ref><sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="418" refid="classfmt_1_1_basic_string_ref_1a2c31e3eb762d751cc91d9fecbe423d89" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*<ref refid="classfmt_1_1_basic_string_ref_1a2c31e3eb762d751cc91d9fecbe423d89" kindref="member">data_</ref>;</highlight></codeline>
<codeline lineno="419" refid="classfmt_1_1_basic_string_ref_1af8086acf75eb6f1795f1d1c15dac094d" refkind="member"><highlight class="normal"><sp/><sp/>std::size_t<sp/><ref refid="classfmt_1_1_basic_string_ref_1af8086acf75eb6f1795f1d1c15dac094d" kindref="member">size_</ref>;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="423" refid="classfmt_1_1_basic_string_ref_1adc7198e4dbd3eefff16081aae819181a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_string_ref_1adc7198e4dbd3eefff16081aae819181a" kindref="member">BasicStringRef</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>,<sp/>std::size_t<sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>)<sp/>:<sp/>data_(s),<sp/>size_(size)<sp/>{}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="431" refid="classfmt_1_1_basic_string_ref_1a5e3875071c0be193aa706d6c8e7bf29c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_string_ref_1a5e3875071c0be193aa706d6c8e7bf29c" kindref="member">BasicStringRef</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>)</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>data_(s),<sp/>size_(<ref refid="namespacestd" kindref="compound">std</ref>::char_traits&lt;Char&gt;::<ref refid="glew_8h_1a921fa83f7755f0139c84ba1831417a2e" kindref="member">length</ref>(s))<sp/>{}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="439" refid="classfmt_1_1_basic_string_ref_1afd8ffd0c6d2ccac657f277a4faea3889" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_string_ref_1afd8ffd0c6d2ccac657f277a4faea3889" kindref="member">BasicStringRef</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::basic_string&lt;Char&gt;<sp/>&amp;<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>:<sp/>data_(s.c_str()),<sp/>size_(s.<ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>())<sp/>{}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="447" refid="classfmt_1_1_basic_string_ref_1a7340f48f53cf9188e9fea5e6e1556969" refkind="member"><highlight class="normal"><sp/><sp/>std::basic_string&lt;Char&gt;<sp/><ref refid="classfmt_1_1_basic_string_ref_1a7340f48f53cf9188e9fea5e6e1556969" kindref="member">to_string</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::basic_string&lt;Char&gt;(data_,<sp/>size_);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="452" refid="classfmt_1_1_basic_string_ref_1ae9c80502c527437215fe1c11dca8b475" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*<ref refid="classfmt_1_1_basic_string_ref_1ae9c80502c527437215fe1c11dca8b475" kindref="member">data</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_;<sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="455" refid="classfmt_1_1_basic_string_ref_1ae38d9106dd5bec69488e5464aedc266a" refkind="member"><highlight class="normal"><sp/><sp/>std::size_t<sp/><ref refid="classfmt_1_1_basic_string_ref_1ae38d9106dd5bec69488e5464aedc266a" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_;<sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Lexicographically<sp/>compare<sp/>this<sp/>string<sp/>reference<sp/>to<sp/>other.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458" refid="classfmt_1_1_basic_string_ref_1a8e9a2f33780c6fe88bd80fb9da193ced" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_string_ref_1a8e9a2f33780c6fe88bd80fb9da193ced" kindref="member">compare</ref>(<ref refid="classfmt_1_1_basic_string_ref" kindref="compound">BasicStringRef</ref><sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref><sp/>=<sp/>size_<sp/>&lt;<sp/>other.<ref refid="classfmt_1_1_basic_string_ref_1af8086acf75eb6f1795f1d1c15dac094d" kindref="member">size_</ref><sp/>?<sp/>size_<sp/>:<sp/>other.<ref refid="classfmt_1_1_basic_string_ref_1af8086acf75eb6f1795f1d1c15dac094d" kindref="member">size_</ref>;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a5fb5836a37f7607602a16ad733ed6357" kindref="member">result</ref><sp/>=<sp/>std::char_traits&lt;Char&gt;::compare(data_,<sp/>other.<ref refid="classfmt_1_1_basic_string_ref_1a2c31e3eb762d751cc91d9fecbe423d89" kindref="member">data_</ref>,<sp/>size);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>size_<sp/>==<sp/>other.<ref refid="classfmt_1_1_basic_string_ref_1af8086acf75eb6f1795f1d1c15dac094d" kindref="member">size_</ref><sp/>?<sp/>0<sp/>:<sp/>(size_<sp/>&lt;<sp/>other.<ref refid="classfmt_1_1_basic_string_ref_1af8086acf75eb6f1795f1d1c15dac094d" kindref="member">size_</ref><sp/>?<sp/>-1<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a5fb5836a37f7607602a16ad733ed6357" kindref="member">result</ref>;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466" refid="classfmt_1_1_basic_string_ref_1af0c85958cdfb63d912d312c19ae81d7c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_string_ref_1af0c85958cdfb63d912d312c19ae81d7c" kindref="member">operator==</ref>(<ref refid="classfmt_1_1_basic_string_ref" kindref="compound">BasicStringRef</ref><sp/>lhs,<sp/><ref refid="classfmt_1_1_basic_string_ref" kindref="compound">BasicStringRef</ref><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.<ref refid="classfmt_1_1_basic_string_ref_1a8e9a2f33780c6fe88bd80fb9da193ced" kindref="member">compare</ref>(rhs)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="469" refid="classfmt_1_1_basic_string_ref_1a836256d721e8228d72db00235a57bc9e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_string_ref_1a836256d721e8228d72db00235a57bc9e" kindref="member">operator!=</ref>(<ref refid="classfmt_1_1_basic_string_ref" kindref="compound">BasicStringRef</ref><sp/>lhs,<sp/><ref refid="classfmt_1_1_basic_string_ref" kindref="compound">BasicStringRef</ref><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.<ref refid="classfmt_1_1_basic_string_ref_1a8e9a2f33780c6fe88bd80fb9da193ced" kindref="member">compare</ref>(rhs)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="472" refid="classfmt_1_1_basic_string_ref_1a9e8993607a0ef7c60efb860170e5ce5a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_string_ref_1a9e8993607a0ef7c60efb860170e5ce5a" kindref="member">operator&lt;</ref>(<ref refid="classfmt_1_1_basic_string_ref" kindref="compound">BasicStringRef</ref><sp/>lhs,<sp/><ref refid="classfmt_1_1_basic_string_ref" kindref="compound">BasicStringRef</ref><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.<ref refid="classfmt_1_1_basic_string_ref_1a8e9a2f33780c6fe88bd80fb9da193ced" kindref="member">compare</ref>(rhs)<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="475" refid="classfmt_1_1_basic_string_ref_1ab59af398fee6a8d5716b3e1df4576f94" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_string_ref_1ab59af398fee6a8d5716b3e1df4576f94" kindref="member">operator&lt;=</ref>(<ref refid="classfmt_1_1_basic_string_ref" kindref="compound">BasicStringRef</ref><sp/>lhs,<sp/><ref refid="classfmt_1_1_basic_string_ref" kindref="compound">BasicStringRef</ref><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.<ref refid="classfmt_1_1_basic_string_ref_1a8e9a2f33780c6fe88bd80fb9da193ced" kindref="member">compare</ref>(rhs)<sp/>&lt;=<sp/>0;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="478" refid="classfmt_1_1_basic_string_ref_1ab7e3a5a5a2dfa6fe31d90e89467cebd5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_string_ref_1ab7e3a5a5a2dfa6fe31d90e89467cebd5" kindref="member">operator&gt;</ref>(<ref refid="classfmt_1_1_basic_string_ref" kindref="compound">BasicStringRef</ref><sp/>lhs,<sp/><ref refid="classfmt_1_1_basic_string_ref" kindref="compound">BasicStringRef</ref><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.<ref refid="classfmt_1_1_basic_string_ref_1a8e9a2f33780c6fe88bd80fb9da193ced" kindref="member">compare</ref>(rhs)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="481" refid="classfmt_1_1_basic_string_ref_1ad6664b4fb7a1d73d429b41c7ae9de98e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_string_ref_1ad6664b4fb7a1d73d429b41c7ae9de98e" kindref="member">operator&gt;=</ref>(<ref refid="classfmt_1_1_basic_string_ref" kindref="compound">BasicStringRef</ref><sp/>lhs,<sp/><ref refid="classfmt_1_1_basic_string_ref" kindref="compound">BasicStringRef</ref><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.<ref refid="classfmt_1_1_basic_string_ref_1a8e9a2f33780c6fe88bd80fb9da193ced" kindref="member">compare</ref>(rhs)<sp/>&gt;=<sp/>0;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal">};</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486" refid="namespacefmt_1ae5ed3b29f911650a12b4de3d14126c31" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_string_ref" kindref="compound">BasicStringRef&lt;char&gt;</ref><sp/><ref refid="namespacefmt_1ae5ed3b29f911650a12b4de3d14126c31" kindref="member">StringRef</ref>;</highlight></codeline>
<codeline lineno="487" refid="namespacefmt_1a88f11ca64ac292c1e2df229ced839312" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_string_ref" kindref="compound">BasicStringRef&lt;wchar_t&gt;</ref><sp/><ref refid="namespacefmt_1a88f11ca64ac292c1e2df229ced839312" kindref="member">WStringRef</ref>;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="515" refid="classfmt_1_1_basic_c_string_ref" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">BasicCStringRef</ref><sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="517" refid="classfmt_1_1_basic_c_string_ref_1a7926c8fdd384de20ae68ef1ce8d53e8f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*<ref refid="classfmt_1_1_basic_c_string_ref_1a7926c8fdd384de20ae68ef1ce8d53e8f" kindref="member">data_</ref>;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="521" refid="classfmt_1_1_basic_c_string_ref_1ad79244507bdc1213e0dc6c505cf265f2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_c_string_ref_1ad79244507bdc1213e0dc6c505cf265f2" kindref="member">BasicCStringRef</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>)<sp/>:<sp/>data_(s)<sp/>{}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="528" refid="classfmt_1_1_basic_c_string_ref_1ab460855d19c769773de532296f9f13f9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_c_string_ref_1ab460855d19c769773de532296f9f13f9" kindref="member">BasicCStringRef</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::basic_string&lt;Char&gt;<sp/>&amp;<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>)<sp/>:<sp/>data_(s.c_str())<sp/>{}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="531" refid="classfmt_1_1_basic_c_string_ref_1ae3bafa845b53339b20c4f5edb4f635f9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*<ref refid="classfmt_1_1_basic_c_string_ref_1ae3bafa845b53339b20c4f5edb4f635f9" kindref="member">c_str</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_;<sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal">};</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534" refid="namespacefmt_1af41028915a2e1f7b8af462c067163aa7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">BasicCStringRef&lt;char&gt;</ref><sp/><ref refid="namespacefmt_1af41028915a2e1f7b8af462c067163aa7" kindref="member">CStringRef</ref>;</highlight></codeline>
<codeline lineno="535" refid="namespacefmt_1ae76542a1eda3b54264fdca97c4506a4d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">BasicCStringRef&lt;wchar_t&gt;</ref><sp/><ref refid="namespacefmt_1ae76542a1eda3b54264fdca97c4506a4d" kindref="member">WCStringRef</ref>;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="538" refid="classfmt_1_1_format_error" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::runtime_error<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="540" refid="classfmt_1_1_format_error_1adceda84540093a114256a7159b30bf5e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_format_error_1adceda84540093a114256a7159b30bf5e" kindref="member">FormatError</ref>(CStringRef<sp/><ref refid="glew_8h_1a7b6161cffb9b8aee272b3b916183d28c" kindref="member">message</ref>)</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="namespacestd" kindref="compound">std</ref>::runtime_error(message.c_str())<sp/>{}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>~<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>()<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="543"><highlight class="normal">};</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceinternal" kindref="compound">internal</ref><sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MakeUnsigned&lt;T&gt;::Type<sp/>gives<sp/>an<sp/>unsigned<sp/>type<sp/>corresponding<sp/>to<sp/>integer<sp/>type<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="549" refid="structfmt_1_1internal_1_1_make_unsigned_1a57cbf18702f14a837ba104412394bfba" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_make_unsigned" kindref="compound">MakeUnsigned</ref><sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/><ref refid="structfmt_1_1internal_1_1_make_unsigned_1a57cbf18702f14a837ba104412394bfba" kindref="member">Type</ref>;<sp/>};</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551" refid="format_8h_1ac85df894213837005d52db89fff91ea3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_SPECIALIZE_MAKE_UNSIGNED(T,<sp/>U)<sp/>\</highlight></codeline>
<codeline lineno="552"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;&gt;<sp/>\</highlight></codeline>
<codeline lineno="553"><highlight class="preprocessor"><sp/><sp/>struct<sp/>MakeUnsigned&lt;T&gt;<sp/>{<sp/>typedef<sp/>U<sp/>Type;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><ref refid="namespacefmt_1_1internal_1a0cd2008b4f4761eb023390d46277603c" kindref="member">FMT_SPECIALIZE_MAKE_UNSIGNED</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><ref refid="namespacefmt_1_1internal_1a0cd2008b4f4761eb023390d46277603c" kindref="member">FMT_SPECIALIZE_MAKE_UNSIGNED</ref>(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><ref refid="namespacefmt_1_1internal_1a0cd2008b4f4761eb023390d46277603c" kindref="member">FMT_SPECIALIZE_MAKE_UNSIGNED</ref>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><ref refid="namespacefmt_1_1internal_1a0cd2008b4f4761eb023390d46277603c" kindref="member">FMT_SPECIALIZE_MAKE_UNSIGNED</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><ref refid="namespacefmt_1_1internal_1a0cd2008b4f4761eb023390d46277603c" kindref="member">FMT_SPECIALIZE_MAKE_UNSIGNED</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><ref refid="namespacefmt_1_1internal_1a0cd2008b4f4761eb023390d46277603c" kindref="member">FMT_SPECIALIZE_MAKE_UNSIGNED</ref>(LongLong,<sp/>ULongLong);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Casts<sp/>nonnegative<sp/>integer<sp/>to<sp/>unsigned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Int&gt;</highlight></codeline>
<codeline lineno="564" refid="namespacefmt_1_1internal_1a28bed1291226be35437bc3173c19c205" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_make_unsigned_1a57cbf18702f14a837ba104412394bfba" kindref="member">MakeUnsigned&lt;Int&gt;::Type</ref><sp/><ref refid="namespacefmt_1_1internal_1a28bed1291226be35437bc3173c19c205" kindref="member">to_unsigned</ref>(Int<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a03e7ee720f43adc7d83c652a6a5dd5f8" kindref="member">FMT_ASSERT</ref>(value<sp/>&gt;=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;negative<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">typename<sp/><ref refid="structfmt_1_1internal_1_1_make_unsigned_1a57cbf18702f14a837ba104412394bfba" kindref="member">MakeUnsigned&lt;Int&gt;::Type</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>number<sp/>of<sp/>characters<sp/>to<sp/>store<sp/>in<sp/>the<sp/>MemoryBuffer<sp/>object<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>avoid<sp/>dynamic<sp/>memory<sp/>allocation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571" refid="namespacefmt_1_1internal_1a855d655a8b82a933597acb9eee31b1a3abf58574b3f45959f076968509372a2fa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/><ref refid="namespacefmt_1_1internal_1a855d655a8b82a933597acb9eee31b1a3abf58574b3f45959f076968509372a2fa" kindref="member">INLINE_BUFFER_SIZE</ref><sp/>=<sp/>500<sp/>};</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_SECURE_SCL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>checked<sp/>iterator<sp/>to<sp/>avoid<sp/>warnings<sp/>on<sp/>MSVC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>stdext::checked_array_iterator&lt;T*&gt;<sp/><ref refid="namespacefmt_1_1internal_1ab81ed2356d1a6f3bcf03c5bdf5f8d4f2" kindref="member">make_ptr</ref>(T<sp/>*ptr,<sp/>std::size_t<sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stdext::checked_array_iterator&lt;T*&gt;(ptr,<sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="581" refid="namespacefmt_1_1internal_1ab81ed2356d1a6f3bcf03c5bdf5f8d4f2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/>*<ref refid="namespacefmt_1_1internal_1ab81ed2356d1a6f3bcf03c5bdf5f8d4f2" kindref="member">make_ptr</ref>(T<sp/>*ptr,<sp/>std::size_t)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;<sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="591" refid="classfmt_1_1_buffer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1_buffer" kindref="compound">Buffer</ref><sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1acc0b3b39544c7a0930ae1567d952a8d4" kindref="member">FMT_DISALLOW_COPY_AND_ASSIGN</ref>(<ref refid="classfmt_1_1_buffer" kindref="compound">Buffer</ref>);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="596" refid="classfmt_1_1_buffer_1a17b11ccf916407fdb464b53b3e556849" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/>*<ref refid="classfmt_1_1_buffer_1a17b11ccf916407fdb464b53b3e556849" kindref="member">ptr_</ref>;</highlight></codeline>
<codeline lineno="597" refid="classfmt_1_1_buffer_1a3959d66180b075a0ae324ea98466e20f" refkind="member"><highlight class="normal"><sp/><sp/>std::size_t<sp/><ref refid="classfmt_1_1_buffer_1a3959d66180b075a0ae324ea98466e20f" kindref="member">size_</ref>;</highlight></codeline>
<codeline lineno="598" refid="classfmt_1_1_buffer_1ab9c3e293679699058a2d33c4a07ad657" refkind="member"><highlight class="normal"><sp/><sp/>std::size_t<sp/><ref refid="classfmt_1_1_buffer_1ab9c3e293679699058a2d33c4a07ad657" kindref="member">capacity_</ref>;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600" refid="classfmt_1_1_buffer_1a1830c1ba88170ed60f40f662d7f1886a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_buffer_1a1830c1ba88170ed60f40f662d7f1886a" kindref="member">Buffer</ref>(T<sp/>*ptr<sp/>=<sp/>0,<sp/>std::size_t<sp/>capacity<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>ptr_(ptr),<sp/>size_(0),<sp/>capacity_(capacity)<sp/>{}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>grow(std::size_t<sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="612" refid="classfmt_1_1_buffer_1a5005962059399cc759674da5fd9b3817" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_buffer_1a5005962059399cc759674da5fd9b3817" kindref="member">~Buffer</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="615" refid="classfmt_1_1_buffer_1a14fa72f0ddf584c14ffffb1446f598aa" refkind="member"><highlight class="normal"><sp/><sp/>std::size_t<sp/><ref refid="classfmt_1_1_buffer_1a14fa72f0ddf584c14ffffb1446f598aa" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_;<sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="618" refid="classfmt_1_1_buffer_1aaf54fe786de91157629f96380e0cb215" refkind="member"><highlight class="normal"><sp/><sp/>std::size_t<sp/><ref refid="classfmt_1_1_buffer_1aaf54fe786de91157629f96380e0cb215" kindref="member">capacity</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>capacity_;<sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="623" refid="classfmt_1_1_buffer_1a20f893164dc20e8ea8c77810d4ea8d59" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_buffer_1a20f893164dc20e8ea8c77810d4ea8d59" kindref="member">resize</ref>(std::size_t<sp/>new_size)<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_size<sp/>&gt;<sp/>capacity_)</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>grow(new_size);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>size_<sp/>=<sp/>new_size;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="634" refid="classfmt_1_1_buffer_1a7f46a3ce8d86abe35904f6654bd4ea1e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_buffer_1a7f46a3ce8d86abe35904f6654bd4ea1e" kindref="member">reserve</ref>(std::size_t<sp/>capacity)<sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(capacity<sp/>&gt;<sp/>capacity_)</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>grow(capacity);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639" refid="classfmt_1_1_buffer_1a4591d21c7970ba5205680cb5224ef2b2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_buffer_1a4591d21c7970ba5205680cb5224ef2b2" kindref="member">clear</ref>()<sp/><ref refid="format_8h_1aef128913e8400683b1cbd1a3a2e11df3" kindref="member">FMT_NOEXCEPT</ref><sp/>{<sp/>size_<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641" refid="classfmt_1_1_buffer_1a4056b71637286b41b3275e3dac57462d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_buffer_1a4056b71637286b41b3275e3dac57462d" kindref="member">push_back</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size_<sp/>==<sp/>capacity_)</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>grow(size_<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr_[size_++]<sp/>=<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>append(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U<sp/>*begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U<sp/>*<ref refid="glew_8h_1a432111147038972f06e049e18a837002" kindref="member">end</ref>);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651" refid="classfmt_1_1_buffer_1ad1f9ad75ba08826671a78df23161685a" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/>&amp;<ref refid="classfmt_1_1_buffer_1ad1f9ad75ba08826671a78df23161685a" kindref="member">operator[]</ref>(std::size_t<sp/><ref refid="glew_8h_1a57f14e05b1900f16a2da82ade47d0c6d" kindref="member">index</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr_[<ref refid="glew_8h_1a57f14e05b1900f16a2da82ade47d0c6d" kindref="member">index</ref>];<sp/>}</highlight></codeline>
<codeline lineno="652" refid="classfmt_1_1_buffer_1a15dd7f9027d6c9fb0fe4b6255c9a7929" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;<ref refid="classfmt_1_1_buffer_1a15dd7f9027d6c9fb0fe4b6255c9a7929" kindref="member">operator[]</ref>(std::size_t<sp/><ref refid="glew_8h_1a57f14e05b1900f16a2da82ade47d0c6d" kindref="member">index</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr_[<ref refid="glew_8h_1a57f14e05b1900f16a2da82ade47d0c6d" kindref="member">index</ref>];<sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal">};</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="657" refid="classfmt_1_1_buffer_1a7ca155741c43ec7c7edcea8dd28a2123" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_buffer_1a7ca155741c43ec7c7edcea8dd28a2123" kindref="member">Buffer&lt;T&gt;::append</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U<sp/>*begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U<sp/>*<ref refid="glew_8h_1a432111147038972f06e049e18a837002" kindref="member">end</ref>)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>std::size_t<sp/>new_size<sp/>=<sp/>size_<sp/>+<sp/><ref refid="namespacefmt_1_1internal_1a28bed1291226be35437bc3173c19c205" kindref="member">internal::to_unsigned</ref>(end<sp/>-<sp/>begin);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_size<sp/>&gt;<sp/>capacity_)</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>grow(new_size);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>std::uninitialized_copy(begin,<sp/>end,</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1ab81ed2356d1a6f3bcf03c5bdf5f8d4f2" kindref="member">internal::make_ptr</ref>(ptr_,<sp/>capacity_)<sp/>+<sp/>size_);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>size_<sp/>=<sp/>new_size;</highlight></codeline>
<codeline lineno="664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceinternal" kindref="compound">internal</ref><sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>memory<sp/>buffer<sp/>for<sp/>trivially<sp/>copyable/constructible<sp/>types<sp/>with<sp/>the<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SIZE<sp/>elements<sp/>stored<sp/>in<sp/>the<sp/>object<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SIZE,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Allocator<sp/>=<sp/>std::allocator&lt;T&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="671" refid="classfmt_1_1internal_1_1_memory_buffer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1internal_1_1_memory_buffer" kindref="compound">MemoryBuffer</ref><sp/>:<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Allocator,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_buffer" kindref="compound">Buffer</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="673" refid="classfmt_1_1internal_1_1_memory_buffer_1ae6bad20d7b466cd64b881229482459d6" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/>data_[SIZE];</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Deallocate<sp/>memory<sp/>allocated<sp/>by<sp/>the<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676" refid="classfmt_1_1internal_1_1_memory_buffer_1a180ffbdcc3fc323c6bda963cd955a77e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_memory_buffer_1a180ffbdcc3fc323c6bda963cd955a77e" kindref="member">deallocate</ref>()<sp/>{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;ptr_<sp/>!=<sp/>data_)<sp/>Allocator::deallocate(this-&gt;ptr_,<sp/>this-&gt;capacity_);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>grow(std::size_t<sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="684" refid="classfmt_1_1internal_1_1_memory_buffer_1af3325b8e955a9c84a51c31570bcab893" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_memory_buffer_1af3325b8e955a9c84a51c31570bcab893" kindref="member">MemoryBuffer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Allocator<sp/>&amp;alloc<sp/>=<sp/>Allocator())</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Allocator(alloc),<sp/><ref refid="classfmt_1_1_buffer" kindref="compound">Buffer</ref>&lt;T&gt;(data_,<sp/>SIZE)<sp/>{}</highlight></codeline>
<codeline lineno="686" refid="classfmt_1_1internal_1_1_memory_buffer_1a9d9995949a1aa1011085d3f117001572" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_memory_buffer_1a9d9995949a1aa1011085d3f117001572" kindref="member">~MemoryBuffer</ref>()<sp/>{<sp/>deallocate();<sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_RVALUE_REFERENCES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>data<sp/>from<sp/>other<sp/>to<sp/>this<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1a37ba44826afa04fddf20fd70c45ac3b4" kindref="member">move</ref>(<ref refid="classfmt_1_1internal_1_1_memory_buffer" kindref="compound">MemoryBuffer</ref><sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>Allocator<sp/>&amp;this_alloc<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;other_alloc<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>this_alloc<sp/>=<sp/><ref refid="namespacestd_1a37ba44826afa04fddf20fd70c45ac3b4" kindref="member">std::move</ref>(other_alloc);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;size_<sp/>=<sp/>other.<ref refid="classfmt_1_1_buffer_1a3959d66180b075a0ae324ea98466e20f" kindref="member">size_</ref>;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;capacity_<sp/>=<sp/>other.<ref refid="classfmt_1_1_buffer_1ab9c3e293679699058a2d33c4a07ad657" kindref="member">capacity_</ref>;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.<ref refid="classfmt_1_1_buffer_1a17b11ccf916407fdb464b53b3e556849" kindref="member">ptr_</ref><sp/>==<sp/>other.<ref refid="classfmt_1_1internal_1_1_memory_buffer_1ae6bad20d7b466cd64b881229482459d6" kindref="member">data_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;ptr_<sp/>=<sp/>data_;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_copy(other.<ref refid="classfmt_1_1internal_1_1_memory_buffer_1ae6bad20d7b466cd64b881229482459d6" kindref="member">data_</ref>,<sp/>other.<ref refid="classfmt_1_1internal_1_1_memory_buffer_1ae6bad20d7b466cd64b881229482459d6" kindref="member">data_</ref><sp/>+<sp/>this-&gt;size_,</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1ab81ed2356d1a6f3bcf03c5bdf5f8d4f2" kindref="member">make_ptr</ref>(data_,<sp/>this-&gt;capacity_));</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;ptr_<sp/>=<sp/>other.<ref refid="classfmt_1_1_buffer_1a17b11ccf916407fdb464b53b3e556849" kindref="member">ptr_</ref>;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>pointer<sp/>to<sp/>the<sp/>inline<sp/>array<sp/>so<sp/>that<sp/>delete<sp/>is<sp/>not<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>deallocating.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>other.<ref refid="classfmt_1_1_buffer_1a17b11ccf916407fdb464b53b3e556849" kindref="member">ptr_</ref><sp/>=<sp/>other.<ref refid="classfmt_1_1internal_1_1_memory_buffer_1ae6bad20d7b466cd64b881229482459d6" kindref="member">data_</ref>;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><ref refid="memorybuffer_8h_1aad74f4c6994a951097a63ee117039085" kindref="member">MemoryBuffer</ref>(<ref refid="classfmt_1_1internal_1_1_memory_buffer" kindref="compound">MemoryBuffer</ref><sp/>&amp;&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacestd_1a37ba44826afa04fddf20fd70c45ac3b4" kindref="member">move</ref>(other);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_memory_buffer" kindref="compound">MemoryBuffer</ref><sp/>&amp;operator=(<ref refid="classfmt_1_1internal_1_1_memory_buffer" kindref="compound">MemoryBuffer</ref><sp/>&amp;&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;other);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>deallocate();</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacestd_1a37ba44826afa04fddf20fd70c45ac3b4" kindref="member">move</ref>(other);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>allocator<sp/>associated<sp/>with<sp/>this<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722" refid="classfmt_1_1internal_1_1_memory_buffer_1a6cf259337ce910f8864512d664daf66f" refkind="member"><highlight class="normal"><sp/><sp/>Allocator<sp/><ref refid="classfmt_1_1internal_1_1_memory_buffer_1a6cf259337ce910f8864512d664daf66f" kindref="member">get_allocator</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="723"><highlight class="normal">};</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SIZE,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Allocator&gt;</highlight></codeline>
<codeline lineno="726" refid="classfmt_1_1internal_1_1_memory_buffer_1a7f7ca74572d97e0d0345d112d85d44a4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_memory_buffer_1a7f7ca74572d97e0d0345d112d85d44a4" kindref="member">MemoryBuffer&lt;T, SIZE, Allocator&gt;::grow</ref>(std::size_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>std::size_t<sp/>new_capacity<sp/>=<sp/>this-&gt;capacity_<sp/>+<sp/>this-&gt;capacity_<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;<sp/>new_capacity)</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>new_capacity<sp/>=<sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>T<sp/>*new_ptr<sp/>=<sp/>this-&gt;allocate(new_capacity);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>code<sp/>doesn&apos;t<sp/>throw,<sp/>so<sp/>the<sp/>raw<sp/>pointer<sp/>above<sp/>doesn&apos;t<sp/>leak.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>std::uninitialized_copy(this-&gt;ptr_,<sp/>this-&gt;ptr_<sp/>+<sp/>this-&gt;size_,</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1ab81ed2356d1a6f3bcf03c5bdf5f8d4f2" kindref="member">make_ptr</ref>(new_ptr,<sp/>new_capacity));</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>std::size_t<sp/>old_capacity<sp/>=<sp/>this-&gt;capacity_;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>T<sp/>*old_ptr<sp/>=<sp/>this-&gt;ptr_;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>this-&gt;capacity_<sp/>=<sp/>new_capacity;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>this-&gt;ptr_<sp/>=<sp/>new_ptr;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>deallocate<sp/>may<sp/>throw<sp/>(at<sp/>least<sp/>in<sp/>principle),<sp/>but<sp/>it<sp/>doesn&apos;t<sp/>matter<sp/>since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>buffer<sp/>already<sp/>uses<sp/>the<sp/>new<sp/>storage<sp/>and<sp/>will<sp/>deallocate<sp/>it<sp/>in<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(old_ptr<sp/>!=<sp/>data_)</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>Allocator::deallocate(old_ptr,<sp/>old_capacity);</highlight></codeline>
<codeline lineno="743"><highlight class="normal">}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>fixed-size<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="747" refid="classfmt_1_1internal_1_1_fixed_buffer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1internal_1_1_fixed_buffer" kindref="compound">FixedBuffer</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_buffer" kindref="compound">fmt::Buffer</ref>&lt;Char&gt;<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="749" refid="classfmt_1_1internal_1_1_fixed_buffer_1a33c430838198b38592c7e9f4f6fd62d8" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_fixed_buffer_1a33c430838198b38592c7e9f4f6fd62d8" kindref="member">FixedBuffer</ref>(Char<sp/>*<ref refid="glew_8h_1a52f38e7d822a46377fde7a02708eedb1" kindref="member">array</ref>,<sp/>std::size_t<sp/>size)<sp/>:<sp/><ref refid="namespacefmt" kindref="compound">fmt</ref>::<ref refid="classfmt_1_1_buffer" kindref="compound">Buffer</ref>&lt;Char&gt;(array,<sp/>size)<sp/>{}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a9a4960b70582ed2620911a0b75dce0b5" kindref="member">FMT_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>grow(std::size_t<sp/>size);</highlight></codeline>
<codeline lineno="753"><highlight class="normal">};</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="756" refid="classfmt_1_1internal_1_1_basic_char_traits" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1internal_1_1_basic_char_traits" kindref="compound">BasicCharTraits</ref><sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_SECURE_SCL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>stdext::checked_array_iterator&lt;Char*&gt;<sp/><ref refid="classfmt_1_1internal_1_1_basic_char_traits_1a32f5cad709328e0450b8690960d6b8b5" kindref="member">CharPtr</ref>;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761" refid="classfmt_1_1internal_1_1_basic_char_traits_1a32f5cad709328e0450b8690960d6b8b5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Char<sp/>*<ref refid="classfmt_1_1internal_1_1_basic_char_traits_1a32f5cad709328e0450b8690960d6b8b5" kindref="member">CharPtr</ref>;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763" refid="classfmt_1_1internal_1_1_basic_char_traits_1a5ec7e07adb183b9bf1e63a7507382ec6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Char<sp/><ref refid="classfmt_1_1internal_1_1_basic_char_traits_1a5ec7e07adb183b9bf1e63a7507382ec6" kindref="member">cast</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);<sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal">};</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="767" refid="classfmt_1_1internal_1_1_char_traits" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1internal_1_1_char_traits" kindref="compound">CharTraits</ref>;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="770" refid="classfmt_1_1internal_1_1_char_traits_3_01char_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1internal_1_1_char_traits" kindref="compound">CharTraits</ref>&lt;char&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_basic_char_traits" kindref="compound">BasicCharTraits</ref>&lt;char&gt;<sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Conversion<sp/>from<sp/>wchar_t<sp/>to<sp/>char<sp/>is<sp/>not<sp/>allowed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1aedce4aeaa89239024c67c7682cff3370" kindref="member">convert</ref>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="776" refid="classfmt_1_1internal_1_1_char_traits_3_01char_01_4_1a4503977c29c6347f94b829728c42997c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_char_traits_3_01char_01_4_1a4503977c29c6347f94b829728c42997c" kindref="member">convert</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>;<sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Formats<sp/>a<sp/>floating-point<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a9a4960b70582ed2620911a0b75dce0b5" kindref="member">FMT_API</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>format_float(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="glew_8h_1a6c0f527f003707dfaca177b40f406ed9" kindref="member">buffer</ref>,<sp/>std::size_t<sp/>size,</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="glew_8h_1a1e3b09934060e9d373139c3557730d37" kindref="member">format</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1aa105b18f96e6bc2485cb7f576a7fb9ba" kindref="member">width</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1ae6165268264b393d031f89082216499d" kindref="member">precision</ref>,<sp/>T<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="782"><highlight class="normal">};</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="785" refid="classfmt_1_1internal_1_1_char_traits_3_01wchar__t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1internal_1_1_char_traits" kindref="compound">CharTraits</ref>&lt;wchar_t&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_basic_char_traits" kindref="compound">BasicCharTraits</ref>&lt;wchar_t&gt;<sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="787" refid="classfmt_1_1internal_1_1_char_traits_3_01wchar__t_01_4_1aca94c09c993fa75d2a518d519f6fc177" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_char_traits_3_01wchar__t_01_4_1aca94c09c993fa75d2a518d519f6fc177" kindref="member">convert</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>;<sp/>}</highlight></codeline>
<codeline lineno="788" refid="classfmt_1_1internal_1_1_char_traits_3_01wchar__t_01_4_1adbfb38618bd648c3fb4220071d433093" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_char_traits_3_01wchar__t_01_4_1adbfb38618bd648c3fb4220071d433093" kindref="member">convert</ref>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>;<sp/>}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a9a4960b70582ed2620911a0b75dce0b5" kindref="member">FMT_API</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>format_float(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*<ref refid="glew_8h_1a6c0f527f003707dfaca177b40f406ed9" kindref="member">buffer</ref>,<sp/>std::size_t<sp/>size,</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*<ref refid="glew_8h_1a1e3b09934060e9d373139c3557730d37" kindref="member">format</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1aa105b18f96e6bc2485cb7f576a7fb9ba" kindref="member">width</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1ae6165268264b393d031f89082216499d" kindref="member">precision</ref>,<sp/>T<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="793"><highlight class="normal">};</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Checks<sp/>if<sp/>a<sp/>number<sp/>is<sp/>negative<sp/>-<sp/>used<sp/>to<sp/>avoid<sp/>warnings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsSigned&gt;</highlight></codeline>
<codeline lineno="797" refid="structfmt_1_1internal_1_1_sign_checker" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_sign_checker" kindref="compound">SignChecker</ref><sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="799" refid="structfmt_1_1internal_1_1_sign_checker_1ae60ea5795026fd1d83b34ec79d145baf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_sign_checker_1ae60ea5795026fd1d83b34ec79d145baf" kindref="member">is_negative</ref>(T<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>&lt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal">};</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="803" refid="structfmt_1_1internal_1_1_sign_checker_3_01false_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_sign_checker" kindref="compound">SignChecker</ref>&lt;false&gt;<sp/>{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="805" refid="structfmt_1_1internal_1_1_sign_checker_3_01false_01_4_1a3d5a1c205e3f44b829046f65b131a3d8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_sign_checker_3_01false_01_4_1a3d5a1c205e3f44b829046f65b131a3d8" kindref="member">is_negative</ref>(T)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="806"><highlight class="normal">};</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>value<sp/>is<sp/>negative,<sp/>false<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Same<sp/>as<sp/>(value<sp/>&lt;<sp/>0)<sp/>but<sp/>doesn&apos;t<sp/>produce<sp/>warnings<sp/>if<sp/>T<sp/>is<sp/>an<sp/>unsigned<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="811" refid="namespacefmt_1_1internal_1a310d44c09812f7990e50800808c04673" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1a310d44c09812f7990e50800808c04673" kindref="member">is_negative</ref>(T<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_sign_checker" kindref="compound">SignChecker&lt;std::numeric_limits&lt;T&gt;::is_signed</ref>&gt;<ref refid="namespacefmt_1_1internal_1a310d44c09812f7990e50800808c04673" kindref="member">::is_negative</ref>(value);</highlight></codeline>
<codeline lineno="813"><highlight class="normal">}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Selects<sp/>uint32_t<sp/>if<sp/>FitsIn32Bits<sp/>is<sp/>true,<sp/>uint64_t<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FitsIn32Bits&gt;</highlight></codeline>
<codeline lineno="817" refid="structfmt_1_1internal_1_1_type_selector_1aa2a4ce5a506b026fa2eadce9c14b8841" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_type_selector" kindref="compound">TypeSelector</ref><sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/><ref refid="structfmt_1_1internal_1_1_type_selector_1aa2a4ce5a506b026fa2eadce9c14b8841" kindref="member">Type</ref>;<sp/>};</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="820" refid="structfmt_1_1internal_1_1_type_selector_3_01false_01_4_1af959045b66d5539844a829910e1bd13e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_type_selector" kindref="compound">TypeSelector</ref>&lt;false&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="structfmt_1_1internal_1_1_type_selector_3_01false_01_4_1af959045b66d5539844a829910e1bd13e" kindref="member">Type</ref>;<sp/>};</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="823" refid="structfmt_1_1internal_1_1_int_traits" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_int_traits" kindref="compound">IntTraits</ref><sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Smallest<sp/>of<sp/>uint32_t<sp/>and<sp/>uint64_t<sp/>that<sp/>is<sp/>large<sp/>enough<sp/>to<sp/>represent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>values<sp/>of<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfmt_1_1internal_1_1_type_selector" kindref="compound">TypeSelector&lt;std::numeric_limits&lt;T&gt;::digits</ref><sp/>&lt;=<sp/>32&gt;<ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">::Type</ref><sp/>MainType;</highlight></codeline>
<codeline lineno="828"><highlight class="normal">};</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><ref refid="format_8h_1a9a4960b70582ed2620911a0b75dce0b5" kindref="member">FMT_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1a92bdabe812efd23c6f9686ddd6a7805f" kindref="member">report_unknown_type</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="glew_8h_1a8d78e2e8a676abd547a596dd84811285" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Static<sp/>data<sp/>is<sp/>placed<sp/>in<sp/>this<sp/>class<sp/>template<sp/>to<sp/>allow<sp/>header-only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="comment">//<sp/>configuration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="835" refid="structfmt_1_1internal_1_1_basic_data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="format_8h_1a9a4960b70582ed2620911a0b75dce0b5" kindref="member">FMT_API</ref><sp/><ref refid="structfmt_1_1internal_1_1_basic_data" kindref="compound">BasicData</ref><sp/>{</highlight></codeline>
<codeline lineno="836" refid="structfmt_1_1internal_1_1_basic_data_1abbc4c0076211263be3f19cce9655caf7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>POWERS_OF_10_32[];</highlight></codeline>
<codeline lineno="837" refid="structfmt_1_1internal_1_1_basic_data_1a5f4f238cffad6816fbdc621e96b0e1d2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>POWERS_OF_10_64[];</highlight></codeline>
<codeline lineno="838" refid="structfmt_1_1internal_1_1_basic_data_1abc0f1b67b25a98d0aa1f2b25c8649e59" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>DIGITS[];</highlight></codeline>
<codeline lineno="839"><highlight class="normal">};</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_USE_EXTERN_TEMPLATES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Clang<sp/>doesn&apos;t<sp/>have<sp/>a<sp/>feature<sp/>check<sp/>for<sp/>extern<sp/>templates<sp/>so<sp/>we<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>variadic<sp/>templates<sp/>which<sp/>were<sp/>introduced<sp/>in<sp/>the<sp/>same<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844" refid="format_8h_1a3ae8cc1f3fba8eb2083d6a34aa73b5e1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_USE_EXTERN_TEMPLATES<sp/>(__clang__<sp/>&amp;&amp;<sp/>FMT_USE_VARIADIC_TEMPLATES)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_EXTERN_TEMPLATES<sp/>&amp;&amp;<sp/>!defined(FMT_HEADER_ONLY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_basic_data" kindref="compound">BasicData&lt;void&gt;</ref>;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851" refid="namespacefmt_1_1internal_1af3cbbbf91dffe18b4cad1116aa088c65" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_basic_data" kindref="compound">BasicData&lt;&gt;</ref><sp/><ref refid="namespacefmt_1_1internal_1af3cbbbf91dffe18b4cad1116aa088c65" kindref="member">Data</ref>;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FMT_BUILTIN_CLZLL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>decimal<sp/>digits<sp/>in<sp/>n.<sp/>Leading<sp/>zeros<sp/>are<sp/>not<sp/>counted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="comment">//<sp/>except<sp/>for<sp/>n<sp/>==<sp/>0<sp/>in<sp/>which<sp/>case<sp/>count_digits<sp/>returns<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1abfe52e52001fd2590fb2015cefe95e18" kindref="member">count_digits</ref>(<ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Based<sp/>on<sp/>http://graphics.stanford.edu/~seander/bithacks.html#IntegerLog10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>benchmark<sp/>https://github.com/localvoid/cxx-benchmark-count-digits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1ade5636ea600ca40c1f2c8cd08c1dcd3e" kindref="member">t</ref><sp/>=<sp/>(64<sp/>-<sp/>FMT_BUILTIN_CLZLL(n<sp/>|<sp/>1))<sp/>*<sp/>1233<sp/>&gt;&gt;<sp/>12;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1a28bed1291226be35437bc3173c19c205" kindref="member">to_unsigned</ref>(t)<sp/>-<sp/>(n<sp/>&lt;<sp/><ref refid="structfmt_1_1internal_1_1_basic_data_1a5f4f238cffad6816fbdc621e96b0e1d2" kindref="member">Data::POWERS_OF_10_64</ref>[<ref refid="glew_8h_1ade5636ea600ca40c1f2c8cd08c1dcd3e" kindref="member">t</ref>])<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Fallback<sp/>version<sp/>of<sp/>count_digits<sp/>used<sp/>when<sp/>__builtin_clz<sp/>is<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864" refid="namespacefmt_1_1internal_1abfe52e52001fd2590fb2015cefe95e18" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1abfe52e52001fd2590fb2015cefe95e18" kindref="member">count_digits</ref>(<ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a10b284d589000663becfbc6867a3a9f7" kindref="member">count</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Integer<sp/>division<sp/>is<sp/>slow<sp/>so<sp/>do<sp/>it<sp/>for<sp/>a<sp/>group<sp/>of<sp/>four<sp/>digits<sp/>instead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>for<sp/>every<sp/>digit.<sp/>The<sp/>idea<sp/>comes<sp/>from<sp/>the<sp/>talk<sp/>by<sp/>Alexandrescu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Three<sp/>Optimization<sp/>Tips<sp/>for<sp/>C++&quot;.<sp/>See<sp/>speed-test<sp/>for<sp/>a<sp/>comparison.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>10)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a10b284d589000663becfbc6867a3a9f7" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>100)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>1000)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>10000)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>/=<sp/>10000u;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FMT_BUILTIN_CLZ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Optional<sp/>version<sp/>of<sp/>count_digits<sp/>for<sp/>better<sp/>performance<sp/>on<sp/>32-bit<sp/>platforms.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1abfe52e52001fd2590fb2015cefe95e18" kindref="member">count_digits</ref>(<ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/><ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1ade5636ea600ca40c1f2c8cd08c1dcd3e" kindref="member">t</ref><sp/>=<sp/>(32<sp/>-<sp/>FMT_BUILTIN_CLZ(n<sp/>|<sp/>1))<sp/>*<sp/>1233<sp/>&gt;&gt;<sp/>12;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1a28bed1291226be35437bc3173c19c205" kindref="member">to_unsigned</ref>(t)<sp/>-<sp/>(n<sp/>&lt;<sp/><ref refid="structfmt_1_1internal_1_1_basic_data_1abbc4c0076211263be3f19cce9655caf7" kindref="member">Data::POWERS_OF_10_32</ref>[<ref refid="glew_8h_1ade5636ea600ca40c1f2c8cd08c1dcd3e" kindref="member">t</ref>])<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="885"><highlight class="normal">}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>functor<sp/>that<sp/>doesn&apos;t<sp/>add<sp/>a<sp/>thousands<sp/>separator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889" refid="structfmt_1_1internal_1_1_no_thousands_sep" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_no_thousands_sep" kindref="compound">NoThousandsSep</ref><sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="891" refid="structfmt_1_1internal_1_1_no_thousands_sep_1ab253f8385a85334b2fd9b0bfb551a6a6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_no_thousands_sep_1ab253f8385a85334b2fd9b0bfb551a6a6" kindref="member">operator()</ref>(Char<sp/>*)<sp/>{}</highlight></codeline>
<codeline lineno="892"><highlight class="normal">};</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>functor<sp/>that<sp/>adds<sp/>a<sp/>thousands<sp/>separator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895" refid="classfmt_1_1internal_1_1_thousands_sep" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1internal_1_1_thousands_sep" kindref="compound">ThousandsSep</ref><sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="897" refid="classfmt_1_1internal_1_1_thousands_sep_1a192f9510ae5174337e95df5b2beddd05" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_string_ref" kindref="compound">fmt::StringRef</ref><sp/><ref refid="classfmt_1_1internal_1_1_thousands_sep_1a192f9510ae5174337e95df5b2beddd05" kindref="member">sep_</ref>;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Index<sp/>of<sp/>a<sp/>decimal<sp/>digit<sp/>with<sp/>the<sp/>least<sp/>significant<sp/>digit<sp/>having<sp/>index<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900" refid="classfmt_1_1internal_1_1_thousands_sep_1a9f7a1beee5f7fce8ead36100fbbf2742" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_thousands_sep_1a9f7a1beee5f7fce8ead36100fbbf2742" kindref="member">digit_index_</ref>;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="903" refid="classfmt_1_1internal_1_1_thousands_sep_1a18736a7ad311be8ef0b25c92ecb5b933" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_thousands_sep_1a18736a7ad311be8ef0b25c92ecb5b933" kindref="member">ThousandsSep</ref>(<ref refid="classfmt_1_1_basic_string_ref" kindref="compound">fmt::StringRef</ref><sp/>sep)<sp/>:<sp/>sep_(sep),<sp/>digit_index_(0)<sp/>{}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="906" refid="classfmt_1_1internal_1_1_thousands_sep_1a57a43bdd242e29d243c5301643f52b4a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_thousands_sep_1a57a43bdd242e29d243c5301643f52b4a" kindref="member">operator()</ref>(Char<sp/>*&amp;<ref refid="glew_8h_1a6c0f527f003707dfaca177b40f406ed9" kindref="member">buffer</ref>)<sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++digit_index_<sp/>%<sp/>3<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer<sp/>-=<sp/>sep_.<ref refid="classfmt_1_1_basic_string_ref_1ae38d9106dd5bec69488e5464aedc266a" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uninitialized_copy(sep_.<ref refid="classfmt_1_1_basic_string_ref_1ae9c80502c527437215fe1c11dca8b475" kindref="member">data</ref>(),<sp/>sep_.<ref refid="classfmt_1_1_basic_string_ref_1ae9c80502c527437215fe1c11dca8b475" kindref="member">data</ref>()<sp/>+<sp/>sep_.<ref refid="classfmt_1_1_basic_string_ref_1ae38d9106dd5bec69488e5464aedc266a" kindref="member">size</ref>(),</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1ab81ed2356d1a6f3bcf03c5bdf5f8d4f2" kindref="member">internal::make_ptr</ref>(buffer,<sp/>sep_.<ref refid="classfmt_1_1_basic_string_ref_1ae38d9106dd5bec69488e5464aedc266a" kindref="member">size</ref>()));</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="913"><highlight class="normal">};</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>a<sp/>decimal<sp/>unsigned<sp/>integer<sp/>value<sp/>writing<sp/>into<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="comment">//<sp/>thousands_sep<sp/>is<sp/>a<sp/>functor<sp/>that<sp/>is<sp/>called<sp/>after<sp/>writing<sp/>each<sp/>char<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="comment">//<sp/>add<sp/>a<sp/>thousands<sp/>separator<sp/>if<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>UInt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ThousandsSep&gt;</highlight></codeline>
<codeline lineno="919" refid="namespacefmt_1_1internal_1aeee1847660e999ab1e360ffa18515b88" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1aeee1847660e999ab1e360ffa18515b88" kindref="member">format_decimal</ref>(Char<sp/>*<ref refid="glew_8h_1a6c0f527f003707dfaca177b40f406ed9" kindref="member">buffer</ref>,<sp/>UInt<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_digits,</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classfmt_1_1internal_1_1_thousands_sep" kindref="compound">ThousandsSep</ref><sp/><ref refid="namespacefmt_1_1internal_1a17c95c81f680e8641fd4d2b21bf7b381" kindref="member">thousands_sep</ref>)<sp/>{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/>buffer<sp/>+=<sp/>num_digits;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(value<sp/>&gt;=<sp/>100)<sp/>{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Integer<sp/>division<sp/>is<sp/>slow<sp/>so<sp/>do<sp/>it<sp/>for<sp/>a<sp/>group<sp/>of<sp/>two<sp/>digits<sp/>instead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>for<sp/>every<sp/>digit.<sp/>The<sp/>idea<sp/>comes<sp/>from<sp/>the<sp/>talk<sp/>by<sp/>Alexandrescu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Three<sp/>Optimization<sp/>Tips<sp/>for<sp/>C++&quot;.<sp/>See<sp/>speed-test<sp/>for<sp/>a<sp/>comparison.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a57f14e05b1900f16a2da82ade47d0c6d" kindref="member">index</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((value<sp/>%<sp/>100)<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>/=<sp/>100;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>*--buffer<sp/>=<sp/><ref refid="structfmt_1_1internal_1_1_basic_data_1abc0f1b67b25a98d0aa1f2b25c8649e59" kindref="member">Data::DIGITS</ref>[index<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1a17c95c81f680e8641fd4d2b21bf7b381" kindref="member">thousands_sep</ref>(buffer);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>*--buffer<sp/>=<sp/><ref refid="structfmt_1_1internal_1_1_basic_data_1abc0f1b67b25a98d0aa1f2b25c8649e59" kindref="member">Data::DIGITS</ref>[<ref refid="glew_8h_1a57f14e05b1900f16a2da82ade47d0c6d" kindref="member">index</ref>];</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1a17c95c81f680e8641fd4d2b21bf7b381" kindref="member">thousands_sep</ref>(buffer);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&lt;<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>*--buffer<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a57f14e05b1900f16a2da82ade47d0c6d" kindref="member">index</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>*--buffer<sp/>=<sp/><ref refid="structfmt_1_1internal_1_1_basic_data_1abc0f1b67b25a98d0aa1f2b25c8649e59" kindref="member">Data::DIGITS</ref>[index<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><ref refid="namespacefmt_1_1internal_1a17c95c81f680e8641fd4d2b21bf7b381" kindref="member">thousands_sep</ref>(buffer);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>*--buffer<sp/>=<sp/><ref refid="structfmt_1_1internal_1_1_basic_data_1abc0f1b67b25a98d0aa1f2b25c8649e59" kindref="member">Data::DIGITS</ref>[<ref refid="glew_8h_1a57f14e05b1900f16a2da82ade47d0c6d" kindref="member">index</ref>];</highlight></codeline>
<codeline lineno="941"><highlight class="normal">}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>UInt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="944" refid="namespacefmt_1_1internal_1a80ab0ca0ccee2866b209454bc2b3098e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1aeee1847660e999ab1e360ffa18515b88" kindref="member">format_decimal</ref>(Char<sp/>*<ref refid="glew_8h_1a6c0f527f003707dfaca177b40f406ed9" kindref="member">buffer</ref>,<sp/>UInt<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_digits)<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1aeee1847660e999ab1e360ffa18515b88" kindref="member">format_decimal</ref>(buffer,<sp/>value,<sp/>num_digits,<sp/><ref refid="structfmt_1_1internal_1_1_no_thousands_sep" kindref="compound">NoThousandsSep</ref>());</highlight></codeline>
<codeline lineno="946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949" refid="format_8h_1a66278651d81592645cef28ca33a6ab92" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_USE_WINDOWS_H<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>!defined(FMT_USE_WINDOWS_H)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_USE_WINDOWS_H<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>FMT_USE_WINDOWS_H<sp/>to<sp/>0<sp/>to<sp/>disable<sp/>use<sp/>of<sp/>windows.h.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>the<sp/>functionality<sp/>that<sp/>relies<sp/>on<sp/>it<sp/>will<sp/>be<sp/>disabled<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_WINDOWS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>converter<sp/>from<sp/>UTF-8<sp/>to<sp/>UTF-16.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>only<sp/>provided<sp/>for<sp/>Windows<sp/>since<sp/>other<sp/>systems<sp/>support<sp/>UTF-8<sp/>natively.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">UTF8ToUTF16<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_memory_buffer" kindref="compound">MemoryBuffer&lt;wchar_t, INLINE_BUFFER_SIZE&gt;</ref><sp/>buffer_;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a9a4960b70582ed2620911a0b75dce0b5" kindref="member">FMT_API</ref><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>UTF8ToUTF16(StringRef<sp/><ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1a88f11ca64ac292c1e2df229ced839312" kindref="member">WStringRef</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1a88f11ca64ac292c1e2df229ced839312" kindref="member">WStringRef</ref>(&amp;buffer_[0],<sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>());<sp/>}</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer_.<ref refid="classfmt_1_1_buffer_1a14fa72f0ddf584c14ffffb1446f598aa" kindref="member">size</ref>()<sp/>-<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*c_str()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;buffer_[0];<sp/>}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/>std::wstring<sp/>str()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::wstring(&amp;buffer_[0],<sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>());<sp/>}</highlight></codeline>
<codeline lineno="969"><highlight class="normal">};</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>converter<sp/>from<sp/>UTF-16<sp/>to<sp/>UTF-8.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>only<sp/>provided<sp/>for<sp/>Windows<sp/>since<sp/>other<sp/>systems<sp/>support<sp/>UTF-8<sp/>natively.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">UTF16ToUTF8<sp/>{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_memory_buffer" kindref="compound">MemoryBuffer&lt;char, INLINE_BUFFER_SIZE&gt;</ref><sp/>buffer_;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>UTF16ToUTF8()<sp/>{}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a9a4960b70582ed2620911a0b75dce0b5" kindref="member">FMT_API</ref><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>UTF16ToUTF8(WStringRef<sp/><ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1ae5ed3b29f911650a12b4de3d14126c31" kindref="member">StringRef</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1ae5ed3b29f911650a12b4de3d14126c31" kindref="member">StringRef</ref>(&amp;buffer_[0],<sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>());<sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer_.<ref refid="classfmt_1_1_buffer_1a14fa72f0ddf584c14ffffb1446f598aa" kindref="member">size</ref>()<sp/>-<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c_str()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;buffer_[0];<sp/>}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><ref refid="glew_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/>str()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref>(&amp;buffer_[0],<sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>());<sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Performs<sp/>conversion<sp/>returning<sp/>a<sp/>system<sp/>error<sp/>code<sp/>instead<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>throwing<sp/>exception<sp/>on<sp/>conversion<sp/>error.<sp/>This<sp/>method<sp/>may<sp/>still<sp/>throw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>case<sp/>of<sp/>memory<sp/>allocation<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a9a4960b70582ed2620911a0b75dce0b5" kindref="member">FMT_API</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1aedce4aeaa89239024c67c7682cff3370" kindref="member">convert</ref>(WStringRef<sp/>s);</highlight></codeline>
<codeline lineno="989"><highlight class="normal">};</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><ref refid="format_8h_1a9a4960b70582ed2620911a0b75dce0b5" kindref="member">FMT_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>format_windows_error(<ref refid="classfmt_1_1_basic_writer" kindref="compound">fmt::Writer</ref><sp/>&amp;out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code,</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classfmt_1_1_basic_string_ref" kindref="compound">fmt::StringRef</ref><sp/><ref refid="glew_8h_1a7b6161cffb9b8aee272b3b916183d28c" kindref="member">message</ref>)<sp/><ref refid="format_8h_1aef128913e8400683b1cbd1a3a2e11df3" kindref="member">FMT_NOEXCEPT</ref>;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>formatting<sp/>argument<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996" refid="structfmt_1_1internal_1_1_value" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_value" kindref="compound">Value</ref><sp/>{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="998" refid="structfmt_1_1internal_1_1_value_1_1_string_value" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_value_1_1_string_value" kindref="compound">StringValue</ref><sp/>{</highlight></codeline>
<codeline lineno="999" refid="structfmt_1_1internal_1_1_value_1_1_string_value_1a5fcfe566f56e4bbf08748303cd7fa6ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*<ref refid="structfmt_1_1internal_1_1_value_1_1_string_value_1a5fcfe566f56e4bbf08748303cd7fa6ca" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="1000" refid="structfmt_1_1internal_1_1_value_1_1_string_value_1abd1880f3fb3618e37fb3df74ff623146" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="structfmt_1_1internal_1_1_value_1_1_string_value_1abd1880f3fb3618e37fb3df74ff623146" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003" refid="structfmt_1_1internal_1_1_value_1a1bdc8aa6f70614fbb514aaa56106c669" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a1659df18b3b413a60a397d5a7540f3d2" kindref="member">void</ref><sp/>(*FormatFunc)(</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*formatter,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*format_str_ptr);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006" refid="structfmt_1_1internal_1_1_value_1_1_custom_value" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_value_1_1_custom_value" kindref="compound">CustomValue</ref><sp/>{</highlight></codeline>
<codeline lineno="1007" refid="structfmt_1_1internal_1_1_value_1_1_custom_value_1aaaa7c10023f8b3886bee9593cddea150" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structfmt_1_1internal_1_1_value_1_1_custom_value_1aaaa7c10023f8b3886bee9593cddea150" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="1008" refid="structfmt_1_1internal_1_1_value_1_1_custom_value_1a36f27ca0939e90a5fe6d7d355ea0f97a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FormatFunc<sp/><ref refid="structfmt_1_1internal_1_1_value_1_1_custom_value_1a36f27ca0939e90a5fe6d7d355ea0f97a" kindref="member">format</ref>;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1012" refid="structfmt_1_1internal_1_1_value_1ac295b81747c26b97893be505a03381c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1ac295b81747c26b97893be505a03381c8" kindref="member">int_value</ref>;</highlight></codeline>
<codeline lineno="1013" refid="structfmt_1_1internal_1_1_value_1a9ced917767812c9572065509f22bec18" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a9ced917767812c9572065509f22bec18" kindref="member">uint_value</ref>;</highlight></codeline>
<codeline lineno="1014" refid="structfmt_1_1internal_1_1_value_1a1dab8b1df1f88c35b6893d63b1b72af8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>LongLong<sp/><ref refid="structfmt_1_1internal_1_1_value_1a1dab8b1df1f88c35b6893d63b1b72af8" kindref="member">long_long_value</ref>;</highlight></codeline>
<codeline lineno="1015" refid="structfmt_1_1internal_1_1_value_1a78424f46c0150190010e5c27ec3c69a0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ULongLong<sp/><ref refid="structfmt_1_1internal_1_1_value_1a78424f46c0150190010e5c27ec3c69a0" kindref="member">ulong_long_value</ref>;</highlight></codeline>
<codeline lineno="1016" refid="structfmt_1_1internal_1_1_value_1afe6725f2c3ad8fce5867f824c1fa8cc8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1afe6725f2c3ad8fce5867f824c1fa8cc8" kindref="member">double_value</ref>;</highlight></codeline>
<codeline lineno="1017" refid="structfmt_1_1internal_1_1_value_1a7adfb34f6e0b12676681de8a6597ed17" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a7adfb34f6e0b12676681de8a6597ed17" kindref="member">long_double_value</ref>;</highlight></codeline>
<codeline lineno="1018" refid="structfmt_1_1internal_1_1_value_1a3627bcfa0a5bcb7e48f6fc632243b17d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structfmt_1_1internal_1_1_value_1a3627bcfa0a5bcb7e48f6fc632243b17d" kindref="member">pointer</ref>;</highlight></codeline>
<codeline lineno="1019" refid="structfmt_1_1internal_1_1_value_1a98e3f2f8c44a6d6d4606646e5ef62e0a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfmt_1_1internal_1_1_value_1_1_string_value" kindref="compound">StringValue&lt;char&gt;</ref><sp/><ref refid="structfmt_1_1internal_1_1_value_1a98e3f2f8c44a6d6d4606646e5ef62e0a" kindref="member">string</ref>;</highlight></codeline>
<codeline lineno="1020" refid="structfmt_1_1internal_1_1_value_1a4bedea17bc9ddfe00bcd7bf0ee086c66" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfmt_1_1internal_1_1_value_1_1_string_value" kindref="compound">StringValue&lt;signed char&gt;</ref><sp/><ref refid="structfmt_1_1internal_1_1_value_1a4bedea17bc9ddfe00bcd7bf0ee086c66" kindref="member">sstring</ref>;</highlight></codeline>
<codeline lineno="1021" refid="structfmt_1_1internal_1_1_value_1ae89a416df861650100b0bfc207e19204" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfmt_1_1internal_1_1_value_1_1_string_value" kindref="compound">StringValue&lt;unsigned char&gt;</ref><sp/><ref refid="structfmt_1_1internal_1_1_value_1ae89a416df861650100b0bfc207e19204" kindref="member">ustring</ref>;</highlight></codeline>
<codeline lineno="1022" refid="structfmt_1_1internal_1_1_value_1a2add0d3534ad850a089ba4ed0f60b9d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfmt_1_1internal_1_1_value_1_1_string_value" kindref="compound">StringValue&lt;wchar_t&gt;</ref><sp/><ref refid="structfmt_1_1internal_1_1_value_1a2add0d3534ad850a089ba4ed0f60b9d8" kindref="member">wstring</ref>;</highlight></codeline>
<codeline lineno="1023" refid="structfmt_1_1internal_1_1_value_1a2dcff1e0ac8f7fb7fc6dd448d66978cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfmt_1_1internal_1_1_value_1_1_custom_value" kindref="compound">CustomValue</ref><sp/><ref refid="structfmt_1_1internal_1_1_value_1a2dcff1e0ac8f7fb7fc6dd448d66978cf" kindref="member">custom</ref>;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026" refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaa" kindref="member">Type</ref><sp/>{</highlight></codeline>
<codeline lineno="1027" refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa24ae26361d60b04790c06fffecaa7eda" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa24ae26361d60b04790c06fffecaa7eda" kindref="member">NONE</ref>,<sp/>NAMED_ARG,</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Integer<sp/>types<sp/>should<sp/>go<sp/>first,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029" refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa8c2ffe6909d26d46781aa6fb9b8ae418" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="wglew_8h_1a4805e8edd7040ed9662e4e7f8db39a8f" kindref="member">INT</ref>,<sp/><ref refid="wglew_8h_1a2cedd0ac2b26123330d3366994684b52" kindref="member">UINT</ref>,<sp/>LONG_LONG,<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa8c2ffe6909d26d46781aa6fb9b8ae418" kindref="member">ULONG_LONG</ref>,<sp/><ref refid="wglew_8h_1aac8eace2cea06e3f4abec4e884000342" kindref="member">BOOL</ref>,<sp/>CHAR,<sp/>LAST_INTEGER_TYPE<sp/>=<sp/>CHAR,</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>followed<sp/>by<sp/>floating-point<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031" refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa6578a997089147df95c66231c936c43c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>DOUBLE,<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa6578a997089147df95c66231c936c43c" kindref="member">LONG_DOUBLE</ref>,<sp/>LAST_NUMERIC_TYPE<sp/>=<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa6578a997089147df95c66231c936c43c" kindref="member">LONG_DOUBLE</ref>,</highlight></codeline>
<codeline lineno="1032" refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaae94c5eaf7d9283c167bd88765c18b82c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CSTRING,<sp/>STRING,<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaae94c5eaf7d9283c167bd88765c18b82c" kindref="member">WSTRING</ref>,<sp/>POINTER,<sp/>CUSTOM</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1034"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>formatting<sp/>argument.<sp/>It<sp/>is<sp/>a<sp/>trivially<sp/>copyable/constructible<sp/>type<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="comment">//<sp/>allow<sp/>storage<sp/>in<sp/>internal::MemoryBuffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038" refid="structfmt_1_1internal_1_1_arg" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">Arg</ref><sp/>:<sp/><ref refid="structfmt_1_1internal_1_1_value" kindref="compound">Value</ref><sp/>{</highlight></codeline>
<codeline lineno="1039" refid="structfmt_1_1internal_1_1_arg_1af1165b4e8647bea5913922de82599e2e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaa" kindref="member">Type</ref><sp/><ref refid="structfmt_1_1internal_1_1_arg_1af1165b4e8647bea5913922de82599e2e" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="1043" refid="structfmt_1_1internal_1_1_named_arg" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_named_arg" kindref="compound">NamedArg</ref>;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1046" refid="structfmt_1_1internal_1_1_null" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_null" kindref="compound">Null</ref><sp/>{};</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>helper<sp/>class<sp/>template<sp/>to<sp/>enable<sp/>or<sp/>disable<sp/>overloads<sp/>taking<sp/>wide</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="comment">//<sp/>characters<sp/>and<sp/>strings<sp/>in<sp/>MakeValue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="1051" refid="structfmt_1_1internal_1_1_w_char_helper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_w_char_helper" kindref="compound">WCharHelper</ref><sp/>{</highlight></codeline>
<codeline lineno="1052" refid="structfmt_1_1internal_1_1_w_char_helper_1a245ff9c3b1f1c9bc2dd110c7d247abcd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_null" kindref="compound">Null&lt;T&gt;</ref><sp/><ref refid="structfmt_1_1internal_1_1_w_char_helper_1a245ff9c3b1f1c9bc2dd110c7d247abcd" kindref="member">Supported</ref>;</highlight></codeline>
<codeline lineno="1053" refid="structfmt_1_1internal_1_1_w_char_helper_1abc10996c32464f7de811c65b94ff56a9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/><ref refid="structfmt_1_1internal_1_1_w_char_helper_1abc10996c32464f7de811c65b94ff56a9" kindref="member">Unsupported</ref>;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1057" refid="structfmt_1_1internal_1_1_w_char_helper_3_01_t_00_01wchar__t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_w_char_helper_3_01_t_00_01wchar__t_01_4" kindref="compound">WCharHelper&lt;T, wchar_t&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="1058" refid="structfmt_1_1internal_1_1_w_char_helper_3_01_t_00_01wchar__t_01_4_1a5e068234d7ece2fd0e80ebd3b3b79f02" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/><ref refid="structfmt_1_1internal_1_1_w_char_helper_3_01_t_00_01wchar__t_01_4_1a5e068234d7ece2fd0e80ebd3b3b79f02" kindref="member">Supported</ref>;</highlight></codeline>
<codeline lineno="1059" refid="structfmt_1_1internal_1_1_w_char_helper_3_01_t_00_01wchar__t_01_4_1a9922ab13c42de66fe6f42006e999b539" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_null" kindref="compound">Null&lt;T&gt;</ref><sp/><ref refid="structfmt_1_1internal_1_1_w_char_helper_3_01_t_00_01wchar__t_01_4_1a9922ab13c42de66fe6f42006e999b539" kindref="member">Unsupported</ref>;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062" refid="namespacefmt_1_1internal_1a39cdac57ccb1df4930903dec83078d5e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1a39cdac57ccb1df4930903dec83078d5e" kindref="member">Yes</ref>[1];</highlight></codeline>
<codeline lineno="1063" refid="namespacefmt_1_1internal_1abf626ed3fde5ec6d176528219f93fc84" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1abf626ed3fde5ec6d176528219f93fc84" kindref="member">No</ref>[2];</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal">T<sp/>&amp;</highlight><highlight class="keyword">get</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>are<sp/>non-members<sp/>to<sp/>workaround<sp/>an<sp/>overload<sp/>resolution<sp/>bug<sp/>in<sp/>bcc32.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal">Yes<sp/>&amp;<ref refid="namespacefmt_1_1internal_1aedce4aeaa89239024c67c7682cff3370" kindref="member">convert</ref>(<ref refid="namespacefmt_1af495ed85910212d4ba243ae2a8ce8f1f" kindref="member">fmt::ULongLong</ref>);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal">No<sp/>&amp;<ref refid="namespacefmt_1_1internal_1aedce4aeaa89239024c67c7682cff3370" kindref="member">convert</ref>(...);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ENABLE_CONVERSION&gt;</highlight></codeline>
<codeline lineno="1073" refid="structfmt_1_1internal_1_1_convert_to_int_impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_convert_to_int_impl" kindref="compound">ConvertToIntImpl</ref><sp/>{</highlight></codeline>
<codeline lineno="1074" refid="structfmt_1_1internal_1_1_convert_to_int_impl_1afe36ceac540999960581efc917080e94a063667cd568cd355447dbec6ca86192e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref><sp/>=<sp/>ENABLE_CONVERSION<sp/>};</highlight></codeline>
<codeline lineno="1075"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ENABLE_CONVERSION&gt;</highlight></codeline>
<codeline lineno="1078" refid="structfmt_1_1internal_1_1_convert_to_int_impl2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_convert_to_int_impl2" kindref="compound">ConvertToIntImpl2</ref><sp/>{</highlight></codeline>
<codeline lineno="1079" refid="structfmt_1_1internal_1_1_convert_to_int_impl2_1a02f141c427fd8b08496ff6f6d6c7805ca19320504b255303a51eb0c95d5283668" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="1080"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1083" refid="structfmt_1_1internal_1_1_convert_to_int_impl2_3_01_t_00_01true_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_convert_to_int_impl2_3_01_t_00_01true_01_4" kindref="compound">ConvertToIntImpl2&lt;T, true&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>convert<sp/>numeric<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086" refid="structfmt_1_1internal_1_1_convert_to_int_impl2_3_01_t_00_01true_01_4_1a6598c6507ed7a60b89115cd1df0f9f1babf72d5da000f3fd2be54ebdbda7db36d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref><sp/>=<sp/><ref refid="structfmt_1_1internal_1_1_convert_to_int_impl" kindref="compound">ConvertToIntImpl&lt;T, !std::numeric_limits&lt;T&gt;::is_specialized</ref>&gt;<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">::value</ref></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1088"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1091" refid="structfmt_1_1internal_1_1_convert_to_int" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_convert_to_int" kindref="compound">ConvertToInt</ref><sp/>{</highlight></codeline>
<codeline lineno="1092" refid="structfmt_1_1internal_1_1_convert_to_int_1a89f65d01dada704ab4720fcece3a8dfea75bbb2967cf9b5d3457ee10a6e3ea842" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>enable_conversion<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="namespacefmt_1_1internal_1aedce4aeaa89239024c67c7682cff3370" kindref="member">convert</ref>(get&lt;T&gt;()))<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Yes)<sp/>};</highlight></codeline>
<codeline lineno="1093" refid="structfmt_1_1internal_1_1_convert_to_int_1af0316312b11c661cd1f7ab6ef874e083a7412c6ddca76a8c08c3eda82433970b4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref><sp/>=<sp/><ref refid="structfmt_1_1internal_1_1_convert_to_int_impl2" kindref="compound">ConvertToIntImpl2&lt;T, enable_conversion&gt;::value</ref><sp/>};</highlight></codeline>
<codeline lineno="1094"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight></codeline>
<codeline lineno="1096" refid="format_8h_1a178dfa469e0fb5d8d60203f8e1c8c993" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_DISABLE_CONVERSION_TO_INT(Type)<sp/>\</highlight></codeline>
<codeline lineno="1097"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;&gt;<sp/>\</highlight></codeline>
<codeline lineno="1098"><highlight class="preprocessor"><sp/><sp/>struct<sp/>ConvertToInt&lt;Type&gt;<sp/>{<sp/><sp/>enum<sp/>{<sp/>value<sp/>=<sp/>0<sp/>};<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Silence<sp/>warnings<sp/>about<sp/>convering<sp/>float<sp/>to<sp/>int.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><ref refid="namespacefmt_1_1internal_1ae26c013b50f0f8b4ddf47f38acfdcd7c" kindref="member">FMT_DISABLE_CONVERSION_TO_INT</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><ref refid="namespacefmt_1_1internal_1ae26c013b50f0f8b4ddf47f38acfdcd7c" kindref="member">FMT_DISABLE_CONVERSION_TO_INT</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><ref refid="namespacefmt_1_1internal_1ae26c013b50f0f8b4ddf47f38acfdcd7c" kindref="member">FMT_DISABLE_CONVERSION_TO_INT</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1106" refid="structfmt_1_1internal_1_1_enable_if" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_enable_if" kindref="compound">EnableIf</ref><sp/>{};</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1109" refid="structfmt_1_1internal_1_1_enable_if_3_01true_00_01_t_01_4_1a98d04258f45ca191b0509ef570bcc826" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_enable_if" kindref="compound">EnableIf</ref>&lt;true,<sp/>T&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/><ref refid="structfmt_1_1internal_1_1_enable_if_3_01true_00_01_t_01_4_1a98d04258f45ca191b0509ef570bcc826" kindref="member">type</ref>;<sp/>};</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="1112" refid="structfmt_1_1internal_1_1_conditional_1a2670cd09823078e9ac3d59e8ad5e9e5e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_conditional" kindref="compound">Conditional</ref><sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/><ref refid="structfmt_1_1internal_1_1_conditional_1a2670cd09823078e9ac3d59e8ad5e9e5e" kindref="member">type</ref>;<sp/>};</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="1115" refid="structfmt_1_1internal_1_1_conditional_3_01false_00_01_t_00_01_f_01_4_1ac36f14451039cf3c26d853b93c9bf234" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_conditional" kindref="compound">Conditional</ref>&lt;false,<sp/>T,<sp/>F&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>F<sp/><ref refid="structfmt_1_1internal_1_1_conditional_3_01false_00_01_t_00_01_f_01_4_1ac36f14451039cf3c26d853b93c9bf234" kindref="member">type</ref>;<sp/>};</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>bcc32<sp/>which<sp/>doesn&apos;t<sp/>understand<sp/>!<sp/>in<sp/>template<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1119" refid="structfmt_1_1internal_1_1_not_1a08d1029d6d7900c76082f3fde07d6a0ba70ae9e4e1ee42353ad62bd95a5c8c1fa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_not" kindref="compound">Not</ref><sp/>{<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref><sp/>=<sp/>0<sp/>};<sp/>};</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="1122" refid="structfmt_1_1internal_1_1_not_3_01false_01_4_1a48651d36479377e99183feb6d18bcf61ae552897d5497e989f177b70df253078c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_not" kindref="compound">Not</ref>&lt;false&gt;<sp/>{<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref><sp/>=<sp/>1<sp/>};<sp/>};</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1125" refid="structfmt_1_1internal_1_1_false_1a9dd0e874febc784552d100ddd60681c0a092ce9976223178dc9e7fcdf6c76f89e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_false" kindref="compound">False</ref><sp/>{<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref><sp/>=<sp/>0<sp/>};<sp/>};</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127" refid="structfmt_1_1internal_1_1_l_conv_check" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_l_conv_check" kindref="compound">LConvCheck</ref><sp/>{</highlight></codeline>
<codeline lineno="1128" refid="structfmt_1_1internal_1_1_l_conv_check_1af5a35a7bced670df56dcef11f37d1427" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1internal_1_1_l_conv_check_1af5a35a7bced670df56dcef11f37d1427" kindref="member">LConvCheck</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1129"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>thousands<sp/>separator<sp/>for<sp/>the<sp/>current<sp/>locale.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>check<sp/>if<sp/>``lconv``<sp/>contains<sp/>``thousands_sep``<sp/>because<sp/>on<sp/>Android</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>``lconv``<sp/>is<sp/>stubbed<sp/>as<sp/>an<sp/>empty<sp/>struct.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LConv&gt;</highlight></codeline>
<codeline lineno="1135" refid="namespacefmt_1_1internal_1a17c95c81f680e8641fd4d2b21bf7b381" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>StringRef<sp/><ref refid="namespacefmt_1_1internal_1a17c95c81f680e8641fd4d2b21bf7b381" kindref="member">thousands_sep</ref>(</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>LConv<sp/>*lc,<sp/><ref refid="structfmt_1_1internal_1_1_l_conv_check" kindref="compound">LConvCheck&lt;char *LConv::*, &amp;LConv::thousands_sep&gt;</ref><sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lc-&gt;thousands_sep;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140" refid="namespacefmt_1_1internal_1a3a4ed44bd47a353a5854fedb8dce4029" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_string_ref" kindref="compound">fmt::StringRef</ref><sp/><ref refid="namespacefmt_1_1internal_1a17c95c81f680e8641fd4d2b21bf7b381" kindref="member">thousands_sep</ref>(...)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142" refid="format_8h_1a3e04d7bac3d8124e4fe7d64d3de25cfa" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_CONCAT(a,<sp/>b)<sp/>a##b</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_GCC_VERSION<sp/>&gt;=<sp/>407</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_UNUSED<sp/>__attribute__((unused))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147" refid="format_8h_1a653d623d320379b9426e13643059777b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_UNUSED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_USE_STATIC_ASSERT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151" refid="format_8h_1ace633c5bc82b65dc459849ade76e25cb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_USE_STATIC_ASSERT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_STATIC_ASSERT<sp/>||<sp/>FMT_HAS_FEATURE(cxx_static_assert)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="1155"><highlight class="preprocessor"><sp/><sp/>(FMT_GCC_VERSION<sp/>&gt;=<sp/>403<sp/>&amp;&amp;<sp/>FMT_HAS_GXX_CXX11)<sp/>||<sp/>_MSC_VER<sp/>&gt;=<sp/>1600</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_STATIC_ASSERT(cond,<sp/>message)<sp/>static_assert(cond,<sp/>message)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158" refid="format_8h_1a8c43eda874e268d89b969939f98ea5e9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_CONCAT_(a,<sp/>b)<sp/>FMT_CONCAT(a,<sp/>b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159" refid="format_8h_1a204f6e58eced6add1741a1778c4690b9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_STATIC_ASSERT(cond,<sp/>message)<sp/>\</highlight></codeline>
<codeline lineno="1160"><highlight class="preprocessor"><sp/><sp/>typedef<sp/>int<sp/>FMT_CONCAT_(Assert,<sp/>__LINE__)[(cond)<sp/>?<sp/>1<sp/>:<sp/>-1]<sp/>FMT_UNUSED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Formatter,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1164" refid="namespacefmt_1_1internal_1ac8923cb1e602be0535f92ef716f4fb57" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1ac8923cb1e602be0535f92ef716f4fb57" kindref="member">format_arg</ref>(Formatter<sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a204f6e58eced6add1741a1778c4690b9" kindref="member">FMT_STATIC_ASSERT</ref>(<ref refid="structfmt_1_1internal_1_1_false" kindref="compound">False&lt;T&gt;::value</ref>,</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>format<sp/>argument.<sp/>To<sp/>enable<sp/>the<sp/>use<sp/>of<sp/>ostream<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;operator&lt;&lt;<sp/>include<sp/>fmt/ostream.h.<sp/>Otherwise<sp/>provide<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;an<sp/>overload<sp/>of<sp/>format_arg.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Makes<sp/>an<sp/>Arg<sp/>object<sp/>from<sp/>any<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Formatter&gt;</highlight></codeline>
<codeline lineno="1173" refid="classfmt_1_1internal_1_1_make_value" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1internal_1_1_make_value" kindref="compound">MakeValue</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">Arg</ref><sp/>{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1175" refid="classfmt_1_1internal_1_1_make_value_1a6c7944899a1c1ba1dd5102131d19c443" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Formatter::Char<sp/><ref refid="classfmt_1_1internal_1_1_make_value_1a6c7944899a1c1ba1dd5102131d19c443" kindref="member">Char</ref>;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>two<sp/>methods<sp/>are<sp/>private<sp/>to<sp/>disallow<sp/>formatting<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>arbitrary<sp/>pointers.<sp/>If<sp/>you<sp/>want<sp/>to<sp/>output<sp/>a<sp/>pointer<sp/>cast<sp/>it<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;void<sp/>*&quot;<sp/>or<sp/>&quot;const<sp/>void<sp/>*&quot;.<sp/>In<sp/>particular,<sp/>this<sp/>forbids<sp/>formatting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>&quot;[const]<sp/>volatile<sp/>char<sp/>*&quot;<sp/>which<sp/>is<sp/>printed<sp/>as<sp/>bool<sp/>by<sp/>iostreams.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>implement!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_make_value" kindref="compound">MakeValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>*<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_make_value" kindref="compound">MakeValue</ref>(T<sp/>*<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>methods<sp/>are<sp/>private<sp/>to<sp/>disallow<sp/>formatting<sp/>of<sp/>wide</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>characters<sp/>and<sp/>strings<sp/>into<sp/>narrow<sp/>strings<sp/>as<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>fmt::format(&quot;{}&quot;,<sp/>L&quot;test&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>fix<sp/>this,<sp/>use<sp/>a<sp/>wide<sp/>format<sp/>string:<sp/>fmt::format(L&quot;{}&quot;,<sp/>L&quot;test&quot;).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!FMT_MSC_VER<sp/>||<sp/>defined(_NATIVE_WCHAR_T_DEFINED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_make_value" kindref="compound">MakeValue</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_w_char_helper_1abc10996c32464f7de811c65b94ff56a9" kindref="member">WCharHelper&lt;wchar_t, Char&gt;::Unsupported</ref>);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_make_value" kindref="compound">MakeValue</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_w_char_helper_1abc10996c32464f7de811c65b94ff56a9" kindref="member">WCharHelper&lt;wchar_t *, Char&gt;::Unsupported</ref>);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_make_value" kindref="compound">MakeValue</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_w_char_helper_1abc10996c32464f7de811c65b94ff56a9" kindref="member">WCharHelper&lt;const wchar_t *, Char&gt;::Unsupported</ref>);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_make_value" kindref="compound">MakeValue</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_w_char_helper_1abc10996c32464f7de811c65b94ff56a9" kindref="member">WCharHelper&lt;const std::wstring &amp;, Char&gt;::Unsupported</ref>);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_make_value" kindref="compound">MakeValue</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_w_char_helper_1abc10996c32464f7de811c65b94ff56a9" kindref="member">WCharHelper&lt;WStringRef, Char&gt;::Unsupported</ref>);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200" refid="classfmt_1_1internal_1_1_make_value_1a7f6a5b8995963c199e042caa52abdab6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_make_value_1a7f6a5b8995963c199e042caa52abdab6" kindref="member">set_string</ref>(StringRef<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.value<sp/>=<sp/>str.<ref refid="classfmt_1_1_basic_string_ref_1ae9c80502c527437215fe1c11dca8b475" kindref="member">data</ref>();</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.size<sp/>=<sp/>str.<ref refid="classfmt_1_1_basic_string_ref_1ae38d9106dd5bec69488e5464aedc266a" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205" refid="classfmt_1_1internal_1_1_make_value_1a713d6484d610b30b9b92993f9e8bba73" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_make_value_1a713d6484d610b30b9b92993f9e8bba73" kindref="member">set_string</ref>(WStringRef<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/>wstring.value<sp/>=<sp/>str.<ref refid="classfmt_1_1_basic_string_ref_1ae9c80502c527437215fe1c11dca8b475" kindref="member">data</ref>();</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>wstring.size<sp/>=<sp/>str.<ref refid="classfmt_1_1_basic_string_ref_1ae38d9106dd5bec69488e5464aedc266a" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Formats<sp/>an<sp/>argument<sp/>of<sp/>a<sp/>custom<sp/>type,<sp/>such<sp/>as<sp/>a<sp/>user-defined<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1212" refid="classfmt_1_1internal_1_1_make_value_1a9a5a3480de8d1e11edbcd06f3fbd1bb3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_make_value_1a9a5a3480de8d1e11edbcd06f3fbd1bb3" kindref="member">format_custom_arg</ref>(</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*formatter,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*format_str_ptr)<sp/>{</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1ac8923cb1e602be0535f92ef716f4fb57" kindref="member">format_arg</ref>(*static_cast&lt;Formatter*&gt;(formatter),</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*static_cast&lt;const<sp/>Char**&gt;(format_str_ptr),</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*static_cast&lt;const<sp/>T*&gt;(arg));</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1220" refid="classfmt_1_1internal_1_1_make_value_1ad5a54014968ec26a33aeeb82b3ebcb02" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_make_value_1ad5a54014968ec26a33aeeb82b3ebcb02" kindref="member">MakeValue</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222" refid="format_8h_1abf0e2d842013f277ceae700cd6f6e747" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_MAKE_VALUE_(Type,<sp/>field,<sp/>TYPE,<sp/>rhs)<sp/>\</highlight></codeline>
<codeline lineno="1223"><highlight class="preprocessor"><sp/><sp/>MakeValue(Type<sp/>value)<sp/>{<sp/>field<sp/>=<sp/>rhs;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1224"><highlight class="preprocessor"><sp/><sp/>static<sp/>uint64_t<sp/>type(Type)<sp/>{<sp/>return<sp/>Arg::TYPE;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226" refid="format_8h_1a05acd9bf561906ac7164ca5ea6a37177" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_MAKE_VALUE(Type,<sp/>field,<sp/>TYPE)<sp/>\</highlight></codeline>
<codeline lineno="1227"><highlight class="preprocessor"><sp/><sp/>FMT_MAKE_VALUE_(Type,<sp/>field,<sp/>TYPE,<sp/>value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a05acd9bf561906ac7164ca5ea6a37177" kindref="member">FMT_MAKE_VALUE</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>int_value,<sp/><ref refid="wglew_8h_1aac8eace2cea06e3f4abec4e884000342" kindref="member">BOOL</ref>)</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a05acd9bf561906ac7164ca5ea6a37177" kindref="member">FMT_MAKE_VALUE</ref>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/>int_value,<sp/><ref refid="wglew_8h_1a4805e8edd7040ed9662e4e7f8db39a8f" kindref="member">INT</ref>)</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a05acd9bf561906ac7164ca5ea6a37177" kindref="member">FMT_MAKE_VALUE</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/>uint_value,<sp/><ref refid="wglew_8h_1a2cedd0ac2b26123330d3366994684b52" kindref="member">UINT</ref>)</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a05acd9bf561906ac7164ca5ea6a37177" kindref="member">FMT_MAKE_VALUE</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>int_value,<sp/><ref refid="wglew_8h_1a4805e8edd7040ed9662e4e7f8db39a8f" kindref="member">INT</ref>)</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a05acd9bf561906ac7164ca5ea6a37177" kindref="member">FMT_MAKE_VALUE</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">,<sp/>uint_value,<sp/><ref refid="wglew_8h_1a2cedd0ac2b26123330d3366994684b52" kindref="member">UINT</ref>)</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235" refid="classfmt_1_1internal_1_1_make_value_1ad7e52c1fc3d087a666bdd55bfda0c79c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_make_value" kindref="compound">MakeValue</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>minimize<sp/>the<sp/>number<sp/>of<sp/>types<sp/>we<sp/>need<sp/>to<sp/>deal<sp/>with,<sp/>long<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>translated<sp/>either<sp/>to<sp/>int<sp/>or<sp/>to<sp/>long<sp/>long<sp/>depending<sp/>on<sp/>its<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacefmt_1_1internal_1abe2cbab571913bf19a52c6f6bc1b5a5a" kindref="member">const_check</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int_value<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>long_long_value<sp/>=<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1243" refid="classfmt_1_1internal_1_1_make_value_1a595ab8ee3b95d916881ffe40db3a13b0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="classfmt_1_1internal_1_1_make_value_1a595ab8ee3b95d916881ffe40db3a13b0" kindref="member">type</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(long)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>?<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa6ab1b5ad31036f4c90bae16e873b3396" kindref="member">Arg::INT</ref><sp/>:<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa7674f34a96c22fec85d9f27d082b4412" kindref="member">Arg::LONG_LONG</ref>;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247" refid="classfmt_1_1internal_1_1_make_value_1a09061194386798ee1f7652ff0100192e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_make_value_1a09061194386798ee1f7652ff0100192e" kindref="member">MakeValue</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacefmt_1_1internal_1abe2cbab571913bf19a52c6f6bc1b5a5a" kindref="member">const_check</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint_value<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ulong_long_value<sp/>=<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1253" refid="classfmt_1_1internal_1_1_make_value_1a797f6663d8fdaf02cf254c05dbb19647" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="classfmt_1_1internal_1_1_make_value_1a797f6663d8fdaf02cf254c05dbb19647" kindref="member">type</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>long)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)<sp/>?</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaac7303224391053ae45d4ff13ad0f017c" kindref="member">Arg::UINT</ref><sp/>:<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa8c2ffe6909d26d46781aa6fb9b8ae418" kindref="member">Arg::ULONG_LONG</ref>;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a05acd9bf561906ac7164ca5ea6a37177" kindref="member">FMT_MAKE_VALUE</ref>(LongLong,<sp/>long_long_value,<sp/>LONG_LONG)</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a05acd9bf561906ac7164ca5ea6a37177" kindref="member">FMT_MAKE_VALUE</ref>(ULongLong,<sp/>ulong_long_value,<sp/>ULONG_LONG)</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a05acd9bf561906ac7164ca5ea6a37177" kindref="member">FMT_MAKE_VALUE</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>double_value,<sp/>DOUBLE)</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a05acd9bf561906ac7164ca5ea6a37177" kindref="member">FMT_MAKE_VALUE</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>double_value,<sp/>DOUBLE)</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a05acd9bf561906ac7164ca5ea6a37177" kindref="member">FMT_MAKE_VALUE</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>long_double_value,<sp/>LONG_DOUBLE)</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a05acd9bf561906ac7164ca5ea6a37177" kindref="member">FMT_MAKE_VALUE</ref>(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>int_value,<sp/><ref refid="wglew_8h_1a4805e8edd7040ed9662e4e7f8db39a8f" kindref="member">INT</ref>)</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a05acd9bf561906ac7164ca5ea6a37177" kindref="member">FMT_MAKE_VALUE</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>uint_value,<sp/><ref refid="wglew_8h_1a2cedd0ac2b26123330d3366994684b52" kindref="member">UINT</ref>)</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a05acd9bf561906ac7164ca5ea6a37177" kindref="member">FMT_MAKE_VALUE</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>int_value,<sp/>CHAR)</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(_MSC_VER)<sp/>||<sp/>defined(_NATIVE_WCHAR_T_DEFINED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268" refid="classfmt_1_1internal_1_1_make_value_1acee23248667dcf84353cecf3e8f28d67" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_make_value_1acee23248667dcf84353cecf3e8f28d67" kindref="member">MakeValue</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_null" kindref="compound">WCharHelper&lt;wchar_t, Char&gt;::Supported</ref><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/>int_value<sp/>=<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1271" refid="classfmt_1_1internal_1_1_make_value_1adf70f5e369c149ce2916b73bea8c2af9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="classfmt_1_1internal_1_1_make_value_1adf70f5e369c149ce2916b73bea8c2af9" kindref="member">type</ref>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa4000e36300596c89b956b964a23114e0" kindref="member">Arg::CHAR</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274" refid="format_8h_1a0f2f1f6506ad63de82c05f55d0056d3d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_MAKE_STR_VALUE(Type,<sp/>TYPE)<sp/>\</highlight></codeline>
<codeline lineno="1275"><highlight class="preprocessor"><sp/><sp/>MakeValue(Type<sp/>value)<sp/>{<sp/>set_string(value);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1276"><highlight class="preprocessor"><sp/><sp/>static<sp/>uint64_t<sp/>type(Type)<sp/>{<sp/>return<sp/>Arg::TYPE;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a05acd9bf561906ac7164ca5ea6a37177" kindref="member">FMT_MAKE_VALUE</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/>CSTRING)</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a05acd9bf561906ac7164ca5ea6a37177" kindref="member">FMT_MAKE_VALUE</ref>(const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.value,<sp/>CSTRING)</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a05acd9bf561906ac7164ca5ea6a37177" kindref="member">FMT_MAKE_VALUE</ref>(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>sstring.value,<sp/>CSTRING)</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a05acd9bf561906ac7164ca5ea6a37177" kindref="member">FMT_MAKE_VALUE</ref>(const<sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>sstring.value,<sp/>CSTRING)</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a05acd9bf561906ac7164ca5ea6a37177" kindref="member">FMT_MAKE_VALUE</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>ustring.value,<sp/>CSTRING)</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a05acd9bf561906ac7164ca5ea6a37177" kindref="member">FMT_MAKE_VALUE</ref>(const<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>ustring.value,<sp/>CSTRING)</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a0f2f1f6506ad63de82c05f55d0056d3d" kindref="member">FMT_MAKE_STR_VALUE</ref>(const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;,<sp/>STRING)</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a0f2f1f6506ad63de82c05f55d0056d3d" kindref="member">FMT_MAKE_STR_VALUE</ref>(StringRef,<sp/>STRING)</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1abf0e2d842013f277ceae700cd6f6e747" kindref="member">FMT_MAKE_VALUE_</ref>(CStringRef,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.value,<sp/>CSTRING,<sp/>value.c_str())</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288" refid="format_8h_1aef24527160ce50a5b12d87ffd3b38cfe" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_MAKE_WSTR_VALUE(Type,<sp/>TYPE)<sp/>\</highlight></codeline>
<codeline lineno="1289"><highlight class="preprocessor"><sp/><sp/>MakeValue(typename<sp/>WCharHelper&lt;Type,<sp/>Char&gt;::Supported<sp/>value)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1290"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>set_string(value);<sp/>\</highlight></codeline>
<codeline lineno="1291"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1292"><highlight class="preprocessor"><sp/><sp/>static<sp/>uint64_t<sp/>type(Type)<sp/>{<sp/>return<sp/>Arg::TYPE;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1aef24527160ce50a5b12d87ffd3b38cfe" kindref="member">FMT_MAKE_WSTR_VALUE</ref>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*,<sp/>WSTRING)</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1aef24527160ce50a5b12d87ffd3b38cfe" kindref="member">FMT_MAKE_WSTR_VALUE</ref>(const<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*,<sp/>WSTRING)</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1aef24527160ce50a5b12d87ffd3b38cfe" kindref="member">FMT_MAKE_WSTR_VALUE</ref>(const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::wstring<sp/>&amp;,<sp/>WSTRING)</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1aef24527160ce50a5b12d87ffd3b38cfe" kindref="member">FMT_MAKE_WSTR_VALUE</ref>(WStringRef,<sp/>WSTRING)</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a05acd9bf561906ac7164ca5ea6a37177" kindref="member">FMT_MAKE_VALUE</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/><ref refid="glew_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>,<sp/>POINTER)</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a05acd9bf561906ac7164ca5ea6a37177" kindref="member">FMT_MAKE_VALUE</ref>(const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/>pointer,<sp/>POINTER)</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/>template<sp/>&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="1303" refid="classfmt_1_1internal_1_1_make_value_1a84e3301c4bda7c59a0d065462b4c7de5" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_make_value" kindref="compound">MakeValue</ref>(const<sp/>T<sp/>&amp;value,</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/><ref refid="structfmt_1_1internal_1_1_enable_if" kindref="compound">EnableIf</ref>&lt;<ref refid="structfmt_1_1internal_1_1_not" kindref="compound">Not</ref>&lt;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfmt_1_1internal_1_1_convert_to_int" kindref="compound">ConvertToInt</ref>&lt;T&gt;::value&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;::type<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/>custom.value<sp/>=<sp/>&amp;<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>custom.format<sp/>=<sp/>&amp;format_custom_arg&lt;T&gt;;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1311" refid="classfmt_1_1internal_1_1_make_value_1a7635061558249117606a4facce211b03" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_make_value_1a7635061558249117606a4facce211b03" kindref="member">MakeValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;value,</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_enable_if" kindref="compound">EnableIf</ref>&lt;<ref refid="structfmt_1_1internal_1_1_convert_to_int" kindref="compound">ConvertToInt&lt;T&gt;::value</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;::type<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/>int_value<sp/>=<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1317" refid="classfmt_1_1internal_1_1_make_value_1ada410611bcfef70448489daaf4b0e66a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="classfmt_1_1internal_1_1_make_value_1ada410611bcfef70448489daaf4b0e66a" kindref="member">type</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_convert_to_int" kindref="compound">ConvertToInt&lt;T&gt;::value</ref><sp/>?<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa6ab1b5ad31036f4c90bae16e873b3396" kindref="member">Arg::INT</ref><sp/>:<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaaeaa06f45cc1a466b789ae71d6d06d1b0" kindref="member">Arg::CUSTOM</ref>;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Additional<sp/>template<sp/>param<sp/>`Char_`<sp/>is<sp/>needed<sp/>here<sp/>because<sp/>make_type<sp/>always</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>uses<sp/>char.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char_&gt;</highlight></codeline>
<codeline lineno="1324" refid="classfmt_1_1internal_1_1_make_value_1a282289e2dd46a048c06d4994423e1fa4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_make_value_1a282289e2dd46a048c06d4994423e1fa4" kindref="member">MakeValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_named_arg" kindref="compound">NamedArg&lt;Char_&gt;</ref><sp/>&amp;value)<sp/>{<sp/><ref refid="glew_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref><sp/>=<sp/>&amp;<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char_&gt;</highlight></codeline>
<codeline lineno="1327" refid="classfmt_1_1internal_1_1_make_value_1a346c9fe85895cf679c651ec45e726a64" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="classfmt_1_1internal_1_1_make_value_1a346c9fe85895cf679c651ec45e726a64" kindref="member">type</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_named_arg" kindref="compound">NamedArg&lt;Char_&gt;</ref><sp/>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaaa9af5928e9c0951d7d4f644bc3cae639" kindref="member">Arg::NAMED_ARG</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1328"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Formatter&gt;</highlight></codeline>
<codeline lineno="1331" refid="classfmt_1_1internal_1_1_make_arg" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1internal_1_1_make_arg" kindref="compound">MakeArg</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">Arg</ref><sp/>{</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1333" refid="classfmt_1_1internal_1_1_make_arg_1af286ba71f5e8c524766ed1a2c2eff16b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_make_arg_1af286ba71f5e8c524766ed1a2c2eff16b" kindref="member">MakeArg</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa24ae26361d60b04790c06fffecaa7eda" kindref="member">Arg::NONE</ref>;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1338" refid="classfmt_1_1internal_1_1_make_arg_1a53625ddfa5c07dd9cfa516a5a70cc30f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_make_arg_1a53625ddfa5c07dd9cfa516a5a70cc30f" kindref="member">MakeArg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">Arg</ref>(<ref refid="classfmt_1_1internal_1_1_make_value" kindref="compound">MakeValue</ref>&lt;Formatter&gt;(value))<sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaa" kindref="member">Arg::Type</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classfmt_1_1internal_1_1_make_value_1a595ab8ee3b95d916881ffe40db3a13b0" kindref="member">MakeValue&lt;Formatter&gt;::type</ref>(value));</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1342"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_named_arg" kindref="compound">NamedArg</ref><sp/>:<sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">Arg</ref><sp/>{</highlight></codeline>
<codeline lineno="1346" refid="structfmt_1_1internal_1_1_named_arg_1ab2e3ffba4fa9df8122ed586134eac2c9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_string_ref" kindref="compound">BasicStringRef&lt;Char&gt;</ref><sp/><ref refid="structfmt_1_1internal_1_1_named_arg_1ab2e3ffba4fa9df8122ed586134eac2c9" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1349" refid="structfmt_1_1internal_1_1_named_arg_1a44557d139403597d7e4c73013f98db73" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1internal_1_1_named_arg_1a44557d139403597d7e4c73013f98db73" kindref="member">NamedArg</ref>(<ref refid="classfmt_1_1_basic_string_ref" kindref="compound">BasicStringRef&lt;Char&gt;</ref><sp/>argname,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">Arg</ref>(<ref refid="classfmt_1_1internal_1_1_make_arg" kindref="compound">MakeArg</ref>&lt;<sp/><ref refid="classfmt_1_1_basic_formatter" kindref="compound">BasicFormatter</ref>&lt;Char&gt;<sp/>&gt;(value)),<sp/>name(argname)<sp/>{}</highlight></codeline>
<codeline lineno="1351"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353" refid="classfmt_1_1internal_1_1_runtime_error" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1internal_1_1_runtime_error" kindref="compound">RuntimeError</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::runtime_error<sp/>{</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1355" refid="classfmt_1_1internal_1_1_runtime_error_1a993d2072c0263a749e09693cf6b645bd" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_runtime_error_1a993d2072c0263a749e09693cf6b645bd" kindref="member">RuntimeError</ref>()<sp/>:<sp/><ref refid="namespacestd" kindref="compound">std</ref>::runtime_error(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/>~<ref refid="classfmt_1_1internal_1_1_runtime_error" kindref="compound">RuntimeError</ref>()<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="1357"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="1360" refid="classfmt_1_1internal_1_1_arg_map" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1internal_1_1_arg_map" kindref="compound">ArgMap</ref>;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364" refid="classfmt_1_1_arg_list" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>{</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>reduce<sp/>compiled<sp/>code<sp/>size<sp/>per<sp/>formatting<sp/>function<sp/>call,<sp/>types<sp/>of<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MAX_PACKED_ARGS<sp/>arguments<sp/>are<sp/>passed<sp/>in<sp/>the<sp/>types_<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368" refid="classfmt_1_1_arg_list_1a00658012cbd32bdf4605595595058a1f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="classfmt_1_1_arg_list_1a00658012cbd32bdf4605595595058a1f" kindref="member">types_</ref>;</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>number<sp/>of<sp/>arguments<sp/>is<sp/>less<sp/>than<sp/>MAX_PACKED_ARGS,<sp/>the<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>values<sp/>are<sp/>stored<sp/>in<sp/>values_,<sp/>otherwise<sp/>they<sp/>are<sp/>stored<sp/>in<sp/>args_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>done<sp/>to<sp/>reduce<sp/>compiled<sp/>code<sp/>size<sp/>as<sp/>storing<sp/>larger<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>may<sp/>require<sp/>more<sp/>code<sp/>(at<sp/>least<sp/>on<sp/>x86-64)<sp/>even<sp/>if<sp/>the<sp/>same<sp/>amount<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>data<sp/>is<sp/>actually<sp/>copied<sp/>to<sp/>stack.<sp/>It<sp/>saves<sp/>~10%<sp/>on<sp/>the<sp/>bloat<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375" refid="classfmt_1_1_arg_list_1a6d6ebb19d3418bc3bbb01e242056feaa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value" kindref="compound">internal::Value</ref><sp/>*<ref refid="classfmt_1_1_arg_list_1a6d6ebb19d3418bc3bbb01e242056feaa" kindref="member">values_</ref>;</highlight></codeline>
<codeline lineno="1376" refid="classfmt_1_1_arg_list_1ab80aa26ffd7abd8f4dec943bdf11efc0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref><sp/>*<ref refid="classfmt_1_1_arg_list_1ab80aa26ffd7abd8f4dec943bdf11efc0" kindref="member">args_</ref>;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379" refid="classfmt_1_1_arg_list_1a1015fadc34dd0258eba1e7e64b8ec0ac" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaa" kindref="member">internal::Arg::Type</ref><sp/><ref refid="classfmt_1_1_arg_list_1a1015fadc34dd0258eba1e7e64b8ec0ac" kindref="member">type</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a57f14e05b1900f16a2da82ade47d0c6d" kindref="member">index</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/>index<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="glew_8h_1a7ea8e824401ae7ae3a0b6a56d768f559" kindref="member">mask</ref><sp/>=<sp/>0xf;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaa" kindref="member">internal::Arg::Type</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(types_<sp/>&amp;<sp/>(<ref refid="glew_8h_1a7ea8e824401ae7ae3a0b6a56d768f559" kindref="member">mask &lt;&lt; shift)) &gt;</ref>&gt;<sp/>shift);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="1387" refid="classfmt_1_1_arg_list_1a6e257e0433f829293f077ba81f205ab3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1internal_1_1_arg_map" kindref="compound">internal::ArgMap</ref>;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>number<sp/>of<sp/>arguments<sp/>with<sp/>packed<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391" refid="classfmt_1_1_arg_list_1a87b3fb5d620328ea293dff1e545ca6f0a0623031f26b6d8df9dc978c1e5a2bb16" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>MAX_PACKED_ARGS<sp/>=<sp/>16<sp/>};</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393" refid="classfmt_1_1_arg_list_1a101b2481cabed1199eeb4c98c9c18c4a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_arg_list_1a101b2481cabed1199eeb4c98c9c18c4a" kindref="member">ArgList</ref>()<sp/>:<sp/>types_(0)<sp/>{}</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395" refid="classfmt_1_1_arg_list_1a02125120a594f45fdad426ef003aa342" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_arg_list_1a02125120a594f45fdad426ef003aa342" kindref="member">ArgList</ref>(ULongLong<sp/><ref refid="glew_8h_1a4acc56c8d89f835adc106648c5d9f491" kindref="member">types</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value" kindref="compound">internal::Value</ref><sp/>*<ref refid="glew_8h_1a0aa8cf39c79d294b1d9f4daef5020bec" kindref="member">values</ref>)</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/>:<sp/>types_(types),<sp/>values_(values)<sp/>{}</highlight></codeline>
<codeline lineno="1397" refid="classfmt_1_1_arg_list_1ae811ca8034f8c88fe612e0d23ae810fe" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_arg_list_1ae811ca8034f8c88fe612e0d23ae810fe" kindref="member">ArgList</ref>(ULongLong<sp/><ref refid="glew_8h_1a4acc56c8d89f835adc106648c5d9f491" kindref="member">types</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref><sp/>*args)</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/>:<sp/>types_(types),<sp/>args_(args)<sp/>{}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401" refid="classfmt_1_1_arg_list_1ad2c2672388e003aa70d9c948ac8140cd" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref><sp/><ref refid="classfmt_1_1_arg_list_1ad2c2672388e003aa70d9c948ac8140cd" kindref="member">operator[]</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a57f14e05b1900f16a2da82ade47d0c6d" kindref="member">index</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref>;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">Arg</ref><sp/><ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_values<sp/>=<sp/><ref refid="glew_8h_1a8d78e2e8a676abd547a596dd84811285" kindref="member">type</ref>(MAX_PACKED_ARGS<sp/>-<sp/>1)<sp/>==<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa24ae26361d60b04790c06fffecaa7eda" kindref="member">Arg::NONE</ref>;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>MAX_PACKED_ARGS)<sp/>{</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaa" kindref="member">Arg::Type</ref><sp/>arg_type<sp/>=<sp/><ref refid="glew_8h_1a8d78e2e8a676abd547a596dd84811285" kindref="member">type</ref>(index);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfmt_1_1internal_1_1_value" kindref="compound">internal::Value</ref><sp/>&amp;<ref refid="glew_8h_1a26942fd2ed566ef553eae82d2c109c8f" kindref="member">val</ref><sp/>=<sp/><ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg_type<sp/>!=<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa24ae26361d60b04790c06fffecaa7eda" kindref="member">Arg::NONE</ref>)</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>use_values<sp/>?<sp/>values_[<ref refid="glew_8h_1a57f14e05b1900f16a2da82ade47d0c6d" kindref="member">index</ref>]<sp/>:<sp/>args_[<ref refid="glew_8h_1a57f14e05b1900f16a2da82ade47d0c6d" kindref="member">index</ref>];</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="structfmt_1_1internal_1_1_arg_1af1165b4e8647bea5913922de82599e2e" kindref="member">type</ref><sp/>=<sp/>arg_type;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_values)<sp/>{</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>index<sp/>is<sp/>greater<sp/>than<sp/>the<sp/>number<sp/>of<sp/>arguments<sp/>that<sp/>can<sp/>be<sp/>stored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>values,<sp/>so<sp/>return<sp/>a<sp/>&quot;none&quot;<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="structfmt_1_1internal_1_1_arg_1af1165b4e8647bea5913922de82599e2e" kindref="member">type</ref><sp/>=<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa24ae26361d60b04790c06fffecaa7eda" kindref="member">Arg::NONE</ref>;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>MAX_PACKED_ARGS;<sp/>i<sp/>&lt;=<sp/><ref refid="glew_8h_1a57f14e05b1900f16a2da82ade47d0c6d" kindref="member">index</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args_[i].type<sp/>==<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa24ae26361d60b04790c06fffecaa7eda" kindref="member">Arg::NONE</ref>)</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>args_[i];</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>args_[<ref refid="glew_8h_1a57f14e05b1900f16a2da82ade47d0c6d" kindref="member">index</ref>];</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1425"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight></codeline>
<codeline lineno="1427" refid="format_8h_1a9a003951252892f923664ed197381349" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_DISPATCH(call)<sp/>static_cast&lt;Impl*&gt;(this)-&gt;call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Impl,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Result&gt;</highlight></codeline>
<codeline lineno="1454" refid="classfmt_1_1_arg_visitor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1_arg_visitor" kindref="compound">ArgVisitor</ref><sp/>{</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1456" refid="classfmt_1_1_arg_visitor_1a0c449cbfe28adabed8b68be3cdf4e05b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref><sp/><ref refid="classfmt_1_1_arg_visitor_1a0c449cbfe28adabed8b68be3cdf4e05b" kindref="member">Arg</ref>;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1459" refid="classfmt_1_1_arg_visitor_1a130090f53213407548d93d8ee2801738" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_arg_visitor_1a130090f53213407548d93d8ee2801738" kindref="member">report_unhandled_arg</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461" refid="classfmt_1_1_arg_visitor_1a8de54a54b863eb63b5c45c4495c12793" refkind="member"><highlight class="normal"><sp/><sp/>Result<sp/><ref refid="classfmt_1_1_arg_visitor_1a8de54a54b863eb63b5c45c4495c12793" kindref="member">visit_unhandled_arg</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(report_unhandled_arg());</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result();</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight></codeline>
<codeline lineno="1467" refid="classfmt_1_1_arg_visitor_1ac6d79e3d931a9f56f40bca08f8651cdf" refkind="member"><highlight class="normal"><sp/><sp/>Result<sp/><ref refid="classfmt_1_1_arg_visitor_1ac6d79e3d931a9f56f40bca08f8651cdf" kindref="member">visit_int</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_any_int(value));</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1472" refid="classfmt_1_1_arg_visitor_1ab5687cccaae516d3e6e94775737ff798" refkind="member"><highlight class="normal"><sp/><sp/>Result<sp/><ref refid="classfmt_1_1_arg_visitor_1ab5687cccaae516d3e6e94775737ff798" kindref="member">visit_long_long</ref>(LongLong<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_any_int(value));</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1477" refid="classfmt_1_1_arg_visitor_1a51494a02bd4573280fc1cc6fc921f871" refkind="member"><highlight class="normal"><sp/><sp/>Result<sp/><ref refid="classfmt_1_1_arg_visitor_1a51494a02bd4573280fc1cc6fc921f871" kindref="member">visit_uint</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_any_int(value));</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482" refid="classfmt_1_1_arg_visitor_1ac4424926e9c138b3503039d91c18c087" refkind="member"><highlight class="normal"><sp/><sp/>Result<sp/><ref refid="classfmt_1_1_arg_visitor_1ac4424926e9c138b3503039d91c18c087" kindref="member">visit_ulong_long</ref>(ULongLong<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_any_int(value));</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487" refid="classfmt_1_1_arg_visitor_1ad3013b580959ecbfaae97f29a35964ae" refkind="member"><highlight class="normal"><sp/><sp/>Result<sp/><ref refid="classfmt_1_1_arg_visitor_1ad3013b580959ecbfaae97f29a35964ae" kindref="member">visit_bool</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_any_int(value));</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1492" refid="classfmt_1_1_arg_visitor_1ad635596afa3cd1e4983db071f045dabd" refkind="member"><highlight class="normal"><sp/><sp/>Result<sp/><ref refid="classfmt_1_1_arg_visitor_1ad635596afa3cd1e4983db071f045dabd" kindref="member">visit_char</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_any_int(value));</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1498" refid="classfmt_1_1_arg_visitor_1a5e33c073c34ca49a6f1dd82181e2d98f" refkind="member"><highlight class="normal"><sp/><sp/>Result<sp/><ref refid="classfmt_1_1_arg_visitor_1a5e33c073c34ca49a6f1dd82181e2d98f" kindref="member">visit_any_int</ref>(T)<sp/>{</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_unhandled_arg());</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503" refid="classfmt_1_1_arg_visitor_1a2a7a4cbb1df7a8b3c310a607600773ae" refkind="member"><highlight class="normal"><sp/><sp/>Result<sp/><ref refid="classfmt_1_1_arg_visitor_1a2a7a4cbb1df7a8b3c310a607600773ae" kindref="member">visit_double</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_any_double(value));</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight></codeline>
<codeline lineno="1508" refid="classfmt_1_1_arg_visitor_1aa0b2e1792ff7e62d1a49a3118d3c10db" refkind="member"><highlight class="normal"><sp/><sp/>Result<sp/><ref refid="classfmt_1_1_arg_visitor_1aa0b2e1792ff7e62d1a49a3118d3c10db" kindref="member">visit_long_double</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_any_double(value));</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1514" refid="classfmt_1_1_arg_visitor_1a9a2cdc09adb9783cddb2548691e6720c" refkind="member"><highlight class="normal"><sp/><sp/>Result<sp/><ref refid="classfmt_1_1_arg_visitor_1a9a2cdc09adb9783cddb2548691e6720c" kindref="member">visit_any_double</ref>(T)<sp/>{</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_unhandled_arg());</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight></codeline>
<codeline lineno="1519" refid="classfmt_1_1_arg_visitor_1a6a91a7125820563502f1f5bb7a8c85be" refkind="member"><highlight class="normal"><sp/><sp/>Result<sp/><ref refid="classfmt_1_1_arg_visitor_1a6a91a7125820563502f1f5bb7a8c85be" kindref="member">visit_cstring</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>{</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_unhandled_arg());</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524" refid="classfmt_1_1_arg_visitor_1ac39e46583b36900aa8df8e533648cf99" refkind="member"><highlight class="normal"><sp/><sp/>Result<sp/><ref refid="classfmt_1_1_arg_visitor_1ac39e46583b36900aa8df8e533648cf99" kindref="member">visit_string</ref>(<ref refid="structfmt_1_1internal_1_1_value_1_1_string_value" kindref="compound">Arg::StringValue&lt;char&gt;</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_unhandled_arg());</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1529" refid="classfmt_1_1_arg_visitor_1abd76337375076717e6089763dcfb1ad0" refkind="member"><highlight class="normal"><sp/><sp/>Result<sp/><ref refid="classfmt_1_1_arg_visitor_1abd76337375076717e6089763dcfb1ad0" kindref="member">visit_wstring</ref>(<ref refid="structfmt_1_1internal_1_1_value_1_1_string_value" kindref="compound">Arg::StringValue&lt;wchar_t&gt;</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_unhandled_arg());</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1534" refid="classfmt_1_1_arg_visitor_1a80e62b2dcd7e7e38208a4863826ec731" refkind="member"><highlight class="normal"><sp/><sp/>Result<sp/><ref refid="classfmt_1_1_arg_visitor_1a80e62b2dcd7e7e38208a4863826ec731" kindref="member">visit_pointer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>{</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_unhandled_arg());</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight></codeline>
<codeline lineno="1539" refid="classfmt_1_1_arg_visitor_1a19a38c25e9c45f9c6a6674f7dfaf3759" refkind="member"><highlight class="normal"><sp/><sp/>Result<sp/><ref refid="classfmt_1_1_arg_visitor_1a19a38c25e9c45f9c6a6674f7dfaf3759" kindref="member">visit_custom</ref>(<ref refid="structfmt_1_1internal_1_1_value_1_1_custom_value" kindref="compound">Arg::CustomValue</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_unhandled_arg());</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight></codeline>
<codeline lineno="1551" refid="classfmt_1_1_arg_visitor_1a19a979776fc789baaf038ab216e245bb" refkind="member"><highlight class="normal"><sp/><sp/>Result<sp/><ref refid="classfmt_1_1_arg_visitor_1a19a979776fc789baaf038ab216e245bb" kindref="member">visit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Arg<sp/>&amp;<ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(arg.<ref refid="structfmt_1_1internal_1_1_arg_1af1165b4e8647bea5913922de82599e2e" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa24ae26361d60b04790c06fffecaa7eda" kindref="member">Arg::NONE</ref>:</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaaa9af5928e9c0951d7d4f644bc3cae639" kindref="member">Arg::NAMED_ARG</ref>:</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8h_1a03e7ee720f43adc7d83c652a6a5dd5f8" kindref="member">FMT_ASSERT</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>argument<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa6ab1b5ad31036f4c90bae16e873b3396" kindref="member">Arg::INT</ref>:</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_int(arg.<ref refid="structfmt_1_1internal_1_1_value_1ac295b81747c26b97893be505a03381c8" kindref="member">int_value</ref>));</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaac7303224391053ae45d4ff13ad0f017c" kindref="member">Arg::UINT</ref>:</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_uint(arg.<ref refid="structfmt_1_1internal_1_1_value_1a9ced917767812c9572065509f22bec18" kindref="member">uint_value</ref>));</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa7674f34a96c22fec85d9f27d082b4412" kindref="member">Arg::LONG_LONG</ref>:</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_long_long(arg.<ref refid="structfmt_1_1internal_1_1_value_1a1dab8b1df1f88c35b6893d63b1b72af8" kindref="member">long_long_value</ref>));</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa8c2ffe6909d26d46781aa6fb9b8ae418" kindref="member">Arg::ULONG_LONG</ref>:</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_ulong_long(arg.<ref refid="structfmt_1_1internal_1_1_value_1a78424f46c0150190010e5c27ec3c69a0" kindref="member">ulong_long_value</ref>));</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa90eda0110259ca26e06430e5f7d7f36b" kindref="member">Arg::BOOL</ref>:</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_bool(arg.<ref refid="structfmt_1_1internal_1_1_value_1ac295b81747c26b97893be505a03381c8" kindref="member">int_value</ref><sp/>!=<sp/>0));</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa4000e36300596c89b956b964a23114e0" kindref="member">Arg::CHAR</ref>:</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_char(arg.<ref refid="structfmt_1_1internal_1_1_value_1ac295b81747c26b97893be505a03381c8" kindref="member">int_value</ref>));</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa61e214d7127ba18d3b0d7b4c0d5f09aa" kindref="member">Arg::DOUBLE</ref>:</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_double(arg.<ref refid="structfmt_1_1internal_1_1_value_1afe6725f2c3ad8fce5867f824c1fa8cc8" kindref="member">double_value</ref>));</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa6578a997089147df95c66231c936c43c" kindref="member">Arg::LONG_DOUBLE</ref>:</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_long_double(arg.<ref refid="structfmt_1_1internal_1_1_value_1a7adfb34f6e0b12676681de8a6597ed17" kindref="member">long_double_value</ref>));</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaae36ce7cc208b872c5c43ccb2ae8795a2" kindref="member">Arg::CSTRING</ref>:</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_cstring(arg.<ref refid="structfmt_1_1internal_1_1_value_1a98e3f2f8c44a6d6d4606646e5ef62e0a" kindref="member">string</ref>.<ref refid="structfmt_1_1internal_1_1_value_1_1_string_value_1a5fcfe566f56e4bbf08748303cd7fa6ca" kindref="member">value</ref>));</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa167cb315c368dd357a390431477ea049" kindref="member">Arg::STRING</ref>:</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_string(arg.<ref refid="structfmt_1_1internal_1_1_value_1a98e3f2f8c44a6d6d4606646e5ef62e0a" kindref="member">string</ref>));</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaae94c5eaf7d9283c167bd88765c18b82c" kindref="member">Arg::WSTRING</ref>:</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_wstring(arg.<ref refid="structfmt_1_1internal_1_1_value_1a2add0d3534ad850a089ba4ed0f60b9d8" kindref="member">wstring</ref>));</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaaaaa373dcb5378f0ec6cd6e4dc59a8cfb" kindref="member">Arg::POINTER</ref>:</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_pointer(arg.<ref refid="structfmt_1_1internal_1_1_value_1a3627bcfa0a5bcb7e48f6fc632243b17d" kindref="member">pointer</ref>));</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaaeaa06f45cc1a466b789ae71d6d06d1b0" kindref="member">Arg::CUSTOM</ref>:</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="format_8h_1a9a003951252892f923664ed197381349" kindref="member">FMT_DISPATCH</ref>(visit_custom(arg.<ref refid="structfmt_1_1internal_1_1_value_1a2dcff1e0ac8f7fb7fc6dd448d66978cf" kindref="member">custom</ref>));</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result();</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1586"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight></codeline>
<codeline lineno="1588" refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2" kindref="member">Alignment</ref><sp/>{</highlight></codeline>
<codeline lineno="1589" refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2ab4ab67c39e6d8562a116f3da83de391a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2a63e66a16a075b0b22e5fae027892057f" kindref="member">ALIGN_DEFAULT</ref>,<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2a37d3391e09dceceb0e75094f691b02eb" kindref="member">ALIGN_LEFT</ref>,<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2ab4ab67c39e6d8562a116f3da83de391a" kindref="member">ALIGN_RIGHT</ref>,<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2ab9fa8e7eb41061a7670d4d8b43007f23" kindref="member">ALIGN_CENTER</ref>,<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2a93f62fb67b1cbabf62cab3185bb5f4e3" kindref="member">ALIGN_NUMERIC</ref></highlight></codeline>
<codeline lineno="1590"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Flags.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1594" refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea41bce447447361e7a4b3e9d8a84877db" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea41bce447447361e7a4b3e9d8a84877db" kindref="member">SIGN_FLAG</ref><sp/>=<sp/>1,<sp/><ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea2b053d8fd806a73492750893f902a694" kindref="member">PLUS_FLAG</ref><sp/>=<sp/>2,<sp/><ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbeafc86655957d3b777b4c87eeb32250bc4" kindref="member">MINUS_FLAG</ref><sp/>=<sp/>4,<sp/><ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea02280924fe002ad252cfbcc0cf6492aa" kindref="member">HASH_FLAG</ref><sp/>=<sp/>8,</highlight></codeline>
<codeline lineno="1595" refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea59699c6d9db5a05403ebc3528e5f0694" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea59699c6d9db5a05403ebc3528e5f0694" kindref="member">CHAR_FLAG</ref><sp/>=<sp/>0x10<sp/><sp/></highlight><highlight class="comment">//<sp/>Argument<sp/>has<sp/>char<sp/>type<sp/>-<sp/>used<sp/>in<sp/>error<sp/>reporting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>empty<sp/>format<sp/>specifier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1599" refid="structfmt_1_1_empty_spec" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1_empty_spec" kindref="compound">EmptySpec</ref><sp/>{};</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>type<sp/>specifier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>TYPE&gt;</highlight></codeline>
<codeline lineno="1603" refid="structfmt_1_1_type_spec" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1_type_spec" kindref="compound">TypeSpec</ref><sp/>:<sp/><ref refid="structfmt_1_1_empty_spec" kindref="compound">EmptySpec</ref><sp/>{</highlight></codeline>
<codeline lineno="1604" refid="structfmt_1_1_type_spec_1a0914257da0a346d13c256f345a6563ad" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2" kindref="member">Alignment</ref><sp/><ref refid="structfmt_1_1_type_spec_1a0914257da0a346d13c256f345a6563ad" kindref="member">align</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2a63e66a16a075b0b22e5fae027892057f" kindref="member">ALIGN_DEFAULT</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1605" refid="structfmt_1_1_type_spec_1a469e31c7122bcd1694efb2ccbb815e34" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_type_spec_1a469e31c7122bcd1694efb2ccbb815e34" kindref="member">width</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1606" refid="structfmt_1_1_type_spec_1afa2ebf8c366ef48eea339653afc67c2c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_type_spec_1afa2ebf8c366ef48eea339653afc67c2c" kindref="member">precision</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/>}</highlight></codeline>
<codeline lineno="1607" refid="structfmt_1_1_type_spec_1af1cda506b61e726ffef16da053674df3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_type_spec_1af1cda506b61e726ffef16da053674df3" kindref="member">flag</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1608" refid="structfmt_1_1_type_spec_1aa76b699cfca958d608bf1769f166ffee" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_type_spec_1aa76b699cfca958d608bf1769f166ffee" kindref="member">type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TYPE;<sp/>}</highlight></codeline>
<codeline lineno="1609" refid="structfmt_1_1_type_spec_1a51370a8d335e7896800ac510525c648a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_type_spec_1a51370a8d335e7896800ac510525c648a" kindref="member">fill</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1610"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>width<sp/>specifier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1613" refid="structfmt_1_1_width_spec" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1_width_spec" kindref="compound">WidthSpec</ref><sp/>{</highlight></codeline>
<codeline lineno="1614" refid="structfmt_1_1_width_spec_1a83fed5d5a674ea54a48feb6edef4c1c7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_width_spec_1a83fed5d5a674ea54a48feb6edef4c1c7" kindref="member">width_</ref>;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>is<sp/>always<sp/>wchar_t<sp/>and<sp/>cast<sp/>to<sp/>char<sp/>if<sp/>necessary<sp/>to<sp/>avoid<sp/>having</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>two<sp/>specialization<sp/>of<sp/>WidthSpec<sp/>and<sp/>its<sp/>subclasses.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617" refid="structfmt_1_1_width_spec_1ad1c9740afb2b05c4ac7b2d9fa9760891" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_width_spec_1ad1c9740afb2b05c4ac7b2d9fa9760891" kindref="member">fill_</ref>;</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight></codeline>
<codeline lineno="1619" refid="structfmt_1_1_width_spec_1a483e63eb1ac98bbdaacc701be5f3cc82" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1_width_spec_1a483e63eb1ac98bbdaacc701be5f3cc82" kindref="member">WidthSpec</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1aa105b18f96e6bc2485cb7f576a7fb9ba" kindref="member">width</ref>,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>fill)<sp/>:<sp/>width_(width),<sp/>fill_(fill)<sp/>{}</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight></codeline>
<codeline lineno="1621" refid="structfmt_1_1_width_spec_1ad6624ee681712f695f133ba2e9d9ce36" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_width_spec_1ad6624ee681712f695f133ba2e9d9ce36" kindref="member">width</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>width_;<sp/>}</highlight></codeline>
<codeline lineno="1622" refid="structfmt_1_1_width_spec_1a28a9b78a0ebfd5830025eaf1c917bb16" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_width_spec_1a28a9b78a0ebfd5830025eaf1c917bb16" kindref="member">fill</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fill_;<sp/>}</highlight></codeline>
<codeline lineno="1623"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>alignment<sp/>specifier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1626" refid="structfmt_1_1_align_spec" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1_align_spec" kindref="compound">AlignSpec</ref><sp/>:<sp/><ref refid="structfmt_1_1_width_spec" kindref="compound">WidthSpec</ref><sp/>{</highlight></codeline>
<codeline lineno="1627" refid="structfmt_1_1_align_spec_1aac93fb3829d550af86479f1ecaa73f95" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2" kindref="member">Alignment</ref><sp/><ref refid="structfmt_1_1_align_spec_1aac93fb3829d550af86479f1ecaa73f95" kindref="member">align_</ref>;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629" refid="structfmt_1_1_align_spec_1a7912b22ed62be96be0b9088b629f728c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1_align_spec_1a7912b22ed62be96be0b9088b629f728c" kindref="member">AlignSpec</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1aa105b18f96e6bc2485cb7f576a7fb9ba" kindref="member">width</ref>,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>fill,<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2" kindref="member">Alignment</ref><sp/>align<sp/>=<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2a63e66a16a075b0b22e5fae027892057f" kindref="member">ALIGN_DEFAULT</ref>)</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="structfmt_1_1_width_spec" kindref="compound">WidthSpec</ref>(width,<sp/>fill),<sp/>align_(align)<sp/>{}</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight></codeline>
<codeline lineno="1632" refid="structfmt_1_1_align_spec_1abd14faffccf107e6e01bbd014e69262c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2" kindref="member">Alignment</ref><sp/><ref refid="structfmt_1_1_align_spec_1abd14faffccf107e6e01bbd014e69262c" kindref="member">align</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>align_;<sp/>}</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight></codeline>
<codeline lineno="1634" refid="structfmt_1_1_align_spec_1acdcb20e3a29b69355825ece5886db27b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_align_spec_1acdcb20e3a29b69355825ece5886db27b" kindref="member">precision</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/>}</highlight></codeline>
<codeline lineno="1635"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>alignment<sp/>and<sp/>type<sp/>specifier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>TYPE&gt;</highlight></codeline>
<codeline lineno="1639" refid="structfmt_1_1_align_type_spec" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1_align_type_spec" kindref="compound">AlignTypeSpec</ref><sp/>:<sp/><ref refid="structfmt_1_1_align_spec" kindref="compound">AlignSpec</ref><sp/>{</highlight></codeline>
<codeline lineno="1640" refid="structfmt_1_1_align_type_spec_1a8140ef8fb8153a445ab7975fa2c30525" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1_align_type_spec_1a8140ef8fb8153a445ab7975fa2c30525" kindref="member">AlignTypeSpec</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1aa105b18f96e6bc2485cb7f576a7fb9ba" kindref="member">width</ref>,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>fill)<sp/>:<sp/><ref refid="structfmt_1_1_align_spec" kindref="compound">AlignSpec</ref>(width,<sp/>fill)<sp/>{}</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight></codeline>
<codeline lineno="1642" refid="structfmt_1_1_align_type_spec_1a20ab6ad809a76ea55d6f118526c25112" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_align_type_spec_1a20ab6ad809a76ea55d6f118526c25112" kindref="member">flag</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1643" refid="structfmt_1_1_align_type_spec_1a15b451abb3309bcca720895faa320fe3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_align_type_spec_1a15b451abb3309bcca720895faa320fe3" kindref="member">type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TYPE;<sp/>}</highlight></codeline>
<codeline lineno="1644"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>full<sp/>format<sp/>specifier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647" refid="structfmt_1_1_format_spec" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1_format_spec" kindref="compound">FormatSpec</ref><sp/>:<sp/><ref refid="structfmt_1_1_align_spec" kindref="compound">AlignSpec</ref><sp/>{</highlight></codeline>
<codeline lineno="1648" refid="structfmt_1_1_format_spec_1a9fbd00ed2b8e3b96eaa2beb54aff641e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_format_spec_1a9fbd00ed2b8e3b96eaa2beb54aff641e" kindref="member">flags_</ref>;</highlight></codeline>
<codeline lineno="1649" refid="structfmt_1_1_format_spec_1a8444724bdd0a55bf3226a17e321c12c5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_format_spec_1a8444724bdd0a55bf3226a17e321c12c5" kindref="member">precision_</ref>;</highlight></codeline>
<codeline lineno="1650" refid="structfmt_1_1_format_spec_1aa6f085ef583f708dde9636c03adea6ab" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_format_spec_1aa6f085ef583f708dde9636c03adea6ab" kindref="member">type_</ref>;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight></codeline>
<codeline lineno="1652" refid="structfmt_1_1_format_spec_1a6a434aa4ea0d694e10b079b4e52ffe97" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1_format_spec_1a6a434aa4ea0d694e10b079b4e52ffe97" kindref="member">FormatSpec</ref>(</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1aa105b18f96e6bc2485cb7f576a7fb9ba" kindref="member">width</ref><sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>fill<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="structfmt_1_1_align_spec" kindref="compound">AlignSpec</ref>(<ref refid="glew_8h_1aa105b18f96e6bc2485cb7f576a7fb9ba" kindref="member">width</ref>,<sp/>fill),<sp/>flags_(0),<sp/>precision_(-1),<sp/>type_(type)<sp/>{}</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656" refid="structfmt_1_1_format_spec_1a2ee0e9bf9979641418a8b30b4e7740f2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_format_spec_1a2ee0e9bf9979641418a8b30b4e7740f2" kindref="member">flag</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(flags_<sp/>&amp;<sp/>f)<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1657" refid="structfmt_1_1_format_spec_1a4d48f0000dc495b3cc1c6f222e2036a9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_format_spec_1a4d48f0000dc495b3cc1c6f222e2036a9" kindref="member">precision</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>precision_;<sp/>}</highlight></codeline>
<codeline lineno="1658" refid="structfmt_1_1_format_spec_1a4da20f7a988a694ce02f01d1ffb3d783" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_format_spec_1a4da20f7a988a694ce02f01d1ffb3d783" kindref="member">type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_;<sp/>}</highlight></codeline>
<codeline lineno="1659"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>integer<sp/>format<sp/>specifier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SpecT<sp/>=<sp/>TypeSpec&lt;0&gt;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1663" refid="classfmt_1_1_int_format_spec" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1_int_format_spec" kindref="compound">IntFormatSpec</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>SpecT<sp/>{</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1665" refid="classfmt_1_1_int_format_spec_1acf8ae72d585c979fe69fdd5b5b102773" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="classfmt_1_1_int_format_spec_1acf8ae72d585c979fe69fdd5b5b102773" kindref="member">value_</ref>;</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1668" refid="classfmt_1_1_int_format_spec_1ab3ddcce25115287cbd61e228076d9d8d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_int_format_spec_1ab3ddcce25115287cbd61e228076d9d8d" kindref="member">IntFormatSpec</ref>(T<sp/><ref refid="glew_8h_1a26942fd2ed566ef553eae82d2c109c8f" kindref="member">val</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SpecT<sp/>&amp;spec<sp/>=<sp/>SpecT())</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/>:<sp/>SpecT(spec),<sp/>value_(val)<sp/>{}</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1671" refid="classfmt_1_1_int_format_spec_1a8d78e074d34780590a4d209e3601947d" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="classfmt_1_1_int_format_spec_1a8d78e074d34780590a4d209e3601947d" kindref="member">value</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="1672"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>string<sp/>format<sp/>specifier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="1676" refid="classfmt_1_1_str_format_spec" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1_str_format_spec" kindref="compound">StrFormatSpec</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_align_spec" kindref="compound">AlignSpec</ref><sp/>{</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1678" refid="classfmt_1_1_str_format_spec_1a519b15bfa1afa691e2c0106fa9281169" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*<ref refid="classfmt_1_1_str_format_spec_1a519b15bfa1afa691e2c0106fa9281169" kindref="member">str_</ref>;</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FillChar&gt;</highlight></codeline>
<codeline lineno="1682" refid="classfmt_1_1_str_format_spec_1a14c888235db04ee0b81197aaccf0a124" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_str_format_spec_1a14c888235db04ee0b81197aaccf0a124" kindref="member">StrFormatSpec</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*str,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1aa105b18f96e6bc2485cb7f576a7fb9ba" kindref="member">width</ref>,<sp/>FillChar<sp/>fill)</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="structfmt_1_1_align_spec" kindref="compound">AlignSpec</ref>(width,<sp/>fill),<sp/>str_(str)<sp/>{</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1a61ae1bd2ba7d7666274927320c138283" kindref="member">internal::CharTraits&lt;Char&gt;::convert</ref>(FillChar());</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight></codeline>
<codeline lineno="1687" refid="classfmt_1_1_str_format_spec_1a58da4d50f18458f703dece272f06bda3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*<ref refid="classfmt_1_1_str_format_spec_1a58da4d50f18458f703dece272f06bda3" kindref="member">str</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str_;<sp/>}</highlight></codeline>
<codeline lineno="1688"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><ref refid="classfmt_1_1_int_format_spec" kindref="compound">IntFormatSpec&lt;int, TypeSpec&lt;&apos;b&apos;&gt;</ref><sp/>&gt;<sp/><ref refid="namespacefmt_1a73baa9bfe9b6f660313ca71317a241bc" kindref="member">bin</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><ref refid="classfmt_1_1_int_format_spec" kindref="compound">IntFormatSpec&lt;int, TypeSpec&lt;&apos;o&apos;&gt;</ref><sp/>&gt;<sp/><ref refid="namespacefmt_1a2d84223df5715510de007ff274cd6c3d" kindref="member">oct</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><ref refid="classfmt_1_1_int_format_spec" kindref="compound">IntFormatSpec&lt;int, TypeSpec&lt;&apos;x&apos;&gt;</ref><sp/>&gt;<sp/><ref refid="namespacefmt_1aed8f2728309382ece798b4666722af7a" kindref="member">hex</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><ref refid="classfmt_1_1_int_format_spec" kindref="compound">IntFormatSpec&lt;int, TypeSpec&lt;&apos;X&apos;&gt;</ref><sp/>&gt;<sp/><ref refid="namespacefmt_1a992ca088208c70c6625468d3d5248f38" kindref="member">hexu</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>TYPE_CODE,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><ref refid="classfmt_1_1_int_format_spec" kindref="compound">IntFormatSpec&lt;int, AlignTypeSpec&lt;TYPE_CODE&gt;</ref>,<sp/>Char&gt;<sp/><ref refid="namespacefmt_1a48d6010061d1710d807853ad9125d825" kindref="member">pad</ref>(</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1aa105b18f96e6bc2485cb7f576a7fb9ba" kindref="member">width</ref>,<sp/>Char<sp/>fill<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight></codeline>
<codeline lineno="1730" refid="format_8h_1a435fd66d1fbca043c2da3188040f6f23" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_DEFINE_INT_FORMATTERS(TYPE)<sp/>\</highlight></codeline>
<codeline lineno="1731"><highlight class="preprocessor">inline<sp/>IntFormatSpec&lt;TYPE,<sp/>TypeSpec&lt;&apos;b&apos;&gt;<sp/>&gt;<sp/>bin(TYPE<sp/>value)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1732"><highlight class="preprocessor"><sp/><sp/>return<sp/>IntFormatSpec&lt;TYPE,<sp/>TypeSpec&lt;&apos;b&apos;&gt;<sp/>&gt;(value,<sp/>TypeSpec&lt;&apos;b&apos;&gt;());<sp/>\</highlight></codeline>
<codeline lineno="1733"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="1734"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="1735"><highlight class="preprocessor">inline<sp/>IntFormatSpec&lt;TYPE,<sp/>TypeSpec&lt;&apos;o&apos;&gt;<sp/>&gt;<sp/>oct(TYPE<sp/>value)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1736"><highlight class="preprocessor"><sp/><sp/>return<sp/>IntFormatSpec&lt;TYPE,<sp/>TypeSpec&lt;&apos;o&apos;&gt;<sp/>&gt;(value,<sp/>TypeSpec&lt;&apos;o&apos;&gt;());<sp/>\</highlight></codeline>
<codeline lineno="1737"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="1738"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="1739"><highlight class="preprocessor">inline<sp/>IntFormatSpec&lt;TYPE,<sp/>TypeSpec&lt;&apos;x&apos;&gt;<sp/>&gt;<sp/>hex(TYPE<sp/>value)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1740"><highlight class="preprocessor"><sp/><sp/>return<sp/>IntFormatSpec&lt;TYPE,<sp/>TypeSpec&lt;&apos;x&apos;&gt;<sp/>&gt;(value,<sp/>TypeSpec&lt;&apos;x&apos;&gt;());<sp/>\</highlight></codeline>
<codeline lineno="1741"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="1742"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="1743"><highlight class="preprocessor">inline<sp/>IntFormatSpec&lt;TYPE,<sp/>TypeSpec&lt;&apos;X&apos;&gt;<sp/>&gt;<sp/>hexu(TYPE<sp/>value)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1744"><highlight class="preprocessor"><sp/><sp/>return<sp/>IntFormatSpec&lt;TYPE,<sp/>TypeSpec&lt;&apos;X&apos;&gt;<sp/>&gt;(value,<sp/>TypeSpec&lt;&apos;X&apos;&gt;());<sp/>\</highlight></codeline>
<codeline lineno="1745"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="1746"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="1747"><highlight class="preprocessor">template<sp/>&lt;char<sp/>TYPE_CODE&gt;<sp/>\</highlight></codeline>
<codeline lineno="1748"><highlight class="preprocessor">inline<sp/>IntFormatSpec&lt;TYPE,<sp/>AlignTypeSpec&lt;TYPE_CODE&gt;<sp/>&gt;<sp/>pad(<sp/>\</highlight></codeline>
<codeline lineno="1749"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IntFormatSpec&lt;TYPE,<sp/>TypeSpec&lt;TYPE_CODE&gt;<sp/>&gt;<sp/>f,<sp/>unsigned<sp/>width)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1750"><highlight class="preprocessor"><sp/><sp/>return<sp/>IntFormatSpec&lt;TYPE,<sp/>AlignTypeSpec&lt;TYPE_CODE&gt;<sp/>&gt;(<sp/>\</highlight></codeline>
<codeline lineno="1751"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>f.value(),<sp/>AlignTypeSpec&lt;TYPE_CODE&gt;(width,<sp/>&apos;<sp/>&apos;));<sp/>\</highlight></codeline>
<codeline lineno="1752"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="1753"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="1754"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>For<sp/>compatibility<sp/>with<sp/>older<sp/>compilers<sp/>we<sp/>provide<sp/>two<sp/>overloads<sp/>for<sp/>pad,<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="1755"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>one<sp/>that<sp/>takes<sp/>a<sp/>fill<sp/>character<sp/>and<sp/>one<sp/>that<sp/>doesn&apos;t.<sp/>In<sp/>the<sp/>future<sp/>this<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="1756"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>can<sp/>be<sp/>replaced<sp/>with<sp/>one<sp/>overload<sp/>making<sp/>the<sp/>template<sp/>argument<sp/>Char<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="1757"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>default<sp/>to<sp/>char<sp/>(C++11).<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="1758"><highlight class="preprocessor">template<sp/>&lt;char<sp/>TYPE_CODE,<sp/>typename<sp/>Char&gt;<sp/>\</highlight></codeline>
<codeline lineno="1759"><highlight class="preprocessor">inline<sp/>IntFormatSpec&lt;TYPE,<sp/>AlignTypeSpec&lt;TYPE_CODE&gt;,<sp/>Char&gt;<sp/>pad(<sp/>\</highlight></codeline>
<codeline lineno="1760"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IntFormatSpec&lt;TYPE,<sp/>TypeSpec&lt;TYPE_CODE&gt;,<sp/>Char&gt;<sp/>f,<sp/>\</highlight></codeline>
<codeline lineno="1761"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>unsigned<sp/>width,<sp/>Char<sp/>fill)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1762"><highlight class="preprocessor"><sp/><sp/>return<sp/>IntFormatSpec&lt;TYPE,<sp/>AlignTypeSpec&lt;TYPE_CODE&gt;,<sp/>Char&gt;(<sp/>\</highlight></codeline>
<codeline lineno="1763"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>f.value(),<sp/>AlignTypeSpec&lt;TYPE_CODE&gt;(width,<sp/>fill));<sp/>\</highlight></codeline>
<codeline lineno="1764"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="1765"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="1766"><highlight class="preprocessor">inline<sp/>IntFormatSpec&lt;TYPE,<sp/>AlignTypeSpec&lt;0&gt;<sp/>&gt;<sp/>pad(<sp/>\</highlight></codeline>
<codeline lineno="1767"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TYPE<sp/>value,<sp/>unsigned<sp/>width)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1768"><highlight class="preprocessor"><sp/><sp/>return<sp/>IntFormatSpec&lt;TYPE,<sp/>AlignTypeSpec&lt;0&gt;<sp/>&gt;(<sp/>\</highlight></codeline>
<codeline lineno="1769"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>value,<sp/>AlignTypeSpec&lt;0&gt;(width,<sp/>&apos;<sp/>&apos;));<sp/>\</highlight></codeline>
<codeline lineno="1770"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="1771"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="1772"><highlight class="preprocessor">template<sp/>&lt;typename<sp/>Char&gt;<sp/>\</highlight></codeline>
<codeline lineno="1773"><highlight class="preprocessor">inline<sp/>IntFormatSpec&lt;TYPE,<sp/>AlignTypeSpec&lt;0&gt;,<sp/>Char&gt;<sp/>pad(<sp/>\</highlight></codeline>
<codeline lineno="1774"><highlight class="preprocessor"><sp/><sp/><sp/>TYPE<sp/>value,<sp/>unsigned<sp/>width,<sp/>Char<sp/>fill)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1775"><highlight class="preprocessor"><sp/>return<sp/>IntFormatSpec&lt;TYPE,<sp/>AlignTypeSpec&lt;0&gt;,<sp/>Char&gt;(<sp/>\</highlight></codeline>
<codeline lineno="1776"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>value,<sp/>AlignTypeSpec&lt;0&gt;(width,<sp/>fill));<sp/>\</highlight></codeline>
<codeline lineno="1777"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><ref refid="format_8h_1a435fd66d1fbca043c2da3188040f6f23" kindref="member">FMT_DEFINE_INT_FORMATTERS</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><ref refid="format_8h_1a435fd66d1fbca043c2da3188040f6f23" kindref="member">FMT_DEFINE_INT_FORMATTERS</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><ref refid="format_8h_1a435fd66d1fbca043c2da3188040f6f23" kindref="member">FMT_DEFINE_INT_FORMATTERS</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><ref refid="format_8h_1a435fd66d1fbca043c2da3188040f6f23" kindref="member">FMT_DEFINE_INT_FORMATTERS</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><ref refid="format_8h_1a435fd66d1fbca043c2da3188040f6f23" kindref="member">FMT_DEFINE_INT_FORMATTERS</ref>(LongLong)</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><ref refid="format_8h_1a435fd66d1fbca043c2da3188040f6f23" kindref="member">FMT_DEFINE_INT_FORMATTERS</ref>(ULongLong)</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal">template<sp/>&lt;typename<sp/>Char&gt;</highlight></codeline>
<codeline lineno="1799" refid="namespacefmt_1aa87bf7b6c9197f00cef5d67872fec963" refkind="member"><highlight class="normal">inline<sp/><ref refid="classfmt_1_1_str_format_spec" kindref="compound">StrFormatSpec</ref>&lt;Char&gt;<sp/>pad(</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>Char<sp/>*str,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>width,<sp/>Char<sp/>fill<sp/>=<sp/>&apos;<sp/>&apos;)<sp/>{</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_str_format_spec" kindref="compound">StrFormatSpec&lt;Char&gt;</ref>(str,<sp/><ref refid="glew_8h_1aa105b18f96e6bc2485cb7f576a7fb9ba" kindref="member">width</ref>,<sp/>fill);</highlight></codeline>
<codeline lineno="1802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight></codeline>
<codeline lineno="1804" refid="namespacefmt_1aca4484309dac40585c48a9c9784ae171" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_str_format_spec" kindref="compound">StrFormatSpec&lt;wchar_t&gt;</ref><sp/><ref refid="namespacefmt_1a48d6010061d1710d807853ad9125d825" kindref="member">pad</ref>(</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>fill<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_str_format_spec" kindref="compound">StrFormatSpec&lt;wchar_t&gt;</ref>(str,<sp/><ref refid="glew_8h_1aa105b18f96e6bc2485cb7f576a7fb9ba" kindref="member">width</ref>,<sp/>fill);</highlight></codeline>
<codeline lineno="1807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceinternal" kindref="compound">internal</ref><sp/>{</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1internal_1_1_arg_map" kindref="compound">ArgMap</ref><sp/>{</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;</highlight></codeline>
<codeline lineno="1815" refid="classfmt_1_1internal_1_1_arg_map_1afdac4f376c6d479019357c9a944c080e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;fmt::BasicStringRef&lt;Char&gt;,<sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref>&gt;<sp/>&gt;<sp/><ref refid="classfmt_1_1internal_1_1_arg_map_1afdac4f376c6d479019357c9a944c080e" kindref="member">MapType</ref>;</highlight></codeline>
<codeline lineno="1816" refid="classfmt_1_1internal_1_1_arg_map_1ac7eed76cbccf42349f65e88bf6a72bda" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MapType::value_type<sp/><ref refid="classfmt_1_1internal_1_1_arg_map_1ac7eed76cbccf42349f65e88bf6a72bda" kindref="member">Pair</ref>;</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight></codeline>
<codeline lineno="1818" refid="classfmt_1_1internal_1_1_arg_map_1a2e5f76ea98e65b026f8516d9b993c71d" refkind="member"><highlight class="normal"><sp/><sp/>MapType<sp/><ref refid="classfmt_1_1internal_1_1_arg_map_1a2e5f76ea98e65b026f8516d9b993c71d" kindref="member">map_</ref>;</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a9a4960b70582ed2620911a0b75dce0b5" kindref="member">FMT_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>&amp;args);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight></codeline>
<codeline lineno="1823" refid="classfmt_1_1internal_1_1_arg_map_1a588b3169b52f72f8958a53a5f440a401" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref>*<sp/><ref refid="classfmt_1_1internal_1_1_arg_map_1a588b3169b52f72f8958a53a5f440a401" kindref="member">find</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_string_ref" kindref="compound">fmt::BasicStringRef&lt;Char&gt;</ref><sp/>&amp;<ref refid="glew_8h_1a5c4947d4516dd7cfa3505ce3a648a4ef" kindref="member">name</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>list<sp/>is<sp/>unsorted,<sp/>so<sp/>just<sp/>return<sp/>the<sp/>first<sp/>matching<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MapType::const_iterator<sp/>it<sp/>=<sp/>map_.begin(),<sp/><ref refid="glew_8h_1a432111147038972f06e049e18a837002" kindref="member">end</ref><sp/>=<sp/>map_.end();</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/><ref refid="glew_8h_1a432111147038972f06e049e18a837002" kindref="member">end</ref>;<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;first<sp/>==<sp/>name)</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;it-&gt;second;</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1832"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Impl,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="1835" refid="classfmt_1_1internal_1_1_arg_formatter_base" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1internal_1_1_arg_formatter_base" kindref="compound">ArgFormatterBase</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_arg_visitor" kindref="compound">ArgVisitor</ref>&lt;Impl,<sp/>void&gt;<sp/>{</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1837" refid="classfmt_1_1internal_1_1_arg_formatter_base_1ac0b9f643e8860821bbca0bf9ee14479b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter&lt;Char&gt;</ref><sp/>&amp;<ref refid="classfmt_1_1internal_1_1_arg_formatter_base_1ac0b9f643e8860821bbca0bf9ee14479b" kindref="member">writer_</ref>;</highlight></codeline>
<codeline lineno="1838" refid="classfmt_1_1internal_1_1_arg_formatter_base_1af6c494ea3a6bc2d54eebabc57a692908" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1_format_spec" kindref="compound">FormatSpec</ref><sp/>&amp;<ref refid="classfmt_1_1internal_1_1_arg_formatter_base_1af6c494ea3a6bc2d54eebabc57a692908" kindref="member">spec_</ref>;</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1acc0b3b39544c7a0930ae1567d952a8d4" kindref="member">FMT_DISALLOW_COPY_AND_ASSIGN</ref>(<ref refid="classfmt_1_1internal_1_1_arg_formatter_base" kindref="compound">ArgFormatterBase</ref>);</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight></codeline>
<codeline lineno="1842" refid="classfmt_1_1internal_1_1_arg_formatter_base_1a0f4c97899457f6263ae412f231330227" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_arg_formatter_base_1a0f4c97899457f6263ae412f231330227" kindref="member">write_pointer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="glew_8h_1aa5367c14d90f462230c2611b81b41d23" kindref="member">p</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/>spec_.<ref refid="structfmt_1_1_format_spec_1a9fbd00ed2b8e3b96eaa2beb54aff641e" kindref="member">flags_</ref><sp/>=<sp/><ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea02280924fe002ad252cfbcc0cf6492aa" kindref="member">HASH_FLAG</ref>;</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/>spec_.<ref refid="structfmt_1_1_format_spec_1aa6f085ef583f708dde9636c03adea6ab" kindref="member">type_</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/>writer_.<ref refid="classfmt_1_1_basic_writer_1a2eb820ad907cede8df8226af444f59d6" kindref="member">write_int</ref>(reinterpret_cast&lt;uintptr_t&gt;(p),<sp/>spec_);</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1849" refid="classfmt_1_1internal_1_1_arg_formatter_base_1a042c1243143197b04c5b4d77a89a4fb5" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter&lt;Char&gt;</ref><sp/>&amp;<ref refid="classfmt_1_1internal_1_1_arg_formatter_base_1a042c1243143197b04c5b4d77a89a4fb5" kindref="member">writer</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>writer_;<sp/>}</highlight></codeline>
<codeline lineno="1850" refid="classfmt_1_1internal_1_1_arg_formatter_base_1acdd3bb185f7b444a60faf98fa9806ed4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1_format_spec" kindref="compound">FormatSpec</ref><sp/>&amp;<ref refid="classfmt_1_1internal_1_1_arg_formatter_base_1acdd3bb185f7b444a60faf98fa9806ed4" kindref="member">spec</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spec_;<sp/>}</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight></codeline>
<codeline lineno="1852" refid="classfmt_1_1internal_1_1_arg_formatter_base_1a002d52aca6bc9a70d7eb62c037ffadc4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_arg_formatter_base_1a002d52aca6bc9a70d7eb62c037ffadc4" kindref="member">write</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str_value<sp/>=<sp/>value<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfmt_1_1internal_1_1_value_1_1_string_value" kindref="compound">Arg::StringValue&lt;char&gt;</ref><sp/>str<sp/>=<sp/>{<sp/>str_value,<sp/>std::strlen(str_value)<sp/>};</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/>writer_.<ref refid="classfmt_1_1_basic_writer_1aa6ef59115b07ef0ad53fd9bb73bc64ee" kindref="member">write_str</ref>(str,<sp/>spec_);</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"></highlight></codeline>
<codeline lineno="1858" refid="classfmt_1_1internal_1_1_arg_formatter_base_1a1a706cd6067d51bfa07d5e6c577e0843" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_arg_formatter_base_1a1a706cd6067d51bfa07d5e6c577e0843" kindref="member">write</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value)<sp/>{</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfmt_1_1internal_1_1_value_1_1_string_value" kindref="compound">Arg::StringValue&lt;char&gt;</ref><sp/>str<sp/>=<sp/>{<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/>value<sp/>!=<sp/>0<sp/>?<sp/>std::strlen(value)<sp/>:<sp/>0};</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/>writer_.<ref refid="classfmt_1_1_basic_writer_1aa6ef59115b07ef0ad53fd9bb73bc64ee" kindref="member">write_str</ref>(str,<sp/>spec_);</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1864" refid="classfmt_1_1internal_1_1_arg_formatter_base_1a67f48acedb2ba3f243150c41f964252b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_arg_formatter_base_1a67f48acedb2ba3f243150c41f964252b" kindref="member">ArgFormatterBase</ref>(<ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter&lt;Char&gt;</ref><sp/>&amp;<ref refid="glew_8h_1a433584688554d9a05d22844c39473968" kindref="member">w</ref>,<sp/><ref refid="structfmt_1_1_format_spec" kindref="compound">FormatSpec</ref><sp/>&amp;<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>)</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/>:<sp/>writer_(w),<sp/>spec_(s)<sp/>{}</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1868" refid="classfmt_1_1internal_1_1_arg_formatter_base_1ae6f9ce1fa7940ebda3ac594a45edd32d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_arg_formatter_base_1ae6f9ce1fa7940ebda3ac594a45edd32d" kindref="member">visit_any_int</ref>(T<sp/>value)<sp/>{<sp/>writer_.<ref refid="classfmt_1_1_basic_writer_1a2eb820ad907cede8df8226af444f59d6" kindref="member">write_int</ref>(value,<sp/>spec_);<sp/>}</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1871" refid="classfmt_1_1internal_1_1_arg_formatter_base_1a670214e1773c9c86002be07c043566dd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_arg_formatter_base_1a670214e1773c9c86002be07c043566dd" kindref="member">visit_any_double</ref>(T<sp/>value)<sp/>{<sp/>writer_.<ref refid="classfmt_1_1_basic_writer_1aa69a013920916ccc74ca7ac5e971abe7" kindref="member">write_double</ref>(value,<sp/>spec_);<sp/>}</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight></codeline>
<codeline lineno="1873" refid="classfmt_1_1internal_1_1_arg_formatter_base_1a379b2f30d3e0526c88be65f8a2b596be" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_arg_formatter_base_1a379b2f30d3e0526c88be65f8a2b596be" kindref="member">visit_bool</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec_.<ref refid="structfmt_1_1_format_spec_1aa6f085ef583f708dde9636c03adea6ab" kindref="member">type_</ref>)</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visit_any_int(value);</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1a7c721969e9660580a237bd4130422ab6" kindref="member">write</ref>(value);</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight></codeline>
<codeline lineno="1879" refid="classfmt_1_1internal_1_1_arg_formatter_base_1ab85eb2158c9d48c847706de26f35460c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_arg_formatter_base_1ab85eb2158c9d48c847706de26f35460c" kindref="member">visit_char</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec_.<ref refid="structfmt_1_1_format_spec_1aa6f085ef583f708dde9636c03adea6ab" kindref="member">type_</ref><sp/>&amp;&amp;<sp/>spec_.<ref refid="structfmt_1_1_format_spec_1aa6f085ef583f708dde9636c03adea6ab" kindref="member">type_</ref><sp/>!=<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spec_.<ref refid="structfmt_1_1_format_spec_1a9fbd00ed2b8e3b96eaa2beb54aff641e" kindref="member">flags_</ref><sp/>|=<sp/><ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea59699c6d9db5a05403ebc3528e5f0694" kindref="member">CHAR_FLAG</ref>;</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writer_.<ref refid="classfmt_1_1_basic_writer_1a2eb820ad907cede8df8226af444f59d6" kindref="member">write_int</ref>(value,<sp/>spec_);</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec_.<ref refid="structfmt_1_1_align_spec_1aac93fb3829d550af86479f1ecaa73f95" kindref="member">align_</ref><sp/>==<sp/>ALIGN_NUMERIC<sp/>||<sp/>spec_.<ref refid="structfmt_1_1_format_spec_1a9fbd00ed2b8e3b96eaa2beb54aff641e" kindref="member">flags_</ref><sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(</highlight><highlight class="stringliteral">&quot;invalid<sp/>format<sp/>specifier<sp/>for<sp/>char&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_writer_1aedef35be3b8871bc55d10936289f1d9b" kindref="member">BasicWriter&lt;Char&gt;::CharPtr</ref><sp/>CharPtr;</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/>Char<sp/>fill<sp/>=<sp/><ref refid="classfmt_1_1internal_1_1_char_traits" kindref="compound">internal::CharTraits&lt;Char&gt;::cast</ref>(spec_.<ref refid="structfmt_1_1_width_spec_1a28a9b78a0ebfd5830025eaf1c917bb16" kindref="member">fill</ref>());</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/>CharPtr<sp/>out<sp/>=<sp/>CharPtr();</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>CHAR_WIDTH<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec_.<ref refid="structfmt_1_1_width_spec_1a83fed5d5a674ea54a48feb6edef4c1c7" kindref="member">width_</ref><sp/>&gt;<sp/>CHAR_WIDTH)<sp/>{</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>writer_.<ref refid="classfmt_1_1_basic_writer_1a974243e12ba11701c6007bbe080c9db5" kindref="member">grow_buffer</ref>(spec_.<ref refid="structfmt_1_1_width_spec_1a83fed5d5a674ea54a48feb6edef4c1c7" kindref="member">width_</ref>);</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec_.<ref refid="structfmt_1_1_align_spec_1aac93fb3829d550af86479f1ecaa73f95" kindref="member">align_</ref><sp/>==<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2ab4ab67c39e6d8562a116f3da83de391a" kindref="member">ALIGN_RIGHT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_fill_n(out,<sp/>spec_.<ref refid="structfmt_1_1_width_spec_1a83fed5d5a674ea54a48feb6edef4c1c7" kindref="member">width_</ref><sp/>-<sp/>CHAR_WIDTH,<sp/>fill);</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>spec_.<ref refid="structfmt_1_1_width_spec_1a83fed5d5a674ea54a48feb6edef4c1c7" kindref="member">width_</ref><sp/>-<sp/>CHAR_WIDTH;</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec_.<ref refid="structfmt_1_1_align_spec_1aac93fb3829d550af86479f1ecaa73f95" kindref="member">align_</ref><sp/>==<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2ab9fa8e7eb41061a7670d4d8b43007f23" kindref="member">ALIGN_CENTER</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>writer_.<ref refid="classfmt_1_1_basic_writer_1a1fd4d07988b8628b3316b4881e4a4f74" kindref="member">fill_padding</ref>(out,<sp/>spec_.<ref refid="structfmt_1_1_width_spec_1a83fed5d5a674ea54a48feb6edef4c1c7" kindref="member">width_</ref>,</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1abe2cbab571913bf19a52c6f6bc1b5a5a" kindref="member">internal::const_check</ref>(CHAR_WIDTH),<sp/>fill);</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_fill_n(out<sp/>+<sp/>CHAR_WIDTH,</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec_.<ref refid="structfmt_1_1_width_spec_1a83fed5d5a674ea54a48feb6edef4c1c7" kindref="member">width_</ref><sp/>-<sp/>CHAR_WIDTH,<sp/>fill);</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>writer_.<ref refid="classfmt_1_1_basic_writer_1a974243e12ba11701c6007bbe080c9db5" kindref="member">grow_buffer</ref>(CHAR_WIDTH);</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/>*out<sp/>=<sp/><ref refid="classfmt_1_1internal_1_1_char_traits" kindref="compound">internal::CharTraits&lt;Char&gt;::cast</ref>(value);</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"></highlight></codeline>
<codeline lineno="1909" refid="classfmt_1_1internal_1_1_arg_formatter_base_1a35e5c4d1580f7eec032661f9823c0cad" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_arg_formatter_base_1a35e5c4d1580f7eec032661f9823c0cad" kindref="member">visit_cstring</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value)<sp/>{</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec_.<ref refid="structfmt_1_1_format_spec_1aa6f085ef583f708dde9636c03adea6ab" kindref="member">type_</ref><sp/>==<sp/></highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write_pointer(value);</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1a7c721969e9660580a237bd4130422ab6" kindref="member">write</ref>(value);</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight></codeline>
<codeline lineno="1915" refid="classfmt_1_1internal_1_1_arg_formatter_base_1a937a7808ebf21736498e32abba6a0046" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_arg_formatter_base_1a937a7808ebf21736498e32abba6a0046" kindref="member">visit_string</ref>(<ref refid="structfmt_1_1internal_1_1_value_1_1_string_value" kindref="compound">Arg::StringValue&lt;char&gt;</ref><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/>writer_.<ref refid="classfmt_1_1_basic_writer_1aa6ef59115b07ef0ad53fd9bb73bc64ee" kindref="member">write_str</ref>(value,<sp/>spec_);</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_arg_visitor" kindref="compound">ArgVisitor&lt;Impl, void&gt;::visit_wstring</ref>;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight></codeline>
<codeline lineno="1921" refid="classfmt_1_1internal_1_1_arg_formatter_base_1ad3469bff1ffe51395d9f8f0e0824ff2c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_arg_formatter_base_1ad3469bff1ffe51395d9f8f0e0824ff2c" kindref="member">visit_wstring</ref>(<ref refid="structfmt_1_1internal_1_1_value_1_1_string_value" kindref="compound">Arg::StringValue&lt;Char&gt;</ref><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/>writer_.<ref refid="classfmt_1_1_basic_writer_1aa6ef59115b07ef0ad53fd9bb73bc64ee" kindref="member">write_str</ref>(value,<sp/>spec_);</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"></highlight></codeline>
<codeline lineno="1925" refid="classfmt_1_1internal_1_1_arg_formatter_base_1a5c11af21a3e1249b78ef87c968572ef5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_arg_formatter_base_1a5c11af21a3e1249b78ef87c968572ef5" kindref="member">visit_pointer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value)<sp/>{</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec_.<ref refid="structfmt_1_1_format_spec_1aa6f085ef583f708dde9636c03adea6ab" kindref="member">type_</ref><sp/>&amp;&amp;<sp/>spec_.<ref refid="structfmt_1_1_format_spec_1aa6f085ef583f708dde9636c03adea6ab" kindref="member">type_</ref><sp/>!=<sp/></highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1a92bdabe812efd23c6f9686ddd6a7805f" kindref="member">report_unknown_type</ref>(spec_.<ref refid="structfmt_1_1_format_spec_1aa6f085ef583f708dde9636c03adea6ab" kindref="member">type_</ref>,<sp/></highlight><highlight class="stringliteral">&quot;pointer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/>write_pointer(value);</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1930"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight></codeline>
<codeline lineno="1932" refid="classfmt_1_1internal_1_1_formatter_base" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1internal_1_1_formatter_base" kindref="compound">FormatterBase</ref><sp/>{</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1934" refid="classfmt_1_1internal_1_1_formatter_base_1ae70de8b1cb03b5c582aca841eb24f276" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/><ref refid="classfmt_1_1internal_1_1_formatter_base_1ae70de8b1cb03b5c582aca841eb24f276" kindref="member">args_</ref>;</highlight></codeline>
<codeline lineno="1935" refid="classfmt_1_1internal_1_1_formatter_base_1ac84296dd95875607beb73304c116deb7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_formatter_base_1ac84296dd95875607beb73304c116deb7" kindref="member">next_arg_index_</ref>;</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>argument<sp/>with<sp/>specified<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a9a4960b70582ed2620911a0b75dce0b5" kindref="member">FMT_API</ref><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">Arg</ref><sp/>do_get_arg(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>arg_index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*&amp;error);</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1941" refid="classfmt_1_1internal_1_1_formatter_base_1a6b7a3a49a08e76e915400748f3cbe7fc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>&amp;<ref refid="classfmt_1_1internal_1_1_formatter_base_1a6b7a3a49a08e76e915400748f3cbe7fc" kindref="member">args</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>args_;<sp/>}</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"></highlight></codeline>
<codeline lineno="1943" refid="classfmt_1_1internal_1_1_formatter_base_1a5a27cf6bbba1b7e159bb21e12453c216" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_formatter_base_1a5a27cf6bbba1b7e159bb21e12453c216" kindref="member">FormatterBase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>&amp;args)<sp/>{</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/>args_<sp/>=<sp/>args;</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/>next_arg_index_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>next<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1949" refid="classfmt_1_1internal_1_1_formatter_base_1ac3d5811aa9b695596fe0dc67f870e3d4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">Arg</ref><sp/><ref refid="classfmt_1_1internal_1_1_formatter_base_1ac3d5811aa9b695596fe0dc67f870e3d4" kindref="member">next_arg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*&amp;error)<sp/>{</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_arg_index_<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>do_get_arg(<ref refid="namespacefmt_1_1internal_1a28bed1291226be35437bc3173c19c205" kindref="member">internal::to_unsigned</ref>(next_arg_index_++),<sp/>error);</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>switch<sp/>from<sp/>manual<sp/>to<sp/>automatic<sp/>argument<sp/>indexing&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">Arg</ref>();</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Checks<sp/>if<sp/>manual<sp/>indexing<sp/>is<sp/>used<sp/>and<sp/>returns<sp/>the<sp/>argument<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>specified<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1958" refid="classfmt_1_1internal_1_1_formatter_base_1ad5baca90f220f3f54c0c4a620ec80b7b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">Arg</ref><sp/><ref refid="classfmt_1_1internal_1_1_formatter_base_1ad5baca90f220f3f54c0c4a620ec80b7b" kindref="member">get_arg</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>arg_index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*&amp;error)<sp/>{</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>check_no_auto_index(error)<sp/>?<sp/>do_get_arg(arg_index,<sp/>error)<sp/>:<sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">Arg</ref>();</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight></codeline>
<codeline lineno="1962" refid="classfmt_1_1internal_1_1_formatter_base_1a27444362817694c52d86723bd2b62390" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_formatter_base_1a27444362817694c52d86723bd2b62390" kindref="member">check_no_auto_index</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*&amp;error)<sp/>{</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_arg_index_<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>switch<sp/>from<sp/>automatic<sp/>to<sp/>manual<sp/>argument<sp/>indexing&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/>next_arg_index_<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"></highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="1972" refid="classfmt_1_1internal_1_1_formatter_base_1ab29b5470b0f02edfde9b81ba24a51bf6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_formatter_base_1ab29b5470b0f02edfde9b81ba24a51bf6" kindref="member">write</ref>(<ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter&lt;Char&gt;</ref><sp/>&amp;<ref refid="glew_8h_1a433584688554d9a05d22844c39473968" kindref="member">w</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*<ref refid="glew_8h_1ac55adc720a3098c1b454d2a4647f4361" kindref="member">start</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*<ref refid="glew_8h_1a432111147038972f06e049e18a837002" kindref="member">end</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>!=<sp/>end)</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="glew_8h_1a433584688554d9a05d22844c39473968" kindref="member">w &lt;&lt; BasicStringRef&lt;Char&gt;</ref>(<ref refid="glew_8h_1ac55adc720a3098c1b454d2a4647f4361" kindref="member">start</ref>,<sp/><ref refid="namespacefmt_1_1internal_1a28bed1291226be35437bc3173c19c205" kindref="member">internal::to_unsigned</ref>(end<sp/>-<sp/>start));</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1976"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1977"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Impl,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="1997" refid="classfmt_1_1_basic_arg_formatter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1_basic_arg_formatter" kindref="compound">BasicArgFormatter</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_arg_formatter_base" kindref="compound">internal::ArgFormatterBase</ref>&lt;Impl,<sp/>Char&gt;<sp/>{</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1999" refid="classfmt_1_1_basic_arg_formatter_1aacceacb2853801f0408be88987657c34" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_formatter" kindref="compound">BasicFormatter&lt;Char, Impl&gt;</ref><sp/>&amp;<ref refid="classfmt_1_1_basic_arg_formatter_1aacceacb2853801f0408be88987657c34" kindref="member">formatter_</ref>;</highlight></codeline>
<codeline lineno="2000" refid="classfmt_1_1_basic_arg_formatter_1aa3fc6c62569d614e53f707462324a289" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*<ref refid="classfmt_1_1_basic_arg_formatter_1aa3fc6c62569d614e53f707462324a289" kindref="member">format_</ref>;</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2011" refid="classfmt_1_1_basic_arg_formatter_1a207b17b258c5e16cf61ebfc9b13211d3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_arg_formatter_1a207b17b258c5e16cf61ebfc9b13211d3" kindref="member">BasicArgFormatter</ref>(<ref refid="classfmt_1_1_basic_formatter" kindref="compound">BasicFormatter&lt;Char, Impl&gt;</ref><sp/>&amp;formatter,</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfmt_1_1_format_spec" kindref="compound">FormatSpec</ref><sp/>&amp;spec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*<ref refid="namespacefmt" kindref="compound">fmt</ref>)</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="namespaceinternal" kindref="compound">internal</ref>::<ref refid="classfmt_1_1internal_1_1_arg_formatter_base" kindref="compound">ArgFormatterBase</ref>&lt;Impl,<sp/>Char&gt;(formatter.writer(),<sp/>spec),</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/>formatter_(formatter),<sp/>format_(fmt)<sp/>{}</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight></codeline>
<codeline lineno="2017" refid="classfmt_1_1_basic_arg_formatter_1ae0aab0f90c9c93e3513203fc84c2c4dc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_arg_formatter_1ae0aab0f90c9c93e3513203fc84c2c4dc" kindref="member">visit_custom</ref>(<ref refid="structfmt_1_1internal_1_1_value_1_1_custom_value" kindref="compound">internal::Arg::CustomValue</ref><sp/><ref refid="glew_8h_1ae0f40feefa74d9cb1721a009573cfce5" kindref="member">c</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/>c.<ref refid="structfmt_1_1internal_1_1_value_1_1_custom_value_1a36f27ca0939e90a5fe6d7d355ea0f97a" kindref="member">format</ref>(&amp;formatter_,<sp/>c.<ref refid="structfmt_1_1internal_1_1_value_1_1_custom_value_1aaaa7c10023f8b3886bee9593cddea150" kindref="member">value</ref>,<sp/>&amp;format_);</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2020"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight></codeline>
<codeline lineno="2023"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ArgFormatter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_arg_formatter" kindref="compound">BasicArgFormatter</ref>&lt;ArgFormatter&lt;Char&gt;,<sp/>Char&gt;<sp/>{</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2027" refid="classfmt_1_1_arg_formatter_1a2fc7b9c801f3aa33a8e952df035a140f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_arg_formatter_1a2fc7b9c801f3aa33a8e952df035a140f" kindref="member">ArgFormatter</ref>(<ref refid="classfmt_1_1_basic_formatter" kindref="compound">BasicFormatter&lt;Char&gt;</ref><sp/>&amp;formatter,</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfmt_1_1_format_spec" kindref="compound">FormatSpec</ref><sp/>&amp;spec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*<ref refid="namespacefmt" kindref="compound">fmt</ref>)</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="classfmt_1_1_basic_arg_formatter" kindref="compound">BasicArgFormatter</ref>&lt;ArgFormatter&lt;Char&gt;,<sp/>Char&gt;(formatter,<sp/>spec,<sp/>fmt)<sp/>{}</highlight></codeline>
<codeline lineno="2030"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight></codeline>
<codeline lineno="2033"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgFormatter&gt;</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1_basic_formatter" kindref="compound">BasicFormatter</ref><sp/>:<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_formatter_base" kindref="compound">internal::FormatterBase</ref><sp/>{</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2037" refid="classfmt_1_1_basic_formatter_1af8270b25395aeb82b8c72c370c5cf13a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CharType<sp/><ref refid="classfmt_1_1_basic_formatter_1af8270b25395aeb82b8c72c370c5cf13a" kindref="member">Char</ref>;</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2040" refid="classfmt_1_1_basic_formatter_1acb6c2ccec5ecc759d6894e8069ba226a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter&lt;Char&gt;</ref><sp/>&amp;<ref refid="classfmt_1_1_basic_formatter_1acb6c2ccec5ecc759d6894e8069ba226a" kindref="member">writer_</ref>;</highlight></codeline>
<codeline lineno="2041" refid="classfmt_1_1_basic_formatter_1a890f1e338eaf74e6a5376d8a7ee077e3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_arg_map" kindref="compound">internal::ArgMap&lt;Char&gt;</ref><sp/><ref refid="classfmt_1_1_basic_formatter_1a890f1e338eaf74e6a5376d8a7ee077e3" kindref="member">map_</ref>;</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1acc0b3b39544c7a0930ae1567d952a8d4" kindref="member">FMT_DISALLOW_COPY_AND_ASSIGN</ref>(<ref refid="classfmt_1_1_basic_formatter" kindref="compound">BasicFormatter</ref>);</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_formatter_base_1ad5baca90f220f3f54c0c4a620ec80b7b" kindref="member">internal::FormatterBase::get_arg</ref>;</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Checks<sp/>if<sp/>manual<sp/>indexing<sp/>is<sp/>used<sp/>and<sp/>returns<sp/>the<sp/>argument<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>specified<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref><sp/>get_arg(<ref refid="classfmt_1_1_basic_string_ref" kindref="compound">BasicStringRef&lt;Char&gt;</ref><sp/>arg_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*&amp;error);</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parses<sp/>argument<sp/>index<sp/>and<sp/>returns<sp/>corresponding<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref><sp/>parse_arg_index(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*&amp;<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>);</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parses<sp/>argument<sp/>name<sp/>and<sp/>returns<sp/>corresponding<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref><sp/>parse_arg_name(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*&amp;<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>);</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2065" refid="classfmt_1_1_basic_formatter_1a2b190901681ff0413dc60522fe158fdc" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_formatter_1a2b190901681ff0413dc60522fe158fdc" kindref="member">BasicFormatter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>&amp;args,<sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter&lt;Char&gt;</ref><sp/>&amp;<ref refid="glew_8h_1a433584688554d9a05d22844c39473968" kindref="member">w</ref>)</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespaceinternal" kindref="compound">internal</ref>::<ref refid="classfmt_1_1internal_1_1_formatter_base" kindref="compound">FormatterBase</ref>(args),<sp/>writer_(w)<sp/>{}</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"></highlight></codeline>
<codeline lineno="2069" refid="classfmt_1_1_basic_formatter_1abd5692d2f2123b27da7941d56fc6073c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter&lt;Char&gt;</ref><sp/>&amp;<ref refid="classfmt_1_1_basic_formatter_1abd5692d2f2123b27da7941d56fc6073c" kindref="member">writer</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>writer_;<sp/>}</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1a638f25c535b3bfa12dc1478b11885b6f" kindref="member">format</ref>(<ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">BasicCStringRef&lt;Char&gt;</ref><sp/>format_str);</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Formats<sp/>a<sp/>single<sp/>argument<sp/>and<sp/>advances<sp/>format_str,<sp/>a<sp/>format<sp/>string<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*<ref refid="namespacefmt_1a638f25c535b3bfa12dc1478b11885b6f" kindref="member">format</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*&amp;format_str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref><sp/>&amp;<ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>);</highlight></codeline>
<codeline lineno="2076"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>a<sp/>comma-separated<sp/>list<sp/>with<sp/>results<sp/>of<sp/>applying<sp/>f<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight><highlight class="comment">//<sp/>numbers<sp/>0..n-1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2080" refid="format_8h_1ab581aee8e1b94e923b16e7146b777a4a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_GEN(n,<sp/>f)<sp/>FMT_GEN##n(f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2081" refid="format_8h_1a3c8f64756453f72ccf16b23dd82f79f5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_GEN1(f)<sp/><sp/>f(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2082" refid="format_8h_1ab7f734cb3a84b230e2adad93dace3551" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_GEN2(f)<sp/><sp/>FMT_GEN1(f),<sp/><sp/>f(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2083" refid="format_8h_1a08e0a4f9682a7f2ab1d6613bb6bca425" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_GEN3(f)<sp/><sp/>FMT_GEN2(f),<sp/><sp/>f(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2084" refid="format_8h_1ae97e890522b7c1f5afea43729d7a398d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_GEN4(f)<sp/><sp/>FMT_GEN3(f),<sp/><sp/>f(3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2085" refid="format_8h_1afe82fdb8f3d5b212a61bde39ee02da40" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_GEN5(f)<sp/><sp/>FMT_GEN4(f),<sp/><sp/>f(4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2086" refid="format_8h_1a96d8ff068a628137a907eafa7bbb8d53" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_GEN6(f)<sp/><sp/>FMT_GEN5(f),<sp/><sp/>f(5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2087" refid="format_8h_1ad3d21b7ef2694e5af2ddf87bb8785adb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_GEN7(f)<sp/><sp/>FMT_GEN6(f),<sp/><sp/>f(6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2088" refid="format_8h_1a8f0dff4cbc3ea545304a7ec377abc7f3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_GEN8(f)<sp/><sp/>FMT_GEN7(f),<sp/><sp/>f(7)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2089" refid="format_8h_1ae68851faa26196e43a96354e4d25bfe2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_GEN9(f)<sp/><sp/>FMT_GEN8(f),<sp/><sp/>f(8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2090" refid="format_8h_1af8253bd513c8b71eae91b59958b451a7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_GEN10(f)<sp/>FMT_GEN9(f),<sp/><sp/>f(9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2091" refid="format_8h_1a0a5a11fd57614486ccb33394734860a0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_GEN11(f)<sp/>FMT_GEN10(f),<sp/>f(10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2092" refid="format_8h_1ae56463f86d0ad37dc5b959c9a9c41609" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_GEN12(f)<sp/>FMT_GEN11(f),<sp/>f(11)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2093" refid="format_8h_1a866896114300cda7c5af8cd6e59386c3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_GEN13(f)<sp/>FMT_GEN12(f),<sp/>f(12)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2094" refid="format_8h_1a6600eae5791e892ffdbf002ee22c1378" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_GEN14(f)<sp/>FMT_GEN13(f),<sp/>f(13)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2095" refid="format_8h_1af245ed926303d044c943b467f3ae31b8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_GEN15(f)<sp/>FMT_GEN14(f),<sp/>f(14)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceinternal" kindref="compound">internal</ref><sp/>{</highlight></codeline>
<codeline lineno="2098" refid="namespacefmt_1_1internal_1a7d8abb1ded2bf7989f6658811a0ca93e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="namespacefmt_1_1internal_1a7d8abb1ded2bf7989f6658811a0ca93e" kindref="member">make_type</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2101" refid="namespacefmt_1_1internal_1aa8063bbe25d68d423a576acca0319397" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="namespacefmt_1_1internal_1a7d8abb1ded2bf7989f6658811a0ca93e" kindref="member">make_type</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;<ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_make_value" kindref="compound">MakeValue&lt; BasicFormatter&lt;char&gt;</ref><sp/>&gt;<ref refid="glew_8h_1a8d78e2e8a676abd547a596dd84811285" kindref="member">::type</ref>(arg);</highlight></codeline>
<codeline lineno="2103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="comment">/*IsPacked*/</highlight><highlight class="normal">=<sp/>(N<sp/>&lt;<sp/>ArgList::MAX_PACKED_ARGS)&gt;</highlight></codeline>
<codeline lineno="2106" refid="structfmt_1_1internal_1_1_arg_array" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_arg_array" kindref="compound">ArgArray</ref>;</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="2109" refid="structfmt_1_1internal_1_1_arg_array_3_01_n_00_01true_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_arg_array" kindref="compound">ArgArray</ref>&lt;N,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="comment">/*IsPacked*/</highlight><highlight class="normal">&gt;<sp/>{</highlight></codeline>
<codeline lineno="2110" refid="structfmt_1_1internal_1_1_arg_array_3_01_n_00_01true_01_4_1aeb168342e5c7353d8780f936d393c04f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value" kindref="compound">Value</ref><sp/><ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">Type</ref>[N<sp/>&gt;<sp/>0<sp/>?<sp/>N<sp/>:<sp/>1];</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Formatter,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2113" refid="structfmt_1_1internal_1_1_arg_array_3_01_n_00_01true_01_4_1a3977c938e1ca5c4c5aedccd85561a76d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value" kindref="compound">Value</ref><sp/><ref refid="structfmt_1_1internal_1_1_arg_array_3_01_n_00_01true_01_4_1a3977c938e1ca5c4c5aedccd85561a76d" kindref="member">make</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfmt_1_1internal_1_1_value" kindref="compound">Value</ref><sp/><ref refid="glew_8h_1a5fb5836a37f7607602a16ad733ed6357" kindref="member">result</ref><sp/>=<sp/><ref refid="classfmt_1_1internal_1_1_make_value" kindref="compound">MakeValue&lt;Formatter&gt;</ref>(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Workaround<sp/>a<sp/>bug<sp/>in<sp/>Apple<sp/>LLVM<sp/>version<sp/>4.2<sp/>(clang-425.0.28)<sp/>of<sp/>clang:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://github.com/fmtlib/fmt/issues/276</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="glew_8h_1a1659df18b3b413a60a397d5a7540f3d2" kindref="member">void</ref>)result.<ref refid="structfmt_1_1internal_1_1_value_1a2dcff1e0ac8f7fb7fc6dd448d66978cf" kindref="member">custom</ref>.<ref refid="structfmt_1_1internal_1_1_value_1_1_custom_value_1a36f27ca0939e90a5fe6d7d355ea0f97a" kindref="member">format</ref>;</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2120"><highlight class="normal">#</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_make_value" kindref="compound">MakeValue&lt;Formatter&gt;</ref>(value);</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2124"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="2127" refid="structfmt_1_1internal_1_1_arg_array_3_01_n_00_01false_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_arg_array" kindref="compound">ArgArray</ref>&lt;N,<sp/>false</highlight><highlight class="comment">/*IsPacked*/</highlight><highlight class="normal">&gt;<sp/>{</highlight></codeline>
<codeline lineno="2128" refid="structfmt_1_1internal_1_1_arg_array_3_01_n_00_01false_01_4_1ab53fffd4174d8cdc70c205ba6dc54b17" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">Arg</ref><sp/><ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">Type</ref>[N<sp/>+<sp/>1];<sp/></highlight><highlight class="comment">//<sp/>+1<sp/>for<sp/>the<sp/>list<sp/>end<sp/>Arg::NONE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Formatter,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2131" refid="structfmt_1_1internal_1_1_arg_array_3_01_n_00_01false_01_4_1a5052e0376e3deb4bffc5d1a4941bc7c8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">Arg</ref><sp/><ref refid="structfmt_1_1internal_1_1_arg_array_3_01_n_00_01false_01_4_1a5052e0376e3deb4bffc5d1a4941bc7c8" kindref="member">make</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;value)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_make_arg" kindref="compound">MakeArg&lt;Formatter&gt;</ref>(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);<sp/>}</highlight></codeline>
<codeline lineno="2132"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"></highlight></codeline>
<codeline lineno="2134"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_VARIADIC_TEMPLATES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">Arg</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="namespacefmt_1_1internal_1a7d8abb1ded2bf7989f6658811a0ca93e" kindref="member">make_type</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">Arg</ref><sp/>&amp;<ref refid="glew_8h_1a1d06221983ffd8920e50099d6382e24f" kindref="member">first</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args<sp/>&amp;<sp/>...<sp/>tail)<sp/>{</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1a7d8abb1ded2bf7989f6658811a0ca93e" kindref="member">make_type</ref>(first)<sp/>|<sp/>(<ref refid="namespacefmt_1_1internal_1a7d8abb1ded2bf7989f6658811a0ca93e" kindref="member">make_type</ref>(tail...)<sp/>&lt;&lt;<sp/>4);</highlight></codeline>
<codeline lineno="2138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"></highlight></codeline>
<codeline lineno="2142" refid="structfmt_1_1internal_1_1_arg_type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_arg_type" kindref="compound">ArgType</ref><sp/>{</highlight></codeline>
<codeline lineno="2143" refid="structfmt_1_1internal_1_1_arg_type_1acfa7078681b7047cb448d523f5eb2a54" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="structfmt_1_1internal_1_1_arg_type_1acfa7078681b7047cb448d523f5eb2a54" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"></highlight></codeline>
<codeline lineno="2145" refid="structfmt_1_1internal_1_1_arg_type_1af18fdbe0560a1b7ada9a698cc8b0cb70" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1internal_1_1_arg_type_1af18fdbe0560a1b7ada9a698cc8b0cb70" kindref="member">ArgType</ref>()<sp/>:<sp/>type(0)<sp/>{}</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"></highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2148" refid="structfmt_1_1internal_1_1_arg_type_1a011f9d3d3e6da48d17967466c3d94fc8" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1internal_1_1_arg_type_1a011f9d3d3e6da48d17967466c3d94fc8" kindref="member">ArgType</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;<ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>)<sp/>:<sp/>type(<ref refid="namespacefmt_1_1internal_1a7d8abb1ded2bf7989f6658811a0ca93e" kindref="member">make_type</ref>(arg))<sp/>{}</highlight></codeline>
<codeline lineno="2149"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"></highlight></codeline>
<codeline lineno="2151" refid="format_8h_1a314a375c57af00408d198600634361d2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_ARG_TYPE_DEFAULT(n)<sp/>ArgType<sp/>t##n<sp/>=<sp/>ArgType()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"></highlight></codeline>
<codeline lineno="2153" refid="namespacefmt_1_1internal_1a49d1e1820bdd693a743ec9e5b42b7e81" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="namespacefmt_1_1internal_1a7d8abb1ded2bf7989f6658811a0ca93e" kindref="member">make_type</ref>(<ref refid="format_8h_1af245ed926303d044c943b467f3ae31b8" kindref="member">FMT_GEN15</ref>(<ref refid="format_8h_1a314a375c57af00408d198600634361d2" kindref="member">FMT_ARG_TYPE_DEFAULT</ref>))<sp/>{</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1abf0ea7853561a9028dbbc4caeb2f8ff1" kindref="member">t0</ref>.type<sp/>|<sp/>(<ref refid="glew_8h_1af48031a37b713afa3b0d0d7d29653d7c" kindref="member">t1</ref>.type<sp/>&lt;&lt;<sp/>4)<sp/>|<sp/>(t2.type<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(t3.type<sp/>&lt;&lt;<sp/>12)<sp/>|</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(t4.type<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(t5.type<sp/>&lt;&lt;<sp/>20)<sp/>|<sp/>(t6.type<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>(t7.type<sp/>&lt;&lt;<sp/>28)<sp/>|</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(t8.type<sp/>&lt;&lt;<sp/>32)<sp/>|<sp/>(t9.type<sp/>&lt;&lt;<sp/>36)<sp/>|<sp/>(t10.type<sp/>&lt;&lt;<sp/>40)<sp/>|<sp/>(t11.type<sp/>&lt;&lt;<sp/>44)<sp/>|</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(t12.type<sp/>&lt;&lt;<sp/>48)<sp/>|<sp/>(t13.type<sp/>&lt;&lt;<sp/>52)<sp/>|<sp/>(t14.type<sp/>&lt;&lt;<sp/>56);</highlight></codeline>
<codeline lineno="2158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2160"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2161"><highlight class="normal"></highlight></codeline>
<codeline lineno="2162" refid="format_8h_1aefc75463cfc08c7dc38ae368787bb2f7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_MAKE_TEMPLATE_ARG(n)<sp/>typename<sp/>T##n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2163" refid="format_8h_1ac5490b83127f8004dde07cd6fd80034f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_MAKE_ARG_TYPE(n)<sp/>T##n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2164" refid="format_8h_1a2887a50989bee3473bbb79232a99212d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_MAKE_ARG(n)<sp/>const<sp/>T##n<sp/>&amp;v##n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2165" refid="format_8h_1ae2da8743fd9e1d54b0d5336f9b6ef843" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_ASSIGN_char(n)<sp/>\</highlight></codeline>
<codeline lineno="2166"><highlight class="preprocessor"><sp/><sp/>arr[n]<sp/>=<sp/>fmt::internal::MakeValue&lt;<sp/>fmt::BasicFormatter&lt;char&gt;<sp/>&gt;(v##n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2167" refid="format_8h_1abbc11ee1c13d66afdeae89b3900393c7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_ASSIGN_wchar_t(n)<sp/>\</highlight></codeline>
<codeline lineno="2168"><highlight class="preprocessor"><sp/><sp/>arr[n]<sp/>=<sp/>fmt::internal::MakeValue&lt;<sp/>fmt::BasicFormatter&lt;wchar_t&gt;<sp/>&gt;(v##n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_VARIADIC_TEMPLATES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>a<sp/>variadic<sp/>function<sp/>returning<sp/>void.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_VARIADIC_VOID(func,<sp/>arg_type)<sp/>\</highlight></codeline>
<codeline lineno="2173"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;typename...<sp/>Args&gt;<sp/>\</highlight></codeline>
<codeline lineno="2174"><highlight class="preprocessor"><sp/><sp/>void<sp/>func(arg_type<sp/>arg0,<sp/>const<sp/>Args<sp/>&amp;<sp/>...<sp/>args)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2175"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>fmt::internal::ArgArray&lt;sizeof...(Args)&gt;<sp/>ArgArray;<sp/>\</highlight></codeline>
<codeline lineno="2176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typename<sp/>ArgArray::Type<sp/>array{<sp/>\</highlight></codeline>
<codeline lineno="2177"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>ArgArray::template<sp/>make&lt;fmt::BasicFormatter&lt;Char&gt;<sp/>&gt;(args)...};<sp/>\</highlight></codeline>
<codeline lineno="2178"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>func(arg0,<sp/>fmt::ArgList(fmt::internal::make_type(args...),<sp/>array));<sp/>\</highlight></codeline>
<codeline lineno="2179"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>a<sp/>variadic<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_VARIADIC_CTOR(ctor,<sp/>func,<sp/>arg0_type,<sp/>arg1_type)<sp/>\</highlight></codeline>
<codeline lineno="2183"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;typename...<sp/>Args&gt;<sp/>\</highlight></codeline>
<codeline lineno="2184"><highlight class="preprocessor"><sp/><sp/>ctor(arg0_type<sp/>arg0,<sp/>arg1_type<sp/>arg1,<sp/>const<sp/>Args<sp/>&amp;<sp/>...<sp/>args)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>fmt::internal::ArgArray&lt;sizeof...(Args)&gt;<sp/>ArgArray;<sp/>\</highlight></codeline>
<codeline lineno="2186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typename<sp/>ArgArray::Type<sp/>array{<sp/>\</highlight></codeline>
<codeline lineno="2187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>ArgArray::template<sp/>make&lt;fmt::BasicFormatter&lt;Char&gt;<sp/>&gt;(args)...};<sp/>\</highlight></codeline>
<codeline lineno="2188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>func(arg0,<sp/>arg1,<sp/>fmt::ArgList(fmt::internal::make_type(args...),<sp/>array));<sp/>\</highlight></codeline>
<codeline lineno="2189"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2190"><highlight class="normal"></highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"></highlight></codeline>
<codeline lineno="2193" refid="format_8h_1ac80624946184b29ccd34717410c65096" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_MAKE_REF(n)<sp/>\</highlight></codeline>
<codeline lineno="2194"><highlight class="preprocessor"><sp/><sp/>fmt::internal::MakeValue&lt;<sp/>fmt::BasicFormatter&lt;Char&gt;<sp/>&gt;(v##n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2195" refid="format_8h_1a4230ffbc609374a0f9d1bdcac4f9db31" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_MAKE_REF2(n)<sp/>v##n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2196"><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>a<sp/>wrapper<sp/>for<sp/>a<sp/>function<sp/>taking<sp/>one<sp/>argument<sp/>of<sp/>type<sp/>arg_type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>n<sp/>additional<sp/>arguments<sp/>of<sp/>arbitrary<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2199" refid="format_8h_1af93fc1d475de12d8d4aff81b1ff43d0e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_WRAP1(func,<sp/>arg_type,<sp/>n)<sp/>\</highlight></codeline>
<codeline lineno="2200"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;FMT_GEN(n,<sp/>FMT_MAKE_TEMPLATE_ARG)&gt;<sp/>\</highlight></codeline>
<codeline lineno="2201"><highlight class="preprocessor"><sp/><sp/>inline<sp/>void<sp/>func(arg_type<sp/>arg1,<sp/>FMT_GEN(n,<sp/>FMT_MAKE_ARG))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2202"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>const<sp/>fmt::internal::ArgArray&lt;n&gt;::Type<sp/>array<sp/>=<sp/>{FMT_GEN(n,<sp/>FMT_MAKE_REF)};<sp/>\</highlight></codeline>
<codeline lineno="2203"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>func(arg1,<sp/>fmt::ArgList(<sp/>\</highlight></codeline>
<codeline lineno="2204"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>fmt::internal::make_type(FMT_GEN(n,<sp/>FMT_MAKE_REF2)),<sp/>array));<sp/>\</highlight></codeline>
<codeline lineno="2205"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"></highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Emulates<sp/>a<sp/>variadic<sp/>function<sp/>returning<sp/>void<sp/>on<sp/>a<sp/>pre-C++11<sp/>compiler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2208" refid="format_8h_1a125f5651dc472ff4c5ef4662902e25c5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_VARIADIC_VOID(func,<sp/>arg_type)<sp/>\</highlight></codeline>
<codeline lineno="2209"><highlight class="preprocessor"><sp/><sp/>inline<sp/>void<sp/>func(arg_type<sp/>arg)<sp/>{<sp/>func(arg,<sp/>fmt::ArgList());<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2210"><highlight class="preprocessor"><sp/><sp/>FMT_WRAP1(func,<sp/>arg_type,<sp/>1)<sp/>FMT_WRAP1(func,<sp/>arg_type,<sp/>2)<sp/>\</highlight></codeline>
<codeline lineno="2211"><highlight class="preprocessor"><sp/><sp/>FMT_WRAP1(func,<sp/>arg_type,<sp/>3)<sp/>FMT_WRAP1(func,<sp/>arg_type,<sp/>4)<sp/>\</highlight></codeline>
<codeline lineno="2212"><highlight class="preprocessor"><sp/><sp/>FMT_WRAP1(func,<sp/>arg_type,<sp/>5)<sp/>FMT_WRAP1(func,<sp/>arg_type,<sp/>6)<sp/>\</highlight></codeline>
<codeline lineno="2213"><highlight class="preprocessor"><sp/><sp/>FMT_WRAP1(func,<sp/>arg_type,<sp/>7)<sp/>FMT_WRAP1(func,<sp/>arg_type,<sp/>8)<sp/>\</highlight></codeline>
<codeline lineno="2214"><highlight class="preprocessor"><sp/><sp/>FMT_WRAP1(func,<sp/>arg_type,<sp/>9)<sp/>FMT_WRAP1(func,<sp/>arg_type,<sp/>10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2215"><highlight class="normal"></highlight></codeline>
<codeline lineno="2216" refid="format_8h_1a958a38c4bea597054e6b420b23d6b332" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_CTOR(ctor,<sp/>func,<sp/>arg0_type,<sp/>arg1_type,<sp/>n)<sp/>\</highlight></codeline>
<codeline lineno="2217"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;FMT_GEN(n,<sp/>FMT_MAKE_TEMPLATE_ARG)&gt;<sp/>\</highlight></codeline>
<codeline lineno="2218"><highlight class="preprocessor"><sp/><sp/>ctor(arg0_type<sp/>arg0,<sp/>arg1_type<sp/>arg1,<sp/>FMT_GEN(n,<sp/>FMT_MAKE_ARG))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2219"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>const<sp/>fmt::internal::ArgArray&lt;n&gt;::Type<sp/>array<sp/>=<sp/>{FMT_GEN(n,<sp/>FMT_MAKE_REF)};<sp/>\</highlight></codeline>
<codeline lineno="2220"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>func(arg0,<sp/>arg1,<sp/>fmt::ArgList(<sp/>\</highlight></codeline>
<codeline lineno="2221"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>fmt::internal::make_type(FMT_GEN(n,<sp/>FMT_MAKE_REF2)),<sp/>array));<sp/>\</highlight></codeline>
<codeline lineno="2222"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Emulates<sp/>a<sp/>variadic<sp/>constructor<sp/>on<sp/>a<sp/>pre-C++11<sp/>compiler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2225" refid="format_8h_1a5a549dd8fe2e1f2c72dbbba54218394f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_VARIADIC_CTOR(ctor,<sp/>func,<sp/>arg0_type,<sp/>arg1_type)<sp/>\</highlight></codeline>
<codeline lineno="2226"><highlight class="preprocessor"><sp/><sp/>FMT_CTOR(ctor,<sp/>func,<sp/>arg0_type,<sp/>arg1_type,<sp/>1)<sp/>\</highlight></codeline>
<codeline lineno="2227"><highlight class="preprocessor"><sp/><sp/>FMT_CTOR(ctor,<sp/>func,<sp/>arg0_type,<sp/>arg1_type,<sp/>2)<sp/>\</highlight></codeline>
<codeline lineno="2228"><highlight class="preprocessor"><sp/><sp/>FMT_CTOR(ctor,<sp/>func,<sp/>arg0_type,<sp/>arg1_type,<sp/>3)<sp/>\</highlight></codeline>
<codeline lineno="2229"><highlight class="preprocessor"><sp/><sp/>FMT_CTOR(ctor,<sp/>func,<sp/>arg0_type,<sp/>arg1_type,<sp/>4)<sp/>\</highlight></codeline>
<codeline lineno="2230"><highlight class="preprocessor"><sp/><sp/>FMT_CTOR(ctor,<sp/>func,<sp/>arg0_type,<sp/>arg1_type,<sp/>5)<sp/>\</highlight></codeline>
<codeline lineno="2231"><highlight class="preprocessor"><sp/><sp/>FMT_CTOR(ctor,<sp/>func,<sp/>arg0_type,<sp/>arg1_type,<sp/>6)<sp/>\</highlight></codeline>
<codeline lineno="2232"><highlight class="preprocessor"><sp/><sp/>FMT_CTOR(ctor,<sp/>func,<sp/>arg0_type,<sp/>arg1_type,<sp/>7)<sp/>\</highlight></codeline>
<codeline lineno="2233"><highlight class="preprocessor"><sp/><sp/>FMT_CTOR(ctor,<sp/>func,<sp/>arg0_type,<sp/>arg1_type,<sp/>8)<sp/>\</highlight></codeline>
<codeline lineno="2234"><highlight class="preprocessor"><sp/><sp/>FMT_CTOR(ctor,<sp/>func,<sp/>arg0_type,<sp/>arg1_type,<sp/>9)<sp/>\</highlight></codeline>
<codeline lineno="2235"><highlight class="preprocessor"><sp/><sp/>FMT_CTOR(ctor,<sp/>func,<sp/>arg0_type,<sp/>arg1_type,<sp/>10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2237"><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>a<sp/>comma-separated<sp/>list<sp/>with<sp/>results<sp/>of<sp/>applying<sp/>f<sp/>to<sp/>pairs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(argument,<sp/>index).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2240" refid="format_8h_1a4cc0f61b722443b16c5f1108976a9a29" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_FOR_EACH1(f,<sp/>x0)<sp/>f(x0,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2241" refid="format_8h_1a56f160d15497bd2afcf96b02073c1bb0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_FOR_EACH2(f,<sp/>x0,<sp/>x1)<sp/>\</highlight></codeline>
<codeline lineno="2242"><highlight class="preprocessor"><sp/><sp/>FMT_FOR_EACH1(f,<sp/>x0),<sp/>f(x1,<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2243" refid="format_8h_1a0c997e7d57bb5e92fee72f0a7322f74b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_FOR_EACH3(f,<sp/>x0,<sp/>x1,<sp/>x2)<sp/>\</highlight></codeline>
<codeline lineno="2244"><highlight class="preprocessor"><sp/><sp/>FMT_FOR_EACH2(f,<sp/>x0<sp/>,x1),<sp/>f(x2,<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2245" refid="format_8h_1a5fc33959dc752d58a04640be7720be58" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_FOR_EACH4(f,<sp/>x0,<sp/>x1,<sp/>x2,<sp/>x3)<sp/>\</highlight></codeline>
<codeline lineno="2246"><highlight class="preprocessor"><sp/><sp/>FMT_FOR_EACH3(f,<sp/>x0,<sp/>x1,<sp/>x2),<sp/>f(x3,<sp/>3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2247" refid="format_8h_1ae3fabc476221bb06dd3d6af85c9692dd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_FOR_EACH5(f,<sp/>x0,<sp/>x1,<sp/>x2,<sp/>x3,<sp/>x4)<sp/>\</highlight></codeline>
<codeline lineno="2248"><highlight class="preprocessor"><sp/><sp/>FMT_FOR_EACH4(f,<sp/>x0,<sp/>x1,<sp/>x2,<sp/>x3),<sp/>f(x4,<sp/>4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2249" refid="format_8h_1ae988f066706485bc4b37a3d818e27848" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_FOR_EACH6(f,<sp/>x0,<sp/>x1,<sp/>x2,<sp/>x3,<sp/>x4,<sp/>x5)<sp/>\</highlight></codeline>
<codeline lineno="2250"><highlight class="preprocessor"><sp/><sp/>FMT_FOR_EACH5(f,<sp/>x0,<sp/>x1,<sp/>x2,<sp/>x3,<sp/>x4),<sp/>f(x5,<sp/>5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2251" refid="format_8h_1aeae47f26149b7140ff098dd9dc582d03" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_FOR_EACH7(f,<sp/>x0,<sp/>x1,<sp/>x2,<sp/>x3,<sp/>x4,<sp/>x5,<sp/>x6)<sp/>\</highlight></codeline>
<codeline lineno="2252"><highlight class="preprocessor"><sp/><sp/>FMT_FOR_EACH6(f,<sp/>x0,<sp/>x1,<sp/>x2,<sp/>x3,<sp/>x4,<sp/>x5),<sp/>f(x6,<sp/>6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2253" refid="format_8h_1a19679e2f14d327b364d16ac90f0563ac" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_FOR_EACH8(f,<sp/>x0,<sp/>x1,<sp/>x2,<sp/>x3,<sp/>x4,<sp/>x5,<sp/>x6,<sp/>x7)<sp/>\</highlight></codeline>
<codeline lineno="2254"><highlight class="preprocessor"><sp/><sp/>FMT_FOR_EACH7(f,<sp/>x0,<sp/>x1,<sp/>x2,<sp/>x3,<sp/>x4,<sp/>x5,<sp/>x6),<sp/>f(x7,<sp/>7)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2255" refid="format_8h_1ad78f0ebd1e537d53b8c00c288819d5cc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_FOR_EACH9(f,<sp/>x0,<sp/>x1,<sp/>x2,<sp/>x3,<sp/>x4,<sp/>x5,<sp/>x6,<sp/>x7,<sp/>x8)<sp/>\</highlight></codeline>
<codeline lineno="2256"><highlight class="preprocessor"><sp/><sp/>FMT_FOR_EACH8(f,<sp/>x0,<sp/>x1,<sp/>x2,<sp/>x3,<sp/>x4,<sp/>x5,<sp/>x6,<sp/>x7),<sp/>f(x8,<sp/>8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2257" refid="format_8h_1a1ca5ca0e6b98c8ae5b209d94c3bc2bff" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_FOR_EACH10(f,<sp/>x0,<sp/>x1,<sp/>x2,<sp/>x3,<sp/>x4,<sp/>x5,<sp/>x6,<sp/>x7,<sp/>x8,<sp/>x9)<sp/>\</highlight></codeline>
<codeline lineno="2258"><highlight class="preprocessor"><sp/><sp/>FMT_FOR_EACH9(f,<sp/>x0,<sp/>x1,<sp/>x2,<sp/>x3,<sp/>x4,<sp/>x5,<sp/>x6,<sp/>x7,<sp/>x8),<sp/>f(x9,<sp/>9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal"></highlight></codeline>
<codeline lineno="2264" refid="classfmt_1_1_system_error" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1_system_error" kindref="compound">SystemError</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_runtime_error" kindref="compound">internal::RuntimeError</ref><sp/>{</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err_code,<sp/>CStringRef<sp/>format_str,<sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>args);</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2269" refid="classfmt_1_1_system_error_1a705a49ba6ef5e06dced3b845bdc7330a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_system_error_1a705a49ba6ef5e06dced3b845bdc7330a" kindref="member">error_code_</ref>;</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"></highlight></codeline>
<codeline lineno="2271" refid="classfmt_1_1_system_error_1a5b10a8e6d426d0d8768944622a52ae51" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_system_error_1a5b10a8e6d426d0d8768944622a52ae51" kindref="member">Char</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>FMT_VARIADIC_CTOR.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"></highlight></codeline>
<codeline lineno="2273" refid="classfmt_1_1_system_error_1ad5ca71a52b8c3ed0cf06d7b1042e6b94" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_system_error_1ad5ca71a52b8c3ed0cf06d7b1042e6b94" kindref="member">SystemError</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2294" refid="classfmt_1_1_system_error_1a307c40b2542f53d7426b09319255d35c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_system_error_1a307c40b2542f53d7426b09319255d35c" kindref="member">SystemError</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code,<sp/>CStringRef<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/>init(error_code,<sp/>message,<sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref>());</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a5a549dd8fe2e1f2c72dbbba54218394f" kindref="member">FMT_VARIADIC_CTOR</ref>(<ref refid="classfmt_1_1_system_error" kindref="compound">SystemError</ref>,<sp/>init,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>CStringRef)</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"></highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/>~<ref refid="classfmt_1_1_system_error" kindref="compound">SystemError</ref>()<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"></highlight></codeline>
<codeline lineno="2301" refid="classfmt_1_1_system_error_1ae6a1e8889412ce7818d4ba22cdb511d7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_system_error_1ae6a1e8889412ce7818d4ba22cdb511d7" kindref="member">error_code</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error_code_;<sp/>}</highlight></codeline>
<codeline lineno="2302"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><ref refid="format_8h_1a9a4960b70582ed2620911a0b75dce0b5" kindref="member">FMT_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1a74db7f6993170e499037cdf7708a3957" kindref="member">format_system_error</ref>(<ref refid="classfmt_1_1_basic_writer" kindref="compound">fmt::Writer</ref><sp/>&amp;out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code,</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classfmt_1_1_basic_string_ref" kindref="compound">fmt::StringRef</ref><sp/>message)<sp/><ref refid="format_8h_1aef128913e8400683b1cbd1a3a2e11df3" kindref="member">FMT_NOEXCEPT</ref>;</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"></highlight></codeline>
<codeline lineno="2341"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter</ref><sp/>{</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Output<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2345" refid="classfmt_1_1_basic_writer_1a36f46828a1c9104a9af70d26042b600e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_buffer" kindref="compound">Buffer&lt;Char&gt;</ref><sp/>&amp;<ref refid="classfmt_1_1_basic_writer_1a36f46828a1c9104a9af70d26042b600e" kindref="member">buffer_</ref>;</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"></highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1acc0b3b39544c7a0930ae1567d952a8d4" kindref="member">FMT_DISALLOW_COPY_AND_ASSIGN</ref>(<ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter</ref>);</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"></highlight></codeline>
<codeline lineno="2349" refid="classfmt_1_1_basic_writer_1aedef35be3b8871bc55d10936289f1d9b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_char_traits" kindref="compound">internal::CharTraits&lt;Char&gt;::CharPtr</ref><sp/><ref refid="classfmt_1_1_basic_writer_1aedef35be3b8871bc55d10936289f1d9b" kindref="member">CharPtr</ref>;</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_SECURE_SCL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>pointer<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Char<sp/>*</highlight><highlight class="keyword">get</highlight><highlight class="normal">(CharPtr<sp/><ref refid="glew_8h_1aa5367c14d90f462230c2611b81b41d23" kindref="member">p</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1aa5367c14d90f462230c2611b81b41d23" kindref="member">p</ref>.base();<sp/>}</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2355" refid="classfmt_1_1_basic_writer_1a0a39421f8ca42914fafb7737482f063a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Char<sp/>*</highlight><highlight class="keyword">get</highlight><highlight class="normal">(Char<sp/>*<ref refid="glew_8h_1aa5367c14d90f462230c2611b81b41d23" kindref="member">p</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1aa5367c14d90f462230c2611b81b41d23" kindref="member">p</ref>;<sp/>}</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fills<sp/>the<sp/>padding<sp/>around<sp/>the<sp/>content<sp/>and<sp/>returns<sp/>the<sp/>pointer<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>content<sp/>area.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CharPtr<sp/>fill_padding(CharPtr<sp/><ref refid="glew_8h_1a6c0f527f003707dfaca177b40f406ed9" kindref="member">buffer</ref>,</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>total_size,<sp/>std::size_t<sp/>content_size,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>fill);</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"></highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Grows<sp/>the<sp/>buffer<sp/>by<sp/>n<sp/>characters<sp/>and<sp/>returns<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>newly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>allocated<sp/>area.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2365" refid="classfmt_1_1_basic_writer_1a974243e12ba11701c6007bbe080c9db5" refkind="member"><highlight class="normal"><sp/><sp/>CharPtr<sp/><ref refid="classfmt_1_1_basic_writer_1a974243e12ba11701c6007bbe080c9db5" kindref="member">grow_buffer</ref>(std::size_t<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>size<sp/>=<sp/>buffer_.<ref refid="classfmt_1_1_buffer_1a14fa72f0ddf584c14ffffb1446f598aa" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_.<ref refid="classfmt_1_1_buffer_1a20f893164dc20e8ea8c77810d4ea8d59" kindref="member">resize</ref>(size<sp/>+<sp/>n);</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1ab81ed2356d1a6f3bcf03c5bdf5f8d4f2" kindref="member">internal::make_ptr</ref>(&amp;buffer_[size],<sp/>n);</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Writes<sp/>an<sp/>unsigned<sp/>decimal<sp/>integer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>UInt&gt;</highlight></codeline>
<codeline lineno="2373" refid="classfmt_1_1_basic_writer_1a8236a787e18d88587ca79933a5cdd898" refkind="member"><highlight class="normal"><sp/><sp/>Char<sp/>*<ref refid="classfmt_1_1_basic_writer_1a8236a787e18d88587ca79933a5cdd898" kindref="member">write_unsigned_decimal</ref>(UInt<sp/>value,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>prefix_size<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_digits<sp/>=<sp/><ref refid="namespacefmt_1_1internal_1abfe52e52001fd2590fb2015cefe95e18" kindref="member">internal::count_digits</ref>(value);</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/>Char<sp/>*ptr<sp/>=<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">(grow_buffer(prefix_size<sp/>+<sp/>num_digits));</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1aeee1847660e999ab1e360ffa18515b88" kindref="member">internal::format_decimal</ref>(ptr<sp/>+<sp/>prefix_size,<sp/>value,<sp/>num_digits);</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"></highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Writes<sp/>a<sp/>decimal<sp/>integer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Int&gt;</highlight></codeline>
<codeline lineno="2382" refid="classfmt_1_1_basic_writer_1a206f93d73fd5101ff774218f45f6a1a0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_writer_1a206f93d73fd5101ff774218f45f6a1a0" kindref="member">write_decimal</ref>(Int<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_int_traits" kindref="compound">internal::IntTraits&lt;Int&gt;::MainType</ref><sp/>MainType;</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/>MainType<sp/>abs_value<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">MainType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacefmt_1_1internal_1a310d44c09812f7990e50800808c04673" kindref="member">internal::is_negative</ref>(value))<sp/>{</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>abs_value<sp/>=<sp/>0<sp/>-<sp/>abs_value;</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*write_unsigned_decimal(abs_value,<sp/>1)<sp/>=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>write_unsigned_decimal(abs_value,<sp/>0);</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>a<sp/>buffer<sp/>for<sp/>integer<sp/>formatting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2394" refid="classfmt_1_1_basic_writer_1ac7a6d8759863c9b3f8ef89da04c9c8a7" refkind="member"><highlight class="normal"><sp/><sp/>CharPtr<sp/><ref refid="classfmt_1_1_basic_writer_1ac7a6d8759863c9b3f8ef89da04c9c8a7" kindref="member">prepare_int_buffer</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_digits,</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_empty_spec" kindref="compound">EmptySpec</ref><sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prefix,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>prefix_size)<sp/>{</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>prefix_size<sp/>+<sp/>num_digits;</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/>CharPtr<sp/><ref refid="glew_8h_1aa5367c14d90f462230c2611b81b41d23" kindref="member">p</ref><sp/>=<sp/>grow_buffer(size);</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uninitialized_copy(prefix,<sp/>prefix<sp/>+<sp/>prefix_size,<sp/>p);</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p<sp/>+<sp/>size<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Spec&gt;</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/>CharPtr<sp/>prepare_int_buffer(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_digits,</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Spec<sp/>&amp;spec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prefix,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>prefix_size);</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"></highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Formats<sp/>an<sp/>integer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Spec&gt;</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_int(T<sp/>value,<sp/>Spec<sp/>spec);</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"></highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Formats<sp/>a<sp/>floating-point<sp/>number<sp/>(double<sp/>or<sp/>long<sp/>double).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_double(T<sp/>value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_format_spec" kindref="compound">FormatSpec</ref><sp/>&amp;spec);</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Writes<sp/>a<sp/>formatted<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StrChar&gt;</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/>CharPtr<sp/>write_str(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StrChar<sp/>*<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>,<sp/>std::size_t<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_align_spec" kindref="compound">AlignSpec</ref><sp/>&amp;spec);</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StrChar&gt;</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_str(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1_1_string_value" kindref="compound">internal::Arg::StringValue&lt;StrChar&gt;</ref><sp/>&amp;str,</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_format_spec" kindref="compound">FormatSpec</ref><sp/>&amp;spec);</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>following<sp/>methods<sp/>are<sp/>private<sp/>to<sp/>disallow<sp/>writing<sp/>wide<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>strings<sp/>to<sp/>a<sp/>char<sp/>stream.<sp/>If<sp/>you<sp/>want<sp/>to<sp/>print<sp/>a<sp/>wide<sp/>string<sp/>as<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pointer<sp/>as<sp/>std::ostream<sp/>does,<sp/>cast<sp/>it<sp/>to<sp/>const<sp/>void*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>implement!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator&lt;&lt;(typename<sp/>internal::WCharHelper&lt;wchar_t,<sp/>Char&gt;::Unsupported);</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1a2ab2dc3e996d40259b9fbb6f980c92fd" kindref="member">operator&lt;&lt;</ref>(</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_w_char_helper_1abc10996c32464f7de811c65b94ff56a9" kindref="member">internal::WCharHelper&lt;const wchar_t *, Char&gt;::Unsupported</ref>);</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Appends<sp/>floating-point<sp/>length<sp/>specifier<sp/>to<sp/>the<sp/>format<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>second<sp/>argument<sp/>is<sp/>only<sp/>used<sp/>for<sp/>overload<sp/>resolution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2432" refid="classfmt_1_1_basic_writer_1a777e9f92998d6263c606f5caf5581e73" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_writer_1a777e9f92998d6263c606f5caf5581e73" kindref="member">append_float_length</ref>(Char<sp/>*&amp;format_ptr,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/>*format_ptr++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;L&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2437" refid="classfmt_1_1_basic_writer_1a261f50fd77258dbc73be6e1588c64fa7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_writer_1a261f50fd77258dbc73be6e1588c64fa7" kindref="member">append_float_length</ref>(Char<sp/>*&amp;,<sp/>T)<sp/>{}</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Impl,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char_&gt;</highlight></codeline>
<codeline lineno="2440" refid="classfmt_1_1_basic_writer_1ac5db94b13180b25196a6e027c6efbfd7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1internal_1_1_arg_formatter_base" kindref="compound">internal::ArgFormatterBase</ref>;</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Impl,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char_&gt;</highlight></codeline>
<codeline lineno="2443" refid="classfmt_1_1_basic_writer_1a114ea3cd3810a9ac7244d79f11671c37" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1_basic_printf_arg_formatter" kindref="compound">BasicPrintfArgFormatter</ref>;</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2449" refid="classfmt_1_1_basic_writer_1a586c21bbbd38149bcf48fc30376afc9c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_writer_1a586c21bbbd38149bcf48fc30376afc9c" kindref="member">BasicWriter</ref>(<ref refid="classfmt_1_1_buffer" kindref="compound">Buffer&lt;Char&gt;</ref><sp/>&amp;<ref refid="glew_8h_1a7b01aaccb6b1691185992154f99088cb" kindref="member">b</ref>)<sp/>:<sp/>buffer_(b)<sp/>{}</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2457" refid="classfmt_1_1_basic_writer_1a25f6fc2e43d3bcfb3de9ac33afe6050d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_writer_1a25f6fc2e43d3bcfb3de9ac33afe6050d" kindref="member">~BasicWriter</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"></highlight></codeline>
<codeline lineno="2462" refid="classfmt_1_1_basic_writer_1a1b6721b4ba4d3fa18ac781a36616cc2a" refkind="member"><highlight class="normal"><sp/><sp/>std::size_t<sp/><ref refid="classfmt_1_1_basic_writer_1a1b6721b4ba4d3fa18ac781a36616cc2a" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer_.<ref refid="classfmt_1_1_buffer_1a14fa72f0ddf584c14ffffb1446f598aa" kindref="member">size</ref>();<sp/>}</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"></highlight></codeline>
<codeline lineno="2468" refid="classfmt_1_1_basic_writer_1a62d1c7b5be9c3580326320d5d178d096" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*<ref refid="classfmt_1_1_basic_writer_1a62d1c7b5be9c3580326320d5d178d096" kindref="member">data</ref>()<sp/>const<sp/>FMT_NOEXCEPT<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;buffer_[0];<sp/>}</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"></highlight></codeline>
<codeline lineno="2474" refid="classfmt_1_1_basic_writer_1a8b68001f5c1c0ea851ddaef27dcbc691" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*<ref refid="classfmt_1_1_basic_writer_1a8b68001f5c1c0ea851ddaef27dcbc691" kindref="member">c_str</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>size<sp/>=<sp/>buffer_.<ref refid="classfmt_1_1_buffer_1a14fa72f0ddf584c14ffffb1446f598aa" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_.<ref refid="classfmt_1_1_buffer_1a7f46a3ce8d86abe35904f6654bd4ea1e" kindref="member">reserve</ref>(size<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_[<ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;buffer_[0];</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"></highlight></codeline>
<codeline lineno="2486" refid="classfmt_1_1_basic_writer_1a91f06ced6e063ee77a99740e0e79faf6" refkind="member"><highlight class="normal"><sp/><sp/>std::basic_string&lt;Char&gt;<sp/><ref refid="classfmt_1_1_basic_writer_1a91f06ced6e063ee77a99740e0e79faf6" kindref="member">str</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::basic_string&lt;Char&gt;(&amp;buffer_[0],<sp/>buffer_.<ref refid="classfmt_1_1_buffer_1a14fa72f0ddf584c14ffffb1446f598aa" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"></highlight></codeline>
<codeline lineno="2515" refid="classfmt_1_1_basic_writer_1aaa83498c649d4a90ea3366bae62f4eac" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_writer_1aaa83498c649d4a90ea3366bae62f4eac" kindref="member">write</ref>(<ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">BasicCStringRef&lt;Char&gt;</ref><sp/><ref refid="glew_8h_1a1e3b09934060e9d373139c3557730d37" kindref="member">format</ref>,<sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfmt_1_1_basic_formatter" kindref="compound">BasicFormatter&lt;Char&gt;</ref>(args,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">).<ref refid="namespacefmt_1a638f25c535b3bfa12dc1478b11885b6f" kindref="member">format</ref>(format);</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a125f5651dc472ff4c5ef4662902e25c5" kindref="member">FMT_VARIADIC_VOID</ref>(<ref refid="namespacefmt_1_1internal_1a7c721969e9660580a237bd4130422ab6" kindref="member">write</ref>,<sp/><ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">BasicCStringRef&lt;Char&gt;</ref>)</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"></highlight></codeline>
<codeline lineno="2520" refid="classfmt_1_1_basic_writer_1a3d21148f336a76a71b39abb2fd6c0f88" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter</ref><sp/>&amp;operator&lt;&lt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/>write_decimal(value);</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2524" refid="classfmt_1_1_basic_writer_1a7ec4d6fb4cf9173b14d4ee100fd4a428" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter</ref><sp/>&amp;<ref refid="classfmt_1_1_basic_writer_1a7ec4d6fb4cf9173b14d4ee100fd4a428" kindref="member">operator&lt;&lt;</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*this<sp/>&lt;&lt;<sp/>IntFormatSpec&lt;unsigned&gt;(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2527" refid="classfmt_1_1_basic_writer_1a1fd4183e01fd56ec99af40431b32561b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter</ref><sp/>&amp;<ref refid="classfmt_1_1_basic_writer_1a1fd4183e01fd56ec99af40431b32561b" kindref="member">operator&lt;&lt;</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/>write_decimal(value);</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2531" refid="classfmt_1_1_basic_writer_1a4e0ef5415eb162ec991b69b930245094" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter</ref><sp/>&amp;<ref refid="classfmt_1_1_basic_writer_1a4e0ef5415eb162ec991b69b930245094" kindref="member">operator&lt;&lt;</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*this<sp/>&lt;&lt;<sp/>IntFormatSpec&lt;unsigned<sp/>long&gt;(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2534" refid="classfmt_1_1_basic_writer_1a2c876284b0b3b7f36cc0354e3348912a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter</ref><sp/>&amp;<ref refid="classfmt_1_1_basic_writer_1a2c876284b0b3b7f36cc0354e3348912a" kindref="member">operator&lt;&lt;</ref>(LongLong<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/>write_decimal(value);</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"></highlight></codeline>
<codeline lineno="2544" refid="classfmt_1_1_basic_writer_1afb01c45f06b2c13027343b74ce973a40" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter</ref><sp/>&amp;<ref refid="classfmt_1_1_basic_writer_1afb01c45f06b2c13027343b74ce973a40" kindref="member">operator&lt;&lt;</ref>(ULongLong<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*this<sp/>&lt;&lt;<sp/>IntFormatSpec&lt;ULongLong&gt;(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"></highlight></codeline>
<codeline lineno="2548" refid="classfmt_1_1_basic_writer_1afa435e67e3db3d214f0272b10c0a3878" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter</ref><sp/>&amp;<ref refid="classfmt_1_1_basic_writer_1afa435e67e3db3d214f0272b10c0a3878" kindref="member">operator&lt;&lt;</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/>write_double(value,<sp/><ref refid="structfmt_1_1_format_spec" kindref="compound">FormatSpec</ref>());</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"></highlight></codeline>
<codeline lineno="2559" refid="classfmt_1_1_basic_writer_1a90215ced4a6a9fcd5065f1ffd4105a4b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter</ref><sp/>&amp;<ref refid="classfmt_1_1_basic_writer_1a90215ced4a6a9fcd5065f1ffd4105a4b" kindref="member">operator&lt;&lt;</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/>write_double(value,<sp/><ref refid="structfmt_1_1_format_spec" kindref="compound">FormatSpec</ref>());</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"></highlight></codeline>
<codeline lineno="2567" refid="classfmt_1_1_basic_writer_1a4c7d6b3a40b4083f351de3f9ee0b3818" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter</ref><sp/>&amp;<ref refid="classfmt_1_1_basic_writer_1a4c7d6b3a40b4083f351de3f9ee0b3818" kindref="member">operator&lt;&lt;</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_.push_back(value);</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"></highlight></codeline>
<codeline lineno="2572" refid="classfmt_1_1_basic_writer_1a83967e3236b090ba035d5fc04317f4ed" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter</ref><sp/>&amp;<ref refid="classfmt_1_1_basic_writer_1a83967e3236b090ba035d5fc04317f4ed" kindref="member">operator&lt;&lt;</ref>(</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_null" kindref="compound">internal::WCharHelper&lt;wchar_t, Char&gt;::Supported</ref><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_.push_back(value);</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"></highlight></codeline>
<codeline lineno="2583" refid="classfmt_1_1_basic_writer_1a5f07d053b9f215b548ba3623e7a09212" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter</ref><sp/>&amp;operator&lt;&lt;(fmt::BasicStringRef&lt;Char&gt;<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*str<sp/>=<sp/>value.data();</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_.append(str,<sp/>str<sp/>+<sp/>value.size());</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"></highlight></codeline>
<codeline lineno="2589" refid="classfmt_1_1_basic_writer_1ac0483272173279436f3d47f49894cafb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter</ref><sp/>&amp;<ref refid="classfmt_1_1_basic_writer_1ac0483272173279436f3d47f49894cafb" kindref="member">operator&lt;&lt;</ref>(</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_null" kindref="compound">internal::WCharHelper&lt;StringRef, Char&gt;::Supported</ref><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str<sp/>=<sp/>value.data();</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_.append(str,<sp/>str<sp/>+<sp/>value.size());</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"></highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Spec,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FillChar&gt;</highlight></codeline>
<codeline lineno="2597" refid="classfmt_1_1_basic_writer_1a45ded4f76427103f3c189855be8c5d46" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter</ref><sp/>&amp;operator&lt;&lt;(IntFormatSpec&lt;T,<sp/>Spec,<sp/>FillChar&gt;<sp/>spec)<sp/>{</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1a61ae1bd2ba7d7666274927320c138283" kindref="member">internal::CharTraits&lt;Char&gt;::convert</ref>(FillChar());</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/>write_int(spec.value(),<sp/>spec);</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"></highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StrChar&gt;</highlight></codeline>
<codeline lineno="2604" refid="classfmt_1_1_basic_writer_1a79c23ed8ee17ee205ece04571f0dd79b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter</ref><sp/>&amp;operator&lt;&lt;(const<sp/>StrFormatSpec&lt;StrChar&gt;<sp/>&amp;spec)<sp/>{</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StrChar<sp/>*<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref><sp/>=<sp/>spec.<ref refid="classfmt_1_1_basic_writer_1a91f06ced6e063ee77a99740e0e79faf6" kindref="member">str</ref>();</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/>write_str(s,<sp/><ref refid="glew_8h_1a921fa83f7755f0139c84ba1831417a2e" kindref="member">std::char_traits&lt;Char&gt;::length</ref>(s),<sp/>spec);</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"></highlight></codeline>
<codeline lineno="2610" refid="classfmt_1_1_basic_writer_1aa5b6f4dd01854cbc3ebf06a7f2fce713" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_writer_1aa5b6f4dd01854cbc3ebf06a7f2fce713" kindref="member">clear</ref>()<sp/>FMT_NOEXCEPT<sp/>{<sp/>buffer_.clear();<sp/>}</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"></highlight></codeline>
<codeline lineno="2612" refid="classfmt_1_1_basic_writer_1a9b2a71d2ec402005fca013111bb576cb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_buffer" kindref="compound">Buffer&lt;Char&gt;</ref><sp/>&amp;<ref refid="classfmt_1_1_basic_writer_1a9b2a71d2ec402005fca013111bb576cb" kindref="member">buffer</ref>()<sp/>FMT_NOEXCEPT<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer_;<sp/>}</highlight></codeline>
<codeline lineno="2613"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"></highlight></codeline>
<codeline lineno="2615"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StrChar&gt;</highlight></codeline>
<codeline lineno="2617" refid="classfmt_1_1_basic_writer_1aa6ef59115b07ef0ad53fd9bb73bc64ee" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_writer_1aedef35be3b8871bc55d10936289f1d9b" kindref="member">BasicWriter&lt;Char&gt;::CharPtr</ref><sp/><ref refid="classfmt_1_1_basic_writer_1aa6ef59115b07ef0ad53fd9bb73bc64ee" kindref="member">BasicWriter&lt;Char&gt;::write_str</ref>(</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StrChar<sp/>*<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>,<sp/>std::size_t<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_align_spec" kindref="compound">AlignSpec</ref><sp/>&amp;spec)<sp/>{</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_writer_1aedef35be3b8871bc55d10936289f1d9b" kindref="member">CharPtr</ref><sp/>out<sp/>=<sp/><ref refid="classfmt_1_1_basic_writer_1aedef35be3b8871bc55d10936289f1d9b" kindref="member">CharPtr</ref>();</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec.<ref refid="structfmt_1_1_width_spec_1ad6624ee681712f695f133ba2e9d9ce36" kindref="member">width</ref>()<sp/>&gt;<sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>grow_buffer(spec.<ref refid="structfmt_1_1_width_spec_1ad6624ee681712f695f133ba2e9d9ce36" kindref="member">width</ref>());</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/>Char<sp/>fill<sp/>=<sp/><ref refid="classfmt_1_1internal_1_1_char_traits" kindref="compound">internal::CharTraits&lt;Char&gt;::cast</ref>(spec.<ref refid="structfmt_1_1_width_spec_1a28a9b78a0ebfd5830025eaf1c917bb16" kindref="member">fill</ref>());</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec.<ref refid="structfmt_1_1_align_spec_1abd14faffccf107e6e01bbd014e69262c" kindref="member">align</ref>()<sp/>==<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2ab4ab67c39e6d8562a116f3da83de391a" kindref="member">ALIGN_RIGHT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_fill_n(out,<sp/>spec.<ref refid="structfmt_1_1_width_spec_1ad6624ee681712f695f133ba2e9d9ce36" kindref="member">width</ref>()<sp/>-<sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>,<sp/>fill);</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>spec.<ref refid="structfmt_1_1_width_spec_1ad6624ee681712f695f133ba2e9d9ce36" kindref="member">width</ref>()<sp/>-<sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec.<ref refid="structfmt_1_1_align_spec_1abd14faffccf107e6e01bbd014e69262c" kindref="member">align</ref>()<sp/>==<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2ab9fa8e7eb41061a7670d4d8b43007f23" kindref="member">ALIGN_CENTER</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>fill_padding(out,<sp/>spec.<ref refid="structfmt_1_1_width_spec_1ad6624ee681712f695f133ba2e9d9ce36" kindref="member">width</ref>(),<sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>,<sp/>fill);</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_fill_n(out<sp/>+<sp/>size,<sp/>spec.<ref refid="structfmt_1_1_width_spec_1ad6624ee681712f695f133ba2e9d9ce36" kindref="member">width</ref>()<sp/>-<sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>,<sp/>fill);</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>grow_buffer(size);</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/>std::uninitialized_copy(s,<sp/>s<sp/>+<sp/>size,<sp/>out);</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="2636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"></highlight></codeline>
<codeline lineno="2638"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StrChar&gt;</highlight></codeline>
<codeline lineno="2640" refid="classfmt_1_1_basic_writer_1a8914b930ac43788f801af0008f7b743e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_writer_1aa6ef59115b07ef0ad53fd9bb73bc64ee" kindref="member">BasicWriter&lt;Char&gt;::write_str</ref>(</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1_1_string_value" kindref="compound">internal::Arg::StringValue&lt;StrChar&gt;</ref><sp/>&amp;<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_format_spec" kindref="compound">FormatSpec</ref><sp/>&amp;spec)<sp/>{</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>StrChar<sp/>is<sp/>convertible<sp/>to<sp/>Char.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><ref refid="namespacefmt_1_1internal_1a61ae1bd2ba7d7666274927320c138283" kindref="member">internal::CharTraits&lt;Char&gt;::convert</ref>(StrChar());</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec.<ref refid="structfmt_1_1_format_spec_1aa6f085ef583f708dde9636c03adea6ab" kindref="member">type_</ref><sp/>&amp;&amp;<sp/>spec.<ref refid="structfmt_1_1_format_spec_1aa6f085ef583f708dde9636c03adea6ab" kindref="member">type_</ref><sp/>!=<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1a92bdabe812efd23c6f9686ddd6a7805f" kindref="member">internal::report_unknown_type</ref>(spec.<ref refid="structfmt_1_1_format_spec_1aa6f085ef583f708dde9636c03adea6ab" kindref="member">type_</ref>,<sp/></highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StrChar<sp/>*str_value<sp/>=<sp/>s.<ref refid="structfmt_1_1internal_1_1_value_1_1_string_value_1a5fcfe566f56e4bbf08748303cd7fa6ca" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/>std::size_t<sp/>str_size<sp/>=<sp/>s.<ref refid="structfmt_1_1internal_1_1_value_1_1_string_value_1abd1880f3fb3618e37fb3df74ff623146" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str_size<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!str_value)<sp/>{</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(</highlight><highlight class="stringliteral">&quot;string<sp/>pointer<sp/>is<sp/>null&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/>std::size_t<sp/><ref refid="glew_8h_1ae6165268264b393d031f89082216499d" kindref="member">precision</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(spec.<ref refid="structfmt_1_1_format_spec_1a8444724bdd0a55bf3226a17e321c12c5" kindref="member">precision_</ref>);</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec.<ref refid="structfmt_1_1_format_spec_1a8444724bdd0a55bf3226a17e321c12c5" kindref="member">precision_</ref><sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>precision<sp/>&lt;<sp/>str_size)</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/>str_size<sp/>=<sp/><ref refid="glew_8h_1ae6165268264b393d031f89082216499d" kindref="member">precision</ref>;</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/>write_str(str_value,<sp/>str_size,<sp/>spec);</highlight></codeline>
<codeline lineno="2657"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"></highlight></codeline>
<codeline lineno="2659"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_writer_1aedef35be3b8871bc55d10936289f1d9b" kindref="member">BasicWriter&lt;Char&gt;::CharPtr</ref></highlight></codeline>
<codeline lineno="2661" refid="classfmt_1_1_basic_writer_1a1fd4d07988b8628b3316b4881e4a4f74" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_writer_1a1fd4d07988b8628b3316b4881e4a4f74" kindref="member">BasicWriter&lt;Char&gt;::fill_padding</ref>(</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfmt_1_1_basic_writer_1aedef35be3b8871bc55d10936289f1d9b" kindref="member">CharPtr</ref><sp/><ref refid="glew_8h_1a6c0f527f003707dfaca177b40f406ed9" kindref="member">buffer</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>total_size,</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>content_size,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>fill)<sp/>{</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/>std::size_t<sp/>padding<sp/>=<sp/>total_size<sp/>-<sp/>content_size;</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/>std::size_t<sp/>left_padding<sp/>=<sp/>padding<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/>Char<sp/>fill_char<sp/>=<sp/><ref refid="classfmt_1_1internal_1_1_char_traits" kindref="compound">internal::CharTraits&lt;Char&gt;::cast</ref>(fill);</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/>std::uninitialized_fill_n(buffer,<sp/>left_padding,<sp/>fill_char);</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/>buffer<sp/>+=<sp/>left_padding;</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_writer_1aedef35be3b8871bc55d10936289f1d9b" kindref="member">CharPtr</ref><sp/>content<sp/>=<sp/><ref refid="glew_8h_1a6c0f527f003707dfaca177b40f406ed9" kindref="member">buffer</ref>;</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/>std::uninitialized_fill_n(buffer<sp/>+<sp/>content_size,</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padding<sp/>-<sp/>left_padding,<sp/>fill_char);</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>content;</highlight></codeline>
<codeline lineno="2673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"></highlight></codeline>
<codeline lineno="2675"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Spec&gt;</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_writer_1aedef35be3b8871bc55d10936289f1d9b" kindref="member">BasicWriter&lt;Char&gt;::CharPtr</ref></highlight></codeline>
<codeline lineno="2678" refid="classfmt_1_1_basic_writer_1a64e806cd940571bd6da935add3034604" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_writer_1ac7a6d8759863c9b3f8ef89da04c9c8a7" kindref="member">BasicWriter&lt;Char&gt;::prepare_int_buffer</ref>(</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_digits,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Spec<sp/>&amp;spec,</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prefix,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>prefix_size)<sp/>{</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>spec.width();</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2" kindref="member">Alignment</ref><sp/>align<sp/>=<sp/>spec.align();</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/>Char<sp/>fill<sp/>=<sp/><ref refid="classfmt_1_1internal_1_1_char_traits" kindref="compound">internal::CharTraits&lt;Char&gt;::cast</ref>(spec.fill());</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec.precision()<sp/>&gt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(num_digits))<sp/>{</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Octal<sp/>prefix<sp/>&apos;0&apos;<sp/>is<sp/>counted<sp/>as<sp/>a<sp/>digit,<sp/>so<sp/>ignore<sp/>it<sp/>if<sp/>precision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prefix_size<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>prefix[prefix_size<sp/>-<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--prefix_size;</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>number_size<sp/>=</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prefix_size<sp/>+<sp/><ref refid="namespacefmt_1_1internal_1a28bed1291226be35437bc3173c19c205" kindref="member">internal::to_unsigned</ref>(spec.precision());</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfmt_1_1_align_spec" kindref="compound">AlignSpec</ref><sp/>subspec(number_size,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">,<sp/>ALIGN_NUMERIC);</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(number_size<sp/>&gt;=<sp/>width)</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prepare_int_buffer(num_digits,<sp/>subspec,<sp/>prefix,<sp/>prefix_size);</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_.reserve(width);</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>fill_size<sp/>=<sp/>width<sp/>-<sp/>number_size;</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(align<sp/>!=<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2a37d3391e09dceceb0e75094f691b02eb" kindref="member">ALIGN_LEFT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classfmt_1_1_basic_writer_1aedef35be3b8871bc55d10936289f1d9b" kindref="member">CharPtr</ref><sp/><ref refid="glew_8h_1aa5367c14d90f462230c2611b81b41d23" kindref="member">p</ref><sp/>=<sp/>grow_buffer(fill_size);</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_fill(p,<sp/>p<sp/>+<sp/>fill_size,<sp/>fill);</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfmt_1_1_basic_writer_1aedef35be3b8871bc55d10936289f1d9b" kindref="member">CharPtr</ref><sp/><ref refid="glew_8h_1a5fb5836a37f7607602a16ad733ed6357" kindref="member">result</ref><sp/>=<sp/>prepare_int_buffer(</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_digits,<sp/>subspec,<sp/>prefix,<sp/>prefix_size);</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(align<sp/>==<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2a37d3391e09dceceb0e75094f691b02eb" kindref="member">ALIGN_LEFT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classfmt_1_1_basic_writer_1aedef35be3b8871bc55d10936289f1d9b" kindref="member">CharPtr</ref><sp/><ref refid="glew_8h_1aa5367c14d90f462230c2611b81b41d23" kindref="member">p</ref><sp/>=<sp/>grow_buffer(fill_size);</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_fill(p,<sp/>p<sp/>+<sp/>fill_size,<sp/>fill);</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a5fb5836a37f7607602a16ad733ed6357" kindref="member">result</ref>;</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>prefix_size<sp/>+<sp/>num_digits;</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>&lt;=<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfmt_1_1_basic_writer_1aedef35be3b8871bc55d10936289f1d9b" kindref="member">CharPtr</ref><sp/><ref refid="glew_8h_1aa5367c14d90f462230c2611b81b41d23" kindref="member">p</ref><sp/>=<sp/>grow_buffer(size);</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uninitialized_copy(prefix,<sp/>prefix<sp/>+<sp/>prefix_size,<sp/>p);</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p<sp/>+<sp/>size<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_writer_1aedef35be3b8871bc55d10936289f1d9b" kindref="member">CharPtr</ref><sp/><ref refid="glew_8h_1aa5367c14d90f462230c2611b81b41d23" kindref="member">p</ref><sp/>=<sp/>grow_buffer(width);</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_writer_1aedef35be3b8871bc55d10936289f1d9b" kindref="member">CharPtr</ref><sp/><ref refid="glew_8h_1a432111147038972f06e049e18a837002" kindref="member">end</ref><sp/>=<sp/>p<sp/>+<sp/><ref refid="glew_8h_1aa105b18f96e6bc2485cb7f576a7fb9ba" kindref="member">width</ref>;</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(align<sp/>==<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2a37d3391e09dceceb0e75094f691b02eb" kindref="member">ALIGN_LEFT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uninitialized_copy(prefix,<sp/>prefix<sp/>+<sp/>prefix_size,<sp/>p);</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>+=<sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uninitialized_fill(p,<sp/>end,<sp/>fill);</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(align<sp/>==<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2ab9fa8e7eb41061a7670d4d8b43007f23" kindref="member">ALIGN_CENTER</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>fill_padding(p,<sp/>width,<sp/>size,<sp/>fill);</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uninitialized_copy(prefix,<sp/>prefix<sp/>+<sp/>prefix_size,<sp/>p);</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>+=<sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(align<sp/>==<sp/>ALIGN_NUMERIC)<sp/>{</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prefix_size<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>std::uninitialized_copy(prefix,<sp/>prefix<sp/>+<sp/>prefix_size,<sp/>p);</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>-=<sp/>prefix_size;</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_copy(prefix,<sp/>prefix<sp/>+<sp/>prefix_size,<sp/>end<sp/>-<sp/>size);</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uninitialized_fill(p,<sp/>end<sp/>-<sp/>size,<sp/>fill);</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="glew_8h_1a432111147038972f06e049e18a837002" kindref="member">end</ref>;</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"></highlight></codeline>
<codeline lineno="2739"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Spec&gt;</highlight></codeline>
<codeline lineno="2741" refid="classfmt_1_1_basic_writer_1a2eb820ad907cede8df8226af444f59d6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_writer_1a2eb820ad907cede8df8226af444f59d6" kindref="member">BasicWriter&lt;Char&gt;::write_int</ref>(T<sp/>value,<sp/>Spec<sp/>spec)<sp/>{</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>prefix_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_int_traits" kindref="compound">internal::IntTraits&lt;T&gt;::MainType</ref><sp/>UnsignedType;</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/>UnsignedType<sp/>abs_value<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">UnsignedType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>prefix[4]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacefmt_1_1internal_1a310d44c09812f7990e50800808c04673" kindref="member">internal::is_negative</ref>(value))<sp/>{</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/>prefix[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/>++prefix_size;</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/>abs_value<sp/>=<sp/>0<sp/>-<sp/>abs_value;</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec.flag(<ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea41bce447447361e7a4b3e9d8a84877db" kindref="member">SIGN_FLAG</ref>))<sp/>{</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/>prefix[0]<sp/>=<sp/>spec.flag(<ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea2b053d8fd806a73492750893f902a694" kindref="member">PLUS_FLAG</ref>)<sp/>?<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/>++prefix_size;</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(spec.type())<sp/>{</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_digits<sp/>=<sp/><ref refid="namespacefmt_1_1internal_1abfe52e52001fd2590fb2015cefe95e18" kindref="member">internal::count_digits</ref>(abs_value);</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfmt_1_1_basic_writer_1aedef35be3b8871bc55d10936289f1d9b" kindref="member">CharPtr</ref><sp/><ref refid="glew_8h_1aa5367c14d90f462230c2611b81b41d23" kindref="member">p</ref><sp/>=<sp/>prepare_int_buffer(num_digits,<sp/>spec,<sp/>prefix,<sp/>prefix_size)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1aeee1847660e999ab1e360ffa18515b88" kindref="member">internal::format_decimal</ref>(</highlight><highlight class="keyword">get</highlight><highlight class="normal">(p),<sp/>abs_value,<sp/>0);</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;X&apos;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/>UnsignedType<sp/>n<sp/>=<sp/>abs_value;</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec.flag(<ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea02280924fe002ad252cfbcc0cf6492aa" kindref="member">HASH_FLAG</ref>))<sp/>{</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prefix[prefix_size++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prefix[prefix_size++]<sp/>=<sp/>spec.type();</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_digits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++num_digits;</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((n<sp/>&gt;&gt;=<sp/>4)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/>Char<sp/>*<ref refid="glew_8h_1aa5367c14d90f462230c2611b81b41d23" kindref="member">p</ref><sp/>=<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">(prepare_int_buffer(</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_digits,<sp/>spec,<sp/>prefix,<sp/>prefix_size));</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>abs_value;</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*digits<sp/>=<sp/>spec.type()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal"><sp/>?</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;0123456789abcdef&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;0123456789ABCDEF&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p--<sp/>=<sp/>digits[n<sp/>&amp;<sp/>0xf];</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((n<sp/>&gt;&gt;=<sp/>4)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;B&apos;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/>UnsignedType<sp/>n<sp/>=<sp/>abs_value;</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec.flag(<ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea02280924fe002ad252cfbcc0cf6492aa" kindref="member">HASH_FLAG</ref>))<sp/>{</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prefix[prefix_size++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prefix[prefix_size++]<sp/>=<sp/>spec.type();</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_digits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++num_digits;</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((n<sp/>&gt;&gt;=<sp/>1)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/>Char<sp/>*<ref refid="glew_8h_1aa5367c14d90f462230c2611b81b41d23" kindref="member">p</ref><sp/>=<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">(prepare_int_buffer(num_digits,<sp/>spec,<sp/>prefix,<sp/>prefix_size));</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>abs_value;</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p--<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>(n<sp/>&amp;<sp/>1));</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((n<sp/>&gt;&gt;=<sp/>1)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/>UnsignedType<sp/>n<sp/>=<sp/>abs_value;</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec.flag(<ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea02280924fe002ad252cfbcc0cf6492aa" kindref="member">HASH_FLAG</ref>))</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prefix[prefix_size++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_digits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++num_digits;</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((n<sp/>&gt;&gt;=<sp/>3)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/>Char<sp/>*<ref refid="glew_8h_1aa5367c14d90f462230c2611b81b41d23" kindref="member">p</ref><sp/>=<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">(prepare_int_buffer(num_digits,<sp/>spec,<sp/>prefix,<sp/>prefix_size));</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>abs_value;</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p--<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>(n<sp/>&amp;<sp/>7));</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((n<sp/>&gt;&gt;=<sp/>3)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_digits<sp/>=<sp/><ref refid="namespacefmt_1_1internal_1abfe52e52001fd2590fb2015cefe95e18" kindref="member">internal::count_digits</ref>(abs_value);</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfmt_1_1_basic_string_ref" kindref="compound">fmt::StringRef</ref><sp/>sep<sp/>=<sp/><ref refid="namespacefmt_1_1internal_1a17c95c81f680e8641fd4d2b21bf7b381" kindref="member">internal::thousands_sep</ref>(std::localeconv());</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_digits<sp/>+<sp/>sep.<ref refid="classfmt_1_1_basic_string_ref_1ae38d9106dd5bec69488e5464aedc266a" kindref="member">size</ref>()<sp/>*<sp/>((num_digits<sp/>-<sp/>1)<sp/>/<sp/>3));</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfmt_1_1_basic_writer_1aedef35be3b8871bc55d10936289f1d9b" kindref="member">CharPtr</ref><sp/><ref refid="glew_8h_1aa5367c14d90f462230c2611b81b41d23" kindref="member">p</ref><sp/>=<sp/>prepare_int_buffer(size,<sp/>spec,<sp/>prefix,<sp/>prefix_size)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1aeee1847660e999ab1e360ffa18515b88" kindref="member">internal::format_decimal</ref>(</highlight><highlight class="keyword">get</highlight><highlight class="normal">(p),<sp/>abs_value,<sp/>0,<sp/><ref refid="classfmt_1_1internal_1_1_thousands_sep" kindref="compound">internal::ThousandsSep</ref>(sep));</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1a92bdabe812efd23c6f9686ddd6a7805f" kindref="member">internal::report_unknown_type</ref>(</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spec.type(),<sp/>spec.flag(<ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea59699c6d9db5a05403ebc3528e5f0694" kindref="member">CHAR_FLAG</ref>)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;char&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;integer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"></highlight></codeline>
<codeline lineno="2829"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2831" refid="classfmt_1_1_basic_writer_1aa69a013920916ccc74ca7ac5e971abe7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_writer_1aa69a013920916ccc74ca7ac5e971abe7" kindref="member">BasicWriter&lt;Char&gt;::write_double</ref>(T<sp/>value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_format_spec" kindref="compound">FormatSpec</ref><sp/>&amp;spec)<sp/>{</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>spec.<ref refid="structfmt_1_1_format_spec_1a4da20f7a988a694ce02f01d1ffb3d783" kindref="member">type</ref>();</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>upper<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MSVC&apos;s<sp/>printf<sp/>doesn&apos;t<sp/>support<sp/>&apos;F&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fall<sp/>through.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;G&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/>upper<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1a92bdabe812efd23c6f9686ddd6a7805f" kindref="member">internal::report_unknown_type</ref>(type,<sp/></highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"></highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>isnegative<sp/>instead<sp/>of<sp/>value<sp/>&lt;<sp/>0<sp/>because<sp/>the<sp/>latter<sp/>is<sp/>always</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>false<sp/>for<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classstd_1_1numeric__limits_3_01fmt_1_1internal_1_1_dummy_int_01_4_1a1cc82945f63918e9a8603d3ef750990d" kindref="member">internal::FPUtil::isnegative</ref>(static_cast&lt;double&gt;(value)))<sp/>{</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/>sign<sp/>=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>-<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec.<ref refid="structfmt_1_1_format_spec_1a2ee0e9bf9979641418a8b30b4e7740f2" kindref="member">flag</ref>(<ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea41bce447447361e7a4b3e9d8a84877db" kindref="member">SIGN_FLAG</ref>))<sp/>{</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/>sign<sp/>=<sp/>spec.<ref refid="structfmt_1_1_format_spec_1a2ee0e9bf9979641418a8b30b4e7740f2" kindref="member">flag</ref>(<ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea2b053d8fd806a73492750893f902a694" kindref="member">PLUS_FLAG</ref>)<sp/>?<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"></highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classstd_1_1numeric__limits_3_01fmt_1_1internal_1_1_dummy_int_01_4_1a89433356fbf5b68eb0c13208a5e3b6b1" kindref="member">internal::FPUtil::isnotanumber</ref>(value))<sp/>{</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Format<sp/>NaN<sp/>ourselves<sp/>because<sp/>sprintf&apos;s<sp/>output<sp/>is<sp/>not<sp/>consistent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>across<sp/>platforms.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nan_size<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nan<sp/>=<sp/>upper<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>NAN&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;<sp/>nan&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sign)<sp/>{</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--nan_size;</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++nan;</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfmt_1_1_basic_writer_1aedef35be3b8871bc55d10936289f1d9b" kindref="member">CharPtr</ref><sp/>out<sp/>=<sp/>write_str(nan,<sp/>nan_size,<sp/>spec);</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sign)</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out<sp/>=<sp/>sign;</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"></highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classstd_1_1numeric__limits_3_01fmt_1_1internal_1_1_dummy_int_01_4_1abd1469673d6c36a014a988bce1dfb0ee" kindref="member">internal::FPUtil::isinfinity</ref>(value))<sp/>{</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Format<sp/>infinity<sp/>ourselves<sp/>because<sp/>sprintf&apos;s<sp/>output<sp/>is<sp/>not<sp/>consistent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>across<sp/>platforms.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>inf_size<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*inf<sp/>=<sp/>upper<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>INF&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;<sp/>inf&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sign)<sp/>{</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--inf_size;</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++inf;</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfmt_1_1_basic_writer_1aedef35be3b8871bc55d10936289f1d9b" kindref="member">CharPtr</ref><sp/>out<sp/>=<sp/>write_str(inf,<sp/>inf_size,<sp/>spec);</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sign)</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out<sp/>=<sp/>sign;</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"></highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/>std::size_t<sp/><ref refid="glew_8h_1ac915cd848f42b26af51745f204a3b9af" kindref="member">offset</ref><sp/>=<sp/>buffer_.size();</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>spec.<ref refid="structfmt_1_1_width_spec_1ad6624ee681712f695f133ba2e9d9ce36" kindref="member">width</ref>();</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sign)<sp/>{</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_.reserve(buffer_.size()<sp/>+<sp/>(width<sp/>&gt;<sp/>1u<sp/>?<sp/>width<sp/>:<sp/>1u));</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--<ref refid="glew_8h_1aa105b18f96e6bc2485cb7f576a7fb9ba" kindref="member">width</ref>;</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="glew_8h_1ac915cd848f42b26af51745f204a3b9af" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"></highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Build<sp/>format<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>MAX_FORMAT_SIZE<sp/>=<sp/>10};<sp/></highlight><highlight class="comment">//<sp/>longest<sp/>format:<sp/>%#-*.*Lg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/>Char<sp/><ref refid="glew_8h_1a1e3b09934060e9d373139c3557730d37" kindref="member">format</ref>[MAX_FORMAT_SIZE];</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/>Char<sp/>*format_ptr<sp/>=<sp/><ref refid="namespacefmt_1a638f25c535b3bfa12dc1478b11885b6f" kindref="member">format</ref>;</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/>*format_ptr++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>width_for_sprintf<sp/>=<sp/><ref refid="glew_8h_1aa105b18f96e6bc2485cb7f576a7fb9ba" kindref="member">width</ref>;</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec.<ref refid="structfmt_1_1_format_spec_1a2ee0e9bf9979641418a8b30b4e7740f2" kindref="member">flag</ref>(<ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea02280924fe002ad252cfbcc0cf6492aa" kindref="member">HASH_FLAG</ref>))</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/>*format_ptr++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec.<ref refid="structfmt_1_1_align_spec_1abd14faffccf107e6e01bbd014e69262c" kindref="member">align</ref>()<sp/>==<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2ab9fa8e7eb41061a7670d4d8b43007f23" kindref="member">ALIGN_CENTER</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/>width_for_sprintf<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec.<ref refid="structfmt_1_1_align_spec_1abd14faffccf107e6e01bbd014e69262c" kindref="member">align</ref>()<sp/>==<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2a37d3391e09dceceb0e75094f691b02eb" kindref="member">ALIGN_LEFT</ref>)</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*format_ptr++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*format_ptr++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec.<ref refid="structfmt_1_1_format_spec_1a4d48f0000dc495b3cc1c6f222e2036a9" kindref="member">precision</ref>()<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/>*format_ptr++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/>*format_ptr++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"></highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/>append_float_length(format_ptr,<sp/>value);</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/>*format_ptr++<sp/>=<sp/><ref refid="glew_8h_1a8d78e2e8a676abd547a596dd84811285" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/>*format_ptr<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"></highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Format<sp/>using<sp/>snprintf.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/>Char<sp/>fill<sp/>=<sp/><ref refid="classfmt_1_1internal_1_1_char_traits" kindref="compound">internal::CharTraits&lt;Char&gt;::cast</ref>(spec.<ref refid="structfmt_1_1_width_spec_1a28a9b78a0ebfd5830025eaf1c917bb16" kindref="member">fill</ref>());</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/>Char<sp/>*<ref refid="glew_8h_1ac55adc720a3098c1b454d2a4647f4361" kindref="member">start</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>buffer_size<sp/>=<sp/>buffer_.capacity()<sp/>-<sp/><ref refid="glew_8h_1ac915cd848f42b26af51745f204a3b9af" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MSVC&apos;s<sp/>vsnprintf_s<sp/>doesn&apos;t<sp/>work<sp/>with<sp/>zero<sp/>size,<sp/>so<sp/>reserve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>space<sp/>for<sp/>at<sp/>least<sp/>one<sp/>extra<sp/>character<sp/>to<sp/>make<sp/>the<sp/>size<sp/>non-zero.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>buffer&apos;s<sp/>capacity<sp/>will<sp/>increase<sp/>by<sp/>more<sp/>than<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer_size<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer_.reserve(offset<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer_size<sp/>=<sp/>buffer_.capacity()<sp/>-<sp/><ref refid="glew_8h_1ac915cd848f42b26af51745f204a3b9af" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>&amp;buffer_[<ref refid="glew_8h_1ac915cd848f42b26af51745f204a3b9af" kindref="member">offset</ref>];</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a5fb5836a37f7607602a16ad733ed6357" kindref="member">result</ref><sp/>=<sp/><ref refid="classfmt_1_1internal_1_1_char_traits" kindref="compound">internal::CharTraits&lt;Char&gt;::format_float</ref>(</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,<sp/>buffer_size,<sp/>format,<sp/>width_for_sprintf,<sp/>spec.<ref refid="structfmt_1_1_format_spec_1a4d48f0000dc495b3cc1c6f222e2036a9" kindref="member">precision</ref>(),<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/><ref refid="namespacefmt_1_1internal_1a28bed1291226be35437bc3173c19c205" kindref="member">internal::to_unsigned</ref>(result);</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>+<sp/>n<sp/>&lt;<sp/>buffer_.capacity())</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>buffer<sp/>is<sp/>large<sp/>enough<sp/>-<sp/>continue<sp/>with<sp/>formatting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer_.reserve(offset<sp/>+<sp/>n<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>result<sp/>is<sp/>negative<sp/>we<sp/>ask<sp/>to<sp/>increase<sp/>the<sp/>capacity<sp/>by<sp/>at<sp/>least<sp/>1,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>as<sp/>std::vector,<sp/>the<sp/>buffer<sp/>grows<sp/>exponentially.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer_.reserve(buffer_.capacity()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sign)<sp/>{</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((spec.<ref refid="structfmt_1_1_align_spec_1abd14faffccf107e6e01bbd014e69262c" kindref="member">align</ref>()<sp/>!=<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2ab4ab67c39e6d8562a116f3da83de391a" kindref="member">ALIGN_RIGHT</ref><sp/>&amp;&amp;<sp/>spec.<ref refid="structfmt_1_1_align_spec_1abd14faffccf107e6e01bbd014e69262c" kindref="member">align</ref>()<sp/>!=<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2a63e66a16a075b0b22e5fae027892057f" kindref="member">ALIGN_DEFAULT</ref>)<sp/>||</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*start<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*(start<sp/>-<sp/>1)<sp/>=<sp/>sign;</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*(start<sp/>-<sp/>1)<sp/>=<sp/>fill;</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>;</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec.<ref refid="structfmt_1_1_align_spec_1abd14faffccf107e6e01bbd014e69262c" kindref="member">align</ref>()<sp/>==<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2ab9fa8e7eb41061a7670d4d8b43007f23" kindref="member">ALIGN_CENTER</ref><sp/>&amp;&amp;<sp/>spec.<ref refid="structfmt_1_1_width_spec_1ad6624ee681712f695f133ba2e9d9ce36" kindref="member">width</ref>()<sp/>&gt;<sp/><ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/><sp/>width<sp/>=<sp/>spec.<ref refid="structfmt_1_1_width_spec_1ad6624ee681712f695f133ba2e9d9ce36" kindref="member">width</ref>();</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfmt_1_1_basic_writer_1aedef35be3b8871bc55d10936289f1d9b" kindref="member">CharPtr</ref><sp/><ref refid="glew_8h_1aa5367c14d90f462230c2611b81b41d23" kindref="member">p</ref><sp/>=<sp/>grow_buffer(width);</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memmove(</highlight><highlight class="keyword">get</highlight><highlight class="normal">(p)<sp/>+<sp/>(width<sp/>-<sp/>n)<sp/>/<sp/>2,<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">(p),<sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Char));</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/>fill_padding(p,<sp/>spec.<ref refid="structfmt_1_1_width_spec_1ad6624ee681712f695f133ba2e9d9ce36" kindref="member">width</ref>(),<sp/><ref refid="glew_8h_1a4cf5f6946cc0a65dbe0d2406017e469c" kindref="member">n</ref>,<sp/>fill);</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec.<ref refid="structfmt_1_1_width_spec_1a28a9b78a0ebfd5830025eaf1c917bb16" kindref="member">fill</ref>()<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>||<sp/>sign)<sp/>{</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*start<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*start++<sp/>=<sp/>fill;</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sign)</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*(start<sp/>-<sp/>1)<sp/>=<sp/>sign;</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/>grow_buffer(n);</highlight></codeline>
<codeline lineno="2982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"></highlight></codeline>
<codeline lineno="3018"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Allocator<sp/>=<sp/>std::allocator&lt;Char&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="3019" refid="classfmt_1_1_basic_memory_writer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1_basic_memory_writer" kindref="compound">BasicMemoryWriter</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter</ref>&lt;Char&gt;<sp/>{</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3021" refid="classfmt_1_1_basic_memory_writer_1aca639802d5fb620dc07e9d67636a0584" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_memory_buffer" kindref="compound">internal::MemoryBuffer&lt;Char, internal::INLINE_BUFFER_SIZE, Allocator&gt;</ref><sp/><ref refid="classfmt_1_1_basic_memory_writer_1aca639802d5fb620dc07e9d67636a0584" kindref="member">buffer_</ref>;</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"></highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3024" refid="classfmt_1_1_basic_memory_writer_1a36ef881adce8fc7a0b3632d2fb66fdfb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_memory_writer_1a36ef881adce8fc7a0b3632d2fb66fdfb" kindref="member">BasicMemoryWriter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Allocator&amp;<sp/>alloc<sp/>=<sp/>Allocator())</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter</ref>&lt;Char&gt;(buffer_),<sp/>buffer_(alloc)<sp/>{}</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"></highlight></codeline>
<codeline lineno="3027"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_RVALUE_REFERENCES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3028"><highlight class="normal"></highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_memory_writer" kindref="compound">BasicMemoryWriter</ref>(<ref refid="classfmt_1_1_basic_memory_writer" kindref="compound">BasicMemoryWriter</ref><sp/>&amp;&amp;other)</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter&lt;Char&gt;</ref>(buffer_),<sp/>buffer_(<ref refid="namespacestd_1a37ba44826afa04fddf20fd70c45ac3b4" kindref="member">std::move</ref>(other.buffer_))<sp/>{</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"></highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_memory_writer" kindref="compound">BasicMemoryWriter</ref><sp/>&amp;operator=(<ref refid="classfmt_1_1_basic_memory_writer" kindref="compound">BasicMemoryWriter</ref><sp/>&amp;&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_<sp/>=<sp/><ref refid="namespacestd_1a37ba44826afa04fddf20fd70c45ac3b4" kindref="member">std::move</ref>(other.buffer_);</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3048"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"></highlight></codeline>
<codeline lineno="3050" refid="namespacefmt_1a89c1f31e0358aa86f99b9f24d2149ae6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_memory_writer" kindref="compound">BasicMemoryWriter&lt;char&gt;</ref><sp/><ref refid="namespacefmt_1a89c1f31e0358aa86f99b9f24d2149ae6" kindref="member">MemoryWriter</ref>;</highlight></codeline>
<codeline lineno="3051" refid="namespacefmt_1a77a0f04bb7dcce3271fe50984c5c9cf3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_memory_writer" kindref="compound">BasicMemoryWriter&lt;wchar_t&gt;</ref><sp/><ref refid="namespacefmt_1a77a0f04bb7dcce3271fe50984c5c9cf3" kindref="member">WMemoryWriter</ref>;</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"></highlight></codeline>
<codeline lineno="3073"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="3074" refid="classfmt_1_1_basic_array_writer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1_basic_array_writer" kindref="compound">BasicArrayWriter</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter</ref>&lt;Char&gt;<sp/>{</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3076" refid="classfmt_1_1_basic_array_writer_1aa186fd39bef24d436e455baa0608e2a9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_fixed_buffer" kindref="compound">internal::FixedBuffer&lt;Char&gt;</ref><sp/><ref refid="classfmt_1_1_basic_array_writer_1aa186fd39bef24d436e455baa0608e2a9" kindref="member">buffer_</ref>;</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"></highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3085" refid="classfmt_1_1_basic_array_writer_1a7559ecce2ffb3ecbb275dac5d2cc05e9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_array_writer_1a7559ecce2ffb3ecbb275dac5d2cc05e9" kindref="member">BasicArrayWriter</ref>(Char<sp/>*<ref refid="glew_8h_1a52f38e7d822a46377fde7a02708eedb1" kindref="member">array</ref>,<sp/>std::size_t<sp/>size)</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter</ref>&lt;Char&gt;(buffer_),<sp/>buffer_(array,<sp/>size)<sp/>{}</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"></highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SIZE&gt;</highlight></codeline>
<codeline lineno="3095" refid="classfmt_1_1_basic_array_writer_1ab8787cfc9b1500c0f2765074f64e5088" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_array_writer_1ab8787cfc9b1500c0f2765074f64e5088" kindref="member">BasicArrayWriter</ref>(Char<sp/>(&amp;<ref refid="glew_8h_1a52f38e7d822a46377fde7a02708eedb1" kindref="member">array</ref>)[SIZE])</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter</ref>&lt;Char&gt;(buffer_),<sp/>buffer_(<ref refid="glew_8h_1a52f38e7d822a46377fde7a02708eedb1" kindref="member">array</ref>,<sp/>SIZE)<sp/>{}</highlight></codeline>
<codeline lineno="3097"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"></highlight></codeline>
<codeline lineno="3099" refid="namespacefmt_1a71f2c31f50fbe09ab7c3537d695ad755" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_array_writer" kindref="compound">BasicArrayWriter&lt;char&gt;</ref><sp/><ref refid="namespacefmt_1a71f2c31f50fbe09ab7c3537d695ad755" kindref="member">ArrayWriter</ref>;</highlight></codeline>
<codeline lineno="3100" refid="namespacefmt_1a5b96a2878c97ba4e61570434be494746" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_array_writer" kindref="compound">BasicArrayWriter&lt;wchar_t&gt;</ref><sp/><ref refid="namespacefmt_1a5b96a2878c97ba4e61570434be494746" kindref="member">WArrayWriter</ref>;</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"></highlight></codeline>
<codeline lineno="3102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reports<sp/>a<sp/>system<sp/>error<sp/>without<sp/>throwing<sp/>an<sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Can<sp/>be<sp/>used<sp/>to<sp/>report<sp/>errors<sp/>from<sp/>destructors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><ref refid="format_8h_1a9a4960b70582ed2620911a0b75dce0b5" kindref="member">FMT_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1a6ca15e6d89910192be15bddd428c3a17" kindref="member">report_system_error</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code,</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringRef<sp/>message)<sp/><ref refid="format_8h_1aef128913e8400683b1cbd1a3a2e11df3" kindref="member">FMT_NOEXCEPT</ref>;</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"></highlight></codeline>
<codeline lineno="3107"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_WINDOWS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3108"><highlight class="normal"></highlight></codeline>
<codeline lineno="3110"><highlight class="keyword">class<sp/></highlight><highlight class="normal">WindowsError<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_system_error" kindref="compound">SystemError</ref><sp/>{</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a9a4960b70582ed2620911a0b75dce0b5" kindref="member">FMT_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code,<sp/>CStringRef<sp/>format_str,<sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>args);</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"></highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/>WindowsError(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code,<sp/>CStringRef<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/>init(error_code,<sp/>message,<sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref>());</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a5a549dd8fe2e1f2c72dbbba54218394f" kindref="member">FMT_VARIADIC_CTOR</ref>(WindowsError,<sp/>init,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>CStringRef)</highlight></codeline>
<codeline lineno="3147"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"></highlight></codeline>
<codeline lineno="3149"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reports<sp/>a<sp/>Windows<sp/>error<sp/>without<sp/>throwing<sp/>an<sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Can<sp/>be<sp/>used<sp/>to<sp/>report<sp/>errors<sp/>from<sp/>destructors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><ref refid="format_8h_1a9a4960b70582ed2620911a0b75dce0b5" kindref="member">FMT_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>report_windows_error(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code,</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringRef<sp/>message)<sp/><ref refid="format_8h_1aef128913e8400683b1cbd1a3a2e11df3" kindref="member">FMT_NOEXCEPT</ref>;</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"></highlight></codeline>
<codeline lineno="3154"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3155"><highlight class="normal"></highlight></codeline>
<codeline lineno="3156" refid="namespacefmt_1ace617112a82e0f90aac9858ecb446c8aaedb55588dbf84610a7ae697c03181bd4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1ace617112a82e0f90aac9858ecb446c8a" kindref="member">Color</ref><sp/>{<sp/><ref refid="namespacefmt_1ace617112a82e0f90aac9858ecb446c8aa3a6a56cadc6311b2734056357f2964d9" kindref="member">BLACK</ref>,<sp/><ref refid="namespacefmt_1ace617112a82e0f90aac9858ecb446c8aa9bd87ab0ebb552d3ad410a628f6d0c00" kindref="member">RED</ref>,<sp/><ref refid="namespacefmt_1ace617112a82e0f90aac9858ecb446c8aad5d5d31a970b38e77a13d0f6d1a5438c" kindref="member">GREEN</ref>,<sp/><ref refid="namespacefmt_1ace617112a82e0f90aac9858ecb446c8aaedb55588dbf84610a7ae697c03181bd4" kindref="member">YELLOW</ref>,<sp/><ref refid="namespacefmt_1ace617112a82e0f90aac9858ecb446c8aa17804dac760c885c9ece68a5fd552801" kindref="member">BLUE</ref>,<sp/><ref refid="namespacefmt_1ace617112a82e0f90aac9858ecb446c8aaff47477fdc6f3b1e6dacda9fa1efb5c1" kindref="member">MAGENTA</ref>,<sp/><ref refid="namespacefmt_1ace617112a82e0f90aac9858ecb446c8aafba5572a5e7dded26e35568f3fc36599" kindref="member">CYAN</ref>,<sp/><ref refid="namespacefmt_1ace617112a82e0f90aac9858ecb446c8aaecc3d2607bf562f107a0f308b61ee810" kindref="member">WHITE</ref><sp/>};</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"></highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><ref refid="format_8h_1a9a4960b70582ed2620911a0b75dce0b5" kindref="member">FMT_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1abf6b311b54f02ca8e4e2c3de4a563517" kindref="member">print_colored</ref>(<ref refid="namespacefmt_1ace617112a82e0f90aac9858ecb446c8a" kindref="member">Color</ref><sp/><ref refid="glew_8h_1ae0f40feefa74d9cb1721a009573cfce5" kindref="member">c</ref>,<sp/>CStringRef<sp/><ref refid="glew_8h_1a1e3b09934060e9d373139c3557730d37" kindref="member">format</ref>,<sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>args);</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"></highlight></codeline>
<codeline lineno="3175" refid="namespacefmt_1a638f25c535b3bfa12dc1478b11885b6f" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/><ref refid="namespacefmt_1a638f25c535b3bfa12dc1478b11885b6f" kindref="member">format</ref>(CStringRef<sp/>format_str,<sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/>MemoryWriter<sp/><ref refid="glew_8h_1a433584688554d9a05d22844c39473968" kindref="member">w</ref>;</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/>w.<ref refid="classfmt_1_1_basic_writer_1aaa83498c649d4a90ea3366bae62f4eac" kindref="member">write</ref>(format_str,<sp/>args);</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>w.<ref refid="classfmt_1_1_basic_writer_1a91f06ced6e063ee77a99740e0e79faf6" kindref="member">str</ref>();</highlight></codeline>
<codeline lineno="3179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"></highlight></codeline>
<codeline lineno="3181" refid="namespacefmt_1ab6752b38644beac3d1862712d42b95ca" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::wstring<sp/><ref refid="namespacefmt_1a638f25c535b3bfa12dc1478b11885b6f" kindref="member">format</ref>(WCStringRef<sp/>format_str,<sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/>WMemoryWriter<sp/><ref refid="glew_8h_1a433584688554d9a05d22844c39473968" kindref="member">w</ref>;</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/>w.<ref refid="classfmt_1_1_basic_writer_1aaa83498c649d4a90ea3366bae62f4eac" kindref="member">write</ref>(format_str,<sp/>args);</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>w.<ref refid="classfmt_1_1_basic_writer_1a91f06ced6e063ee77a99740e0e79faf6" kindref="member">str</ref>();</highlight></codeline>
<codeline lineno="3185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"></highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><ref refid="format_8h_1a9a4960b70582ed2620911a0b75dce0b5" kindref="member">FMT_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1adec465a02f79e1e023ec283fa6da9f13" kindref="member">print</ref>(std::FILE<sp/>*<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>,<sp/>CStringRef<sp/>format_str,<sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>args);</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"></highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><ref refid="format_8h_1a9a4960b70582ed2620911a0b75dce0b5" kindref="member">FMT_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1adec465a02f79e1e023ec283fa6da9f13" kindref="member">print</ref>(CStringRef<sp/>format_str,<sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>args);</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"></highlight></codeline>
<codeline lineno="3212" refid="classfmt_1_1_format_int" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1_format_int" kindref="compound">FormatInt</ref><sp/>{</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Buffer<sp/>should<sp/>be<sp/>large<sp/>enough<sp/>to<sp/>hold<sp/>all<sp/>digits<sp/>(digits10<sp/>+<sp/>1),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>sign<sp/>and<sp/>a<sp/>null<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3216" refid="classfmt_1_1_format_int_1ac561d5c60f5c320e42eb42ac91af85d4ac7c027b7e3d59a30d9c714be221854c7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{BUFFER_SIZE<sp/>=<sp/>std::numeric_limits&lt;ULongLong&gt;::digits10<sp/>+<sp/>3};</highlight></codeline>
<codeline lineno="3217" refid="classfmt_1_1_format_int_1ae7f477895763b2691bf2985ab8ad9aa2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer_[BUFFER_SIZE];</highlight></codeline>
<codeline lineno="3218" refid="classfmt_1_1_format_int_1a34712ea7e868f7ae56411fd86041efb6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classfmt_1_1_format_int_1a34712ea7e868f7ae56411fd86041efb6" kindref="member">str_</ref>;</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"></highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Formats<sp/>value<sp/>in<sp/>reverse<sp/>and<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>digits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3221" refid="classfmt_1_1_format_int_1ac64fe0979e7bc7b0bedb11a989169991" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classfmt_1_1_format_int_1ac64fe0979e7bc7b0bedb11a989169991" kindref="member">format_decimal</ref>(ULongLong<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer_end<sp/>=<sp/>buffer_<sp/>+<sp/>BUFFER_SIZE<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(value<sp/>&gt;=<sp/>100)<sp/>{</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Integer<sp/>division<sp/>is<sp/>slow<sp/>so<sp/>do<sp/>it<sp/>for<sp/>a<sp/>group<sp/>of<sp/>two<sp/>digits<sp/>instead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>for<sp/>every<sp/>digit.<sp/>The<sp/>idea<sp/>comes<sp/>from<sp/>the<sp/>talk<sp/>by<sp/>Alexandrescu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Three<sp/>Optimization<sp/>Tips<sp/>for<sp/>C++&quot;.<sp/>See<sp/>speed-test<sp/>for<sp/>a<sp/>comparison.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a57f14e05b1900f16a2da82ade47d0c6d" kindref="member">index</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((value<sp/>%<sp/>100)<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>/=<sp/>100;</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*--buffer_end<sp/>=<sp/><ref refid="structfmt_1_1internal_1_1_basic_data_1abc0f1b67b25a98d0aa1f2b25c8649e59" kindref="member">internal::Data::DIGITS</ref>[index<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*--buffer_end<sp/>=<sp/><ref refid="structfmt_1_1internal_1_1_basic_data_1abc0f1b67b25a98d0aa1f2b25c8649e59" kindref="member">internal::Data::DIGITS</ref>[<ref refid="glew_8h_1a57f14e05b1900f16a2da82ade47d0c6d" kindref="member">index</ref>];</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&lt;<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*--buffer_end<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer_end;</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a57f14e05b1900f16a2da82ade47d0c6d" kindref="member">index</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/>*--buffer_end<sp/>=<sp/><ref refid="structfmt_1_1internal_1_1_basic_data_1abc0f1b67b25a98d0aa1f2b25c8649e59" kindref="member">internal::Data::DIGITS</ref>[index<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/>*--buffer_end<sp/>=<sp/><ref refid="structfmt_1_1internal_1_1_basic_data_1abc0f1b67b25a98d0aa1f2b25c8649e59" kindref="member">internal::Data::DIGITS</ref>[<ref refid="glew_8h_1a57f14e05b1900f16a2da82ade47d0c6d" kindref="member">index</ref>];</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer_end;</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"></highlight></codeline>
<codeline lineno="3242" refid="classfmt_1_1_format_int_1a4f4f203e213feb6abadb3d6f3260e126" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_format_int_1a4f4f203e213feb6abadb3d6f3260e126" kindref="member">FormatSigned</ref>(LongLong<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/>ULongLong<sp/>abs_value<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ULongLong</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>negative<sp/>=<sp/>value<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(negative)</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>abs_value<sp/>=<sp/>0<sp/>-<sp/>abs_value;</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/>str_<sp/>=<sp/><ref refid="namespacefmt_1_1internal_1aeee1847660e999ab1e360ffa18515b88" kindref="member">format_decimal</ref>(abs_value);</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(negative)</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*--str_<sp/>=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"></highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3253" refid="classfmt_1_1_format_int_1a9ea696341b1f8be23c41885c1bfb1395" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_format_int_1a9ea696341b1f8be23c41885c1bfb1395" kindref="member">FormatInt</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{<sp/>FormatSigned(value);<sp/>}</highlight></codeline>
<codeline lineno="3254" refid="classfmt_1_1_format_int_1afba7a9464d4b9d70a877b38f09b66a30" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_format_int_1afba7a9464d4b9d70a877b38f09b66a30" kindref="member">FormatInt</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>value)<sp/>{<sp/>FormatSigned(value);<sp/>}</highlight></codeline>
<codeline lineno="3255" refid="classfmt_1_1_format_int_1af1e95a3f28e4905ed901beb1df3d77e2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_format_int_1af1e95a3f28e4905ed901beb1df3d77e2" kindref="member">FormatInt</ref>(LongLong<sp/>value)<sp/>{<sp/>FormatSigned(value);<sp/>}</highlight></codeline>
<codeline lineno="3256" refid="classfmt_1_1_format_int_1a6bbe09f7223c6489272ae295330c145c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_format_int_1a6bbe09f7223c6489272ae295330c145c" kindref="member">FormatInt</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>value)<sp/>:<sp/>str_(<ref refid="namespacefmt_1_1internal_1aeee1847660e999ab1e360ffa18515b88" kindref="member">format_decimal</ref>(value))<sp/>{}</highlight></codeline>
<codeline lineno="3257" refid="classfmt_1_1_format_int_1a376433048225d105887f0a151126c134" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_format_int_1a376433048225d105887f0a151126c134" kindref="member">FormatInt</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>value)<sp/>:<sp/>str_(<ref refid="namespacefmt_1_1internal_1aeee1847660e999ab1e360ffa18515b88" kindref="member">format_decimal</ref>(value))<sp/>{}</highlight></codeline>
<codeline lineno="3258" refid="classfmt_1_1_format_int_1ace4887e009064bcea8eea9bb6e30026e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_format_int_1ace4887e009064bcea8eea9bb6e30026e" kindref="member">FormatInt</ref>(ULongLong<sp/>value)<sp/>:<sp/>str_(<ref refid="namespacefmt_1_1internal_1aeee1847660e999ab1e360ffa18515b88" kindref="member">format_decimal</ref>(value))<sp/>{}</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"></highlight></codeline>
<codeline lineno="3261" refid="classfmt_1_1_format_int_1ad09445e55ae7c8944b5275a54a03da14" refkind="member"><highlight class="normal"><sp/><sp/>std::size_t<sp/><ref refid="classfmt_1_1_format_int_1ad09445e55ae7c8944b5275a54a03da14" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1a28bed1291226be35437bc3173c19c205" kindref="member">internal::to_unsigned</ref>(buffer_<sp/>-<sp/>str_<sp/>+<sp/>BUFFER_SIZE<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"></highlight></codeline>
<codeline lineno="3269" refid="classfmt_1_1_format_int_1a3cad581dde135c51390fd4ebd18d6d1b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classfmt_1_1_format_int_1a3cad581dde135c51390fd4ebd18d6d1b" kindref="member">data</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str_;<sp/>}</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"></highlight></codeline>
<codeline lineno="3275" refid="classfmt_1_1_format_int_1a58a17394f4f8e63debb91b90aa0dea0c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classfmt_1_1_format_int_1a58a17394f4f8e63debb91b90aa0dea0c" kindref="member">c_str</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_[BUFFER_SIZE<sp/>-<sp/>1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str_;</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"></highlight></codeline>
<codeline lineno="3285" refid="classfmt_1_1_format_int_1adfd4854a5efceb8df461a521c3eda5ef" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="glew_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/><ref refid="classfmt_1_1_format_int_1adfd4854a5efceb8df461a521c3eda5ef" kindref="member">str</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref>(str_,<sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>());<sp/>}</highlight></codeline>
<codeline lineno="3286"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"></highlight></codeline>
<codeline lineno="3288"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>a<sp/>decimal<sp/>integer<sp/>value<sp/>writing<sp/>into<sp/>buffer<sp/>and<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>formatted<sp/>string.<sp/>This<sp/>function<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>write<sp/>a<sp/>terminating<sp/>null<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3291"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3292" refid="namespacefmt_1a14f565b291f639cea172e79f7fa9bc7f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1aeee1847660e999ab1e360ffa18515b88" kindref="member">format_decimal</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*&amp;<ref refid="glew_8h_1a6c0f527f003707dfaca177b40f406ed9" kindref="member">buffer</ref>,<sp/>T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_int_traits" kindref="compound">internal::IntTraits&lt;T&gt;::MainType</ref><sp/>MainType;</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/>MainType<sp/>abs_value<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">MainType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacefmt_1_1internal_1a310d44c09812f7990e50800808c04673" kindref="member">internal::is_negative</ref>(value))<sp/>{</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/>*buffer++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/>abs_value<sp/>=<sp/>0<sp/>-<sp/>abs_value;</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs_value<sp/>&lt;<sp/>100)<sp/>{</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs_value<sp/>&lt;<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*buffer++<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>abs_value);</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a57f14e05b1900f16a2da82ade47d0c6d" kindref="member">index</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(abs_value<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/>*buffer++<sp/>=<sp/><ref refid="structfmt_1_1internal_1_1_basic_data_1abc0f1b67b25a98d0aa1f2b25c8649e59" kindref="member">internal::Data::DIGITS</ref>[<ref refid="glew_8h_1a57f14e05b1900f16a2da82ade47d0c6d" kindref="member">index</ref>];</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/>*buffer++<sp/>=<sp/><ref refid="structfmt_1_1internal_1_1_basic_data_1abc0f1b67b25a98d0aa1f2b25c8649e59" kindref="member">internal::Data::DIGITS</ref>[index<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>num_digits<sp/>=<sp/><ref refid="namespacefmt_1_1internal_1abfe52e52001fd2590fb2015cefe95e18" kindref="member">internal::count_digits</ref>(abs_value);</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><ref refid="namespacefmt_1_1internal_1aeee1847660e999ab1e360ffa18515b88" kindref="member">internal::format_decimal</ref>(buffer,<sp/>abs_value,<sp/>num_digits);</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/>buffer<sp/>+=<sp/>num_digits;</highlight></codeline>
<codeline lineno="3312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"></highlight></codeline>
<codeline lineno="3324"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3325" refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_named_arg" kindref="compound">internal::NamedArg&lt;char&gt;</ref><sp/><ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>(StringRef<sp/><ref refid="glew_8h_1a5c4947d4516dd7cfa3505ce3a648a4ef" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;<ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_named_arg" kindref="compound">internal::NamedArg&lt;char&gt;</ref>(<ref refid="glew_8h_1a5c4947d4516dd7cfa3505ce3a648a4ef" kindref="member">name</ref>,<sp/><ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>);</highlight></codeline>
<codeline lineno="3327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"></highlight></codeline>
<codeline lineno="3329"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3330" refid="namespacefmt_1a52c68bde68381d4db8471c2655f8a7b9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_named_arg" kindref="compound">internal::NamedArg&lt;wchar_t&gt;</ref><sp/><ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>(WStringRef<sp/><ref refid="glew_8h_1a5c4947d4516dd7cfa3505ce3a648a4ef" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;<ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_named_arg" kindref="compound">internal::NamedArg&lt;wchar_t&gt;</ref>(<ref refid="glew_8h_1a5c4947d4516dd7cfa3505ce3a648a4ef" kindref="member">name</ref>,<sp/><ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>);</highlight></codeline>
<codeline lineno="3332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"></highlight></codeline>
<codeline lineno="3334"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>two<sp/>functions<sp/>are<sp/>deleted<sp/>intentionally<sp/>to<sp/>disable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3335"><highlight class="normal"></highlight><highlight class="comment">//<sp/>nested<sp/>named<sp/>arguments<sp/>as<sp/>in<sp/>``format(&quot;{}&quot;,<sp/>arg(&quot;a&quot;,<sp/>arg(&quot;b&quot;,<sp/>42)))``.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3336"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>(StringRef,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_named_arg" kindref="compound">internal::NamedArg&lt;Char&gt;</ref>&amp;)<sp/><ref refid="format_8h_1abf373cec341655be2a0b95e741898ef1" kindref="member">FMT_DELETED_OR_UNDEFINED</ref>;</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>(WStringRef,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_named_arg" kindref="compound">internal::NamedArg&lt;Char&gt;</ref>&amp;)<sp/><ref refid="format_8h_1abf373cec341655be2a0b95e741898ef1" kindref="member">FMT_DELETED_OR_UNDEFINED</ref>;</highlight></codeline>
<codeline lineno="3340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"></highlight></codeline>
<codeline lineno="3342"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_GCC_VERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3343"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>system_header<sp/>pragma<sp/>to<sp/>suppress<sp/>warnings<sp/>about<sp/>variadic<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>because<sp/>suppressing<sp/>-Wvariadic-macros<sp/>with<sp/>the<sp/>diagnostic<sp/>pragma<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3345"><highlight class="normal"></highlight><highlight class="comment">//<sp/>work.<sp/>It<sp/>is<sp/>used<sp/>at<sp/>the<sp/>end<sp/>because<sp/>we<sp/>want<sp/>to<sp/>suppress<sp/>as<sp/>little<sp/>warnings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3346"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>possible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3347"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>GCC<sp/>system_header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3348"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3349"><highlight class="normal"></highlight></codeline>
<codeline lineno="3350"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>used<sp/>to<sp/>work<sp/>around<sp/>VC++<sp/>bugs<sp/>in<sp/>handling<sp/>variadic<sp/>macros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3351" refid="format_8h_1af2b14c99c910ab490448bf9f176207d1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_EXPAND(args)<sp/>args</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3352"><highlight class="normal"></highlight></codeline>
<codeline lineno="3353"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3354"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Based<sp/>on<sp/>https://groups.google.com/forum/#!topic/comp.std.c/d-6Mj5Lko_s.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3355" refid="format_8h_1accdb20f44b377869369141b5c67d2d93" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_NARG(...)<sp/>FMT_NARG_(__VA_ARGS__,<sp/>FMT_RSEQ_N())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3356" refid="format_8h_1acd8ac92441b2b4a11806bbda27fa8cb7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_NARG_(...)<sp/>FMT_EXPAND(FMT_ARG_N(__VA_ARGS__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3357" refid="format_8h_1a9ff9cfec1b5fc4472b64466ae2421375" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_ARG_N(_1,<sp/>_2,<sp/>_3,<sp/>_4,<sp/>_5,<sp/>_6,<sp/>_7,<sp/>_8,<sp/>_9,<sp/>_10,<sp/>N,<sp/>...)<sp/>N</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3358" refid="format_8h_1a15b24ba706c9e53f760a9b9071e1b82c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_RSEQ_N()<sp/>10,<sp/>9,<sp/>8,<sp/>7,<sp/>6,<sp/>5,<sp/>4,<sp/>3,<sp/>2,<sp/>1,<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3359"><highlight class="normal"></highlight></codeline>
<codeline lineno="3360" refid="format_8h_1abe4b038281180aa67854053184169ac8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_FOR_EACH_(N,<sp/>f,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="3361"><highlight class="preprocessor"><sp/><sp/>FMT_EXPAND(FMT_CONCAT(FMT_FOR_EACH,<sp/>N)(f,<sp/>__VA_ARGS__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3362" refid="format_8h_1a0c2d6083cbd70985bcf9cd992094b6ad" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_FOR_EACH(f,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="3363"><highlight class="preprocessor"><sp/><sp/>FMT_EXPAND(FMT_FOR_EACH_(FMT_NARG(__VA_ARGS__),<sp/>f,<sp/>__VA_ARGS__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3364"><highlight class="normal"></highlight></codeline>
<codeline lineno="3365" refid="format_8h_1aa46f8a0487315fdb94f1c67b5364166f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_ADD_ARG_NAME(type,<sp/>index)<sp/>type<sp/>arg##index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3366" refid="format_8h_1a7e610b1eaae640f58bbb945ab9a57359" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_GET_ARG_NAME(type,<sp/>index)<sp/>arg##index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3367"><highlight class="normal"></highlight></codeline>
<codeline lineno="3368"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_VARIADIC_TEMPLATES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3369"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_VARIADIC_(Char,<sp/>ReturnType,<sp/>func,<sp/>call,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="3370"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;typename...<sp/>Args&gt;<sp/>\</highlight></codeline>
<codeline lineno="3371"><highlight class="preprocessor"><sp/><sp/>ReturnType<sp/>func(FMT_FOR_EACH(FMT_ADD_ARG_NAME,<sp/>__VA_ARGS__),<sp/>\</highlight></codeline>
<codeline lineno="3372"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Args<sp/>&amp;<sp/>...<sp/>args)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="3373"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>fmt::internal::ArgArray&lt;sizeof...(Args)&gt;<sp/>ArgArray;<sp/>\</highlight></codeline>
<codeline lineno="3374"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typename<sp/>ArgArray::Type<sp/>array{<sp/>\</highlight></codeline>
<codeline lineno="3375"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>ArgArray::template<sp/>make&lt;fmt::BasicFormatter&lt;Char&gt;<sp/>&gt;(args)...};<sp/>\</highlight></codeline>
<codeline lineno="3376"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>call(FMT_FOR_EACH(FMT_GET_ARG_NAME,<sp/>__VA_ARGS__),<sp/>\</highlight></codeline>
<codeline lineno="3377"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>fmt::ArgList(fmt::internal::make_type(args...),<sp/>array));<sp/>\</highlight></codeline>
<codeline lineno="3378"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3379"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3380"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>a<sp/>wrapper<sp/>for<sp/>a<sp/>function<sp/>taking<sp/>__VA_ARGS__<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3381"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>n<sp/>additional<sp/>arguments<sp/>of<sp/>arbitrary<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3382" refid="format_8h_1a0a128dd850a99084d540bc2f2a89fe37" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_WRAP(Char,<sp/>ReturnType,<sp/>func,<sp/>call,<sp/>n,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="3383"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;FMT_GEN(n,<sp/>FMT_MAKE_TEMPLATE_ARG)&gt;<sp/>\</highlight></codeline>
<codeline lineno="3384"><highlight class="preprocessor"><sp/><sp/>inline<sp/>ReturnType<sp/>func(FMT_FOR_EACH(FMT_ADD_ARG_NAME,<sp/>__VA_ARGS__),<sp/>\</highlight></codeline>
<codeline lineno="3385"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>FMT_GEN(n,<sp/>FMT_MAKE_ARG))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="3386"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>fmt::internal::ArgArray&lt;n&gt;::Type<sp/>arr;<sp/>\</highlight></codeline>
<codeline lineno="3387"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>FMT_GEN(n,<sp/>FMT_ASSIGN_##Char);<sp/>\</highlight></codeline>
<codeline lineno="3388"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>call(FMT_FOR_EACH(FMT_GET_ARG_NAME,<sp/>__VA_ARGS__),<sp/>fmt::ArgList(<sp/>\</highlight></codeline>
<codeline lineno="3389"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>fmt::internal::make_type(FMT_GEN(n,<sp/>FMT_MAKE_REF2)),<sp/>arr));<sp/>\</highlight></codeline>
<codeline lineno="3390"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3391"><highlight class="normal"></highlight></codeline>
<codeline lineno="3392" refid="format_8h_1ad975649fe541a22d6a79cd6f9a406124" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_VARIADIC_(Char,<sp/>ReturnType,<sp/>func,<sp/>call,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="3393"><highlight class="preprocessor"><sp/><sp/>inline<sp/>ReturnType<sp/>func(FMT_FOR_EACH(FMT_ADD_ARG_NAME,<sp/>__VA_ARGS__))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="3394"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>call(FMT_FOR_EACH(FMT_GET_ARG_NAME,<sp/>__VA_ARGS__),<sp/>fmt::ArgList());<sp/>\</highlight></codeline>
<codeline lineno="3395"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="3396"><highlight class="preprocessor"><sp/><sp/>FMT_WRAP(Char,<sp/>ReturnType,<sp/>func,<sp/>call,<sp/>1,<sp/>__VA_ARGS__)<sp/>\</highlight></codeline>
<codeline lineno="3397"><highlight class="preprocessor"><sp/><sp/>FMT_WRAP(Char,<sp/>ReturnType,<sp/>func,<sp/>call,<sp/>2,<sp/>__VA_ARGS__)<sp/>\</highlight></codeline>
<codeline lineno="3398"><highlight class="preprocessor"><sp/><sp/>FMT_WRAP(Char,<sp/>ReturnType,<sp/>func,<sp/>call,<sp/>3,<sp/>__VA_ARGS__)<sp/>\</highlight></codeline>
<codeline lineno="3399"><highlight class="preprocessor"><sp/><sp/>FMT_WRAP(Char,<sp/>ReturnType,<sp/>func,<sp/>call,<sp/>4,<sp/>__VA_ARGS__)<sp/>\</highlight></codeline>
<codeline lineno="3400"><highlight class="preprocessor"><sp/><sp/>FMT_WRAP(Char,<sp/>ReturnType,<sp/>func,<sp/>call,<sp/>5,<sp/>__VA_ARGS__)<sp/>\</highlight></codeline>
<codeline lineno="3401"><highlight class="preprocessor"><sp/><sp/>FMT_WRAP(Char,<sp/>ReturnType,<sp/>func,<sp/>call,<sp/>6,<sp/>__VA_ARGS__)<sp/>\</highlight></codeline>
<codeline lineno="3402"><highlight class="preprocessor"><sp/><sp/>FMT_WRAP(Char,<sp/>ReturnType,<sp/>func,<sp/>call,<sp/>7,<sp/>__VA_ARGS__)<sp/>\</highlight></codeline>
<codeline lineno="3403"><highlight class="preprocessor"><sp/><sp/>FMT_WRAP(Char,<sp/>ReturnType,<sp/>func,<sp/>call,<sp/>8,<sp/>__VA_ARGS__)<sp/>\</highlight></codeline>
<codeline lineno="3404"><highlight class="preprocessor"><sp/><sp/>FMT_WRAP(Char,<sp/>ReturnType,<sp/>func,<sp/>call,<sp/>9,<sp/>__VA_ARGS__)<sp/>\</highlight></codeline>
<codeline lineno="3405"><highlight class="preprocessor"><sp/><sp/>FMT_WRAP(Char,<sp/>ReturnType,<sp/>func,<sp/>call,<sp/>10,<sp/>__VA_ARGS__)<sp/>\</highlight></codeline>
<codeline lineno="3406"><highlight class="preprocessor"><sp/><sp/>FMT_WRAP(Char,<sp/>ReturnType,<sp/>func,<sp/>call,<sp/>11,<sp/>__VA_ARGS__)<sp/>\</highlight></codeline>
<codeline lineno="3407"><highlight class="preprocessor"><sp/><sp/>FMT_WRAP(Char,<sp/>ReturnType,<sp/>func,<sp/>call,<sp/>12,<sp/>__VA_ARGS__)<sp/>\</highlight></codeline>
<codeline lineno="3408"><highlight class="preprocessor"><sp/><sp/>FMT_WRAP(Char,<sp/>ReturnType,<sp/>func,<sp/>call,<sp/>13,<sp/>__VA_ARGS__)<sp/>\</highlight></codeline>
<codeline lineno="3409"><highlight class="preprocessor"><sp/><sp/>FMT_WRAP(Char,<sp/>ReturnType,<sp/>func,<sp/>call,<sp/>14,<sp/>__VA_ARGS__)<sp/>\</highlight></codeline>
<codeline lineno="3410"><highlight class="preprocessor"><sp/><sp/>FMT_WRAP(Char,<sp/>ReturnType,<sp/>func,<sp/>call,<sp/>15,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3411"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>FMT_USE_VARIADIC_TEMPLATES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3412"><highlight class="normal"></highlight></codeline>
<codeline lineno="3440" refid="format_8h_1a65215c7dfcc0e942cd0798860877e86b" refkind="member"><highlight class="preprocessor">#define<sp/>FMT_VARIADIC(ReturnType,<sp/>func,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="3441"><highlight class="preprocessor"><sp/><sp/>FMT_VARIADIC_(char,<sp/>ReturnType,<sp/>func,<sp/>return<sp/>func,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3442"><highlight class="normal"></highlight></codeline>
<codeline lineno="3443" refid="format_8h_1ade3d94cf1857de68f99e7059277d51f5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_VARIADIC_W(ReturnType,<sp/>func,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="3444"><highlight class="preprocessor"><sp/><sp/>FMT_VARIADIC_(wchar_t,<sp/>ReturnType,<sp/>func,<sp/>return<sp/>func,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3445"><highlight class="normal"></highlight></codeline>
<codeline lineno="3446" refid="format_8h_1a568d86f12c11293ea2759739461cb334" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_CAPTURE_ARG_(id,<sp/>index)<sp/>::fmt::arg(#id,<sp/>id)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3447"><highlight class="normal"></highlight></codeline>
<codeline lineno="3448" refid="format_8h_1a0e8f79fea6b4e4bee2d7a0164adf1c76" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_CAPTURE_ARG_W_(id,<sp/>index)<sp/>::fmt::arg(L###id,<sp/>id)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3449"><highlight class="normal"></highlight></codeline>
<codeline lineno="3464" refid="format_8h_1a3caa326fabdddb0e4fbcad7e5ec8bd37" refkind="member"><highlight class="preprocessor">#define<sp/>FMT_CAPTURE(...)<sp/>FMT_FOR_EACH(FMT_CAPTURE_ARG_,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3465"><highlight class="normal"></highlight></codeline>
<codeline lineno="3466" refid="format_8h_1ab8c33d2ac5dba6eacde282ca2490e66d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_CAPTURE_W(...)<sp/>FMT_FOR_EACH(FMT_CAPTURE_ARG_W_,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3467"><highlight class="normal"></highlight></codeline>
<codeline lineno="3468"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefmt" kindref="compound">fmt</ref><sp/>{</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><ref refid="format_8h_1a65215c7dfcc0e942cd0798860877e86b" kindref="member">FMT_VARIADIC</ref>(<ref refid="glew_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref>,<sp/><ref refid="glew_8h_1a1e3b09934060e9d373139c3557730d37" kindref="member">format</ref>,<sp/>CStringRef)</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><ref refid="format_8h_1ade3d94cf1857de68f99e7059277d51f5" kindref="member">FMT_VARIADIC_W</ref>(std::wstring,<sp/><ref refid="glew_8h_1a1e3b09934060e9d373139c3557730d37" kindref="member">format</ref>,<sp/>WCStringRef)</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><ref refid="format_8h_1a65215c7dfcc0e942cd0798860877e86b" kindref="member">FMT_VARIADIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/><ref refid="namespacefmt_1adec465a02f79e1e023ec283fa6da9f13" kindref="member">print</ref>,<sp/>CStringRef)</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><ref refid="format_8h_1a65215c7dfcc0e942cd0798860877e86b" kindref="member">FMT_VARIADIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/><ref refid="namespacefmt_1adec465a02f79e1e023ec283fa6da9f13" kindref="member">print</ref>,<sp/>std::FILE<sp/>*,<sp/>CStringRef)</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><ref refid="format_8h_1a65215c7dfcc0e942cd0798860877e86b" kindref="member">FMT_VARIADIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/><ref refid="namespacefmt_1abf6b311b54f02ca8e4e2c3de4a563517" kindref="member">print_colored</ref>,<sp/><ref refid="namespacefmt_1ace617112a82e0f90aac9858ecb446c8a" kindref="member">Color</ref>,<sp/>CStringRef)</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"></highlight></codeline>
<codeline lineno="3475"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceinternal" kindref="compound">internal</ref><sp/>{</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="3477" refid="namespacefmt_1_1internal_1a27d95fd413ab4be7aca6fe53f1a7f6a6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1a27d95fd413ab4be7aca6fe53f1a7f6a6" kindref="member">is_name_start</ref>(Char<sp/><ref refid="glew_8h_1ae0f40feefa74d9cb1721a009573cfce5" kindref="member">c</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>c<sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>c<sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">)<sp/>||<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal"><sp/>==<sp/>c;</highlight></codeline>
<codeline lineno="3479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"></highlight></codeline>
<codeline lineno="3481"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>an<sp/>unsigned<sp/>integer<sp/>advancing<sp/>s<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>parsed<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3482"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>assumes<sp/>that<sp/>the<sp/>first<sp/>character<sp/>of<sp/>s<sp/>is<sp/>a<sp/>digit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3483"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="3484" refid="namespacefmt_1_1internal_1a20352082f5ee17703e71a37e30c6ddaf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1a20352082f5ee17703e71a37e30c6ddaf" kindref="member">parse_nonnegative_int</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*&amp;<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/>assert(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>*s<sp/>&amp;&amp;<sp/>*s<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>new_value<sp/>=<sp/>value<sp/>*<sp/>10<sp/>+<sp/>(*s++<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>value<sp/>wrapped<sp/>around.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_value<sp/>&lt;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(std::numeric_limits&lt;unsigned&gt;::max)();</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>*s<sp/>&amp;&amp;<sp/>*s<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>to<sp/>unsigned<sp/>to<sp/>prevent<sp/>a<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>max_int<sp/>=<sp/>(std::numeric_limits&lt;int&gt;::max)();</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&gt;<sp/>max_int)</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(</highlight><highlight class="stringliteral">&quot;number<sp/>is<sp/>too<sp/>big&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="3501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"></highlight></codeline>
<codeline lineno="3503" refid="namespacefmt_1_1internal_1a706fe7cc890026cebbd52e75d8a97afc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1a706fe7cc890026cebbd52e75d8a97afc" kindref="member">require_numeric_argument</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">Arg</ref><sp/>&amp;<ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>spec)<sp/>{</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg.<ref refid="structfmt_1_1internal_1_1_arg_1af1165b4e8647bea5913922de82599e2e" kindref="member">type</ref><sp/>&gt;<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaad9dbf0826103ba0fed6466a53bb0421b" kindref="member">Arg::LAST_NUMERIC_TYPE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glew_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/>message<sp/>=</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1a638f25c535b3bfa12dc1478b11885b6f" kindref="member">fmt::format</ref>(</highlight><highlight class="stringliteral">&quot;format<sp/>specifier<sp/>&apos;{}&apos;<sp/>requires<sp/>numeric<sp/>argument&quot;</highlight><highlight class="normal">,<sp/>spec);</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">fmt::FormatError</ref>(message));</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"></highlight></codeline>
<codeline lineno="3511"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="3512" refid="namespacefmt_1_1internal_1a867432b13d2f634bfb4aa28e464b57a1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1a867432b13d2f634bfb4aa28e464b57a1" kindref="member">check_sign</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*&amp;<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">Arg</ref><sp/>&amp;<ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sign<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*s);</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/><ref refid="namespacefmt_1_1internal_1a706fe7cc890026cebbd52e75d8a97afc" kindref="member">require_numeric_argument</ref>(arg,<sp/>sign);</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg.<ref refid="structfmt_1_1internal_1_1_arg_1af1165b4e8647bea5913922de82599e2e" kindref="member">type</ref><sp/>==<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaac7303224391053ae45d4ff13ad0f017c" kindref="member">Arg::UINT</ref><sp/>||<sp/>arg.<ref refid="structfmt_1_1internal_1_1_arg_1af1165b4e8647bea5913922de82599e2e" kindref="member">type</ref><sp/>==<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa8c2ffe6909d26d46781aa6fb9b8ae418" kindref="member">Arg::ULONG_LONG</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(<ref refid="namespacefmt_1a638f25c535b3bfa12dc1478b11885b6f" kindref="member">fmt::format</ref>(</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;format<sp/>specifier<sp/>&apos;{}&apos;<sp/>requires<sp/>signed<sp/>argument&quot;</highlight><highlight class="normal">,<sp/>sign)));</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/>++<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="3520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3521"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3522"><highlight class="normal"></highlight></codeline>
<codeline lineno="3523"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AF&gt;</highlight></codeline>
<codeline lineno="3524" refid="classfmt_1_1_basic_formatter_1ab2518374009dbb27392efa0d16b2f3a8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref><sp/><ref refid="classfmt_1_1_basic_formatter_1ab2518374009dbb27392efa0d16b2f3a8" kindref="member">BasicFormatter&lt;Char, AF&gt;::get_arg</ref>(</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfmt_1_1_basic_string_ref" kindref="compound">BasicStringRef&lt;Char&gt;</ref><sp/>arg_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*&amp;error)<sp/>{</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(check_no_auto_index(error))<sp/>{</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/>map_.init(args());</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref><sp/>*<ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref><sp/>=<sp/>map_.find(arg_name);</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg)</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>;</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;argument<sp/>not<sp/>found&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref>();</highlight></codeline>
<codeline lineno="3534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"></highlight></codeline>
<codeline lineno="3536"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AF&gt;</highlight></codeline>
<codeline lineno="3537" refid="classfmt_1_1_basic_formatter_1af9f5dc339c7dd167253bc1354f0c5a65" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref><sp/><ref refid="classfmt_1_1_basic_formatter_1af9f5dc339c7dd167253bc1354f0c5a65" kindref="member">BasicFormatter&lt;Char, AF&gt;::parse_arg_index</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_formatter_1af8270b25395aeb82b8c72c370c5cf13a" kindref="member">Char</ref><sp/>*&amp;<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref><sp/><ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref><sp/>=<sp/>*<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s &lt; &apos;0&apos; || *s &gt;</ref><sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal"><sp/>?</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_arg(error)<sp/>:<sp/>get_arg(<ref refid="namespacefmt_1_1internal_1a20352082f5ee17703e71a37e30c6ddaf" kindref="member">internal::parse_nonnegative_int</ref>(s),<sp/>error);</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error)<sp/>{</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*s<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*s<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal"><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>format<sp/>string&quot;</highlight><highlight class="normal"><sp/>:<sp/>error));</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>;</highlight></codeline>
<codeline lineno="3546"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"></highlight></codeline>
<codeline lineno="3548"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AF&gt;</highlight></codeline>
<codeline lineno="3549" refid="classfmt_1_1_basic_formatter_1ac6d66a7beef58c3584327bdab9bbd92b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref><sp/><ref refid="classfmt_1_1_basic_formatter_1ac6d66a7beef58c3584327bdab9bbd92b" kindref="member">BasicFormatter&lt;Char, AF&gt;::parse_arg_name</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_formatter_1af8270b25395aeb82b8c72c370c5cf13a" kindref="member">Char</ref><sp/>*&amp;<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/>assert(<ref refid="namespacefmt_1_1internal_1a27d95fd413ab4be7aca6fe53f1a7f6a6" kindref="member">internal::is_name_start</ref>(*s));</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_formatter_1af8270b25395aeb82b8c72c370c5cf13a" kindref="member">Char</ref><sp/>*<ref refid="glew_8h_1ac55adc720a3098c1b454d2a4647f4361" kindref="member">start</ref><sp/>=<sp/><ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_formatter_1af8270b25395aeb82b8c72c370c5cf13a" kindref="member">Char</ref><sp/><ref refid="glew_8h_1ae0f40feefa74d9cb1721a009573cfce5" kindref="member">c</ref>;</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>*++<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="namespacefmt_1_1internal_1a27d95fd413ab4be7aca6fe53f1a7f6a6" kindref="member">internal::is_name_start</ref>(c)<sp/>||<sp/>(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>c<sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref><sp/><ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref><sp/>=<sp/>get_arg(<ref refid="classfmt_1_1_basic_string_ref" kindref="compound">BasicStringRef&lt;Char&gt;</ref>(start,<sp/>s<sp/>-<sp/>start),<sp/>error);</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error)</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(error));</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>;</highlight></codeline>
<codeline lineno="3561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"></highlight></codeline>
<codeline lineno="3563"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgFormatter&gt;</highlight></codeline>
<codeline lineno="3564" refid="classfmt_1_1_basic_formatter_1ab436d449f9a0678badb672af2a8ecb32" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_formatter_1af8270b25395aeb82b8c72c370c5cf13a" kindref="member">Char</ref><sp/>*<ref refid="classfmt_1_1_basic_formatter_1a63acecbbf9681005f3c7eb4d42a54bf7" kindref="member">BasicFormatter&lt;Char, ArgFormatter&gt;::format</ref>(</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_formatter_1af8270b25395aeb82b8c72c370c5cf13a" kindref="member">Char</ref><sp/>*&amp;format_str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref><sp/>&amp;<ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref>;</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_formatter_1af8270b25395aeb82b8c72c370c5cf13a" kindref="member">Char</ref><sp/>*<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref><sp/>=<sp/>format_str;</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1_format_spec" kindref="compound">FormatSpec</ref><sp/>spec;</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>==<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg.<ref refid="structfmt_1_1internal_1_1_arg_1af1165b4e8647bea5913922de82599e2e" kindref="member">type</ref><sp/>==<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaaeaa06f45cc1a466b789ae71d6d06d1b0" kindref="member">Arg::CUSTOM</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="structfmt_1_1internal_1_1_value_1a2dcff1e0ac8f7fb7fc6dd448d66978cf" kindref="member">custom</ref>.<ref refid="structfmt_1_1internal_1_1_value_1_1_custom_value_1a36f27ca0939e90a5fe6d7d355ea0f97a" kindref="member">format</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>arg.<ref refid="structfmt_1_1internal_1_1_value_1a2dcff1e0ac8f7fb7fc6dd448d66978cf" kindref="member">custom</ref>.<ref refid="structfmt_1_1internal_1_1_value_1_1_custom_value_1aaaa7c10023f8b3886bee9593cddea150" kindref="member">value</ref>,<sp/>&amp;s);</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>fill<sp/>and<sp/>alignment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classfmt_1_1_basic_formatter_1af8270b25395aeb82b8c72c370c5cf13a" kindref="member">Char</ref><sp/><ref refid="glew_8h_1ae0f40feefa74d9cb1721a009573cfce5" kindref="member">c</ref><sp/>=<sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_formatter_1af8270b25395aeb82b8c72c370c5cf13a" kindref="member">Char</ref><sp/>*<ref refid="glew_8h_1aa5367c14d90f462230c2611b81b41d23" kindref="member">p</ref><sp/>=<sp/>s<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_align_spec_1aac93fb3829d550af86479f1ecaa73f95" kindref="member">align_</ref><sp/>=<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2a63e66a16a075b0b22e5fae027892057f" kindref="member">ALIGN_DEFAULT</ref>;</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*p)<sp/>{</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_align_spec_1aac93fb3829d550af86479f1ecaa73f95" kindref="member">align_</ref><sp/>=<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2a37d3391e09dceceb0e75094f691b02eb" kindref="member">ALIGN_LEFT</ref>;</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_align_spec_1aac93fb3829d550af86479f1ecaa73f95" kindref="member">align_</ref><sp/>=<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2ab4ab67c39e6d8562a116f3da83de391a" kindref="member">ALIGN_RIGHT</ref>;</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_align_spec_1aac93fb3829d550af86479f1ecaa73f95" kindref="member">align_</ref><sp/>=<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2a93f62fb67b1cbabf62cab3185bb5f4e3" kindref="member">ALIGN_NUMERIC</ref>;</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;^&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_align_spec_1aac93fb3829d550af86479f1ecaa73f95" kindref="member">align_</ref><sp/>=<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2ab9fa8e7eb41061a7670d4d8b43007f23" kindref="member">ALIGN_CENTER</ref>;</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec.<ref refid="structfmt_1_1_align_spec_1aac93fb3829d550af86479f1ecaa73f95" kindref="member">align_</ref><sp/>!=<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2a63e66a16a075b0b22e5fae027892057f" kindref="member">ALIGN_DEFAULT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="glew_8h_1ae0f40feefa74d9cb1721a009573cfce5" kindref="member">c</ref><sp/>==<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="glew_8h_1ae0f40feefa74d9cb1721a009573cfce5" kindref="member">c</ref><sp/>==<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(</highlight><highlight class="stringliteral">&quot;invalid<sp/>fill<sp/>character<sp/>&apos;{&apos;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_width_spec_1ad1c9740afb2b05c4ac7b2d9fa9760891" kindref="member">fill_</ref><sp/>=<sp/><ref refid="glew_8h_1ae0f40feefa74d9cb1721a009573cfce5" kindref="member">c</ref>;</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>++<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec.<ref refid="structfmt_1_1_align_spec_1aac93fb3829d550af86479f1ecaa73f95" kindref="member">align_</ref><sp/>==<sp/>ALIGN_NUMERIC)</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1a706fe7cc890026cebbd52e75d8a97afc" kindref="member">require_numeric_argument</ref>(arg,<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--p<sp/>&gt;=<sp/>s);</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"></highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>sign.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*s)<sp/>{</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1a867432b13d2f634bfb4aa28e464b57a1" kindref="member">check_sign</ref>(s,<sp/>arg);</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_format_spec_1a9fbd00ed2b8e3b96eaa2beb54aff641e" kindref="member">flags_</ref><sp/>|=<sp/><ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea41bce447447361e7a4b3e9d8a84877db" kindref="member">SIGN_FLAG</ref><sp/>|<sp/><ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea2b053d8fd806a73492750893f902a694" kindref="member">PLUS_FLAG</ref>;</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1a867432b13d2f634bfb4aa28e464b57a1" kindref="member">check_sign</ref>(s,<sp/>arg);</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_format_spec_1a9fbd00ed2b8e3b96eaa2beb54aff641e" kindref="member">flags_</ref><sp/>|=<sp/><ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbeafc86655957d3b777b4c87eeb32250bc4" kindref="member">MINUS_FLAG</ref>;</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1a867432b13d2f634bfb4aa28e464b57a1" kindref="member">check_sign</ref>(s,<sp/>arg);</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_format_spec_1a9fbd00ed2b8e3b96eaa2beb54aff641e" kindref="member">flags_</ref><sp/>|=<sp/><ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea41bce447447361e7a4b3e9d8a84877db" kindref="member">SIGN_FLAG</ref>;</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"></highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>==<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1a706fe7cc890026cebbd52e75d8a97afc" kindref="member">require_numeric_argument</ref>(arg,<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_format_spec_1a9fbd00ed2b8e3b96eaa2beb54aff641e" kindref="member">flags_</ref><sp/>|=<sp/><ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea02280924fe002ad252cfbcc0cf6492aa" kindref="member">HASH_FLAG</ref>;</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"></highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>zero<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1a706fe7cc890026cebbd52e75d8a97afc" kindref="member">require_numeric_argument</ref>(arg,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_align_spec_1aac93fb3829d550af86479f1ecaa73f95" kindref="member">align_</ref><sp/>=<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2a93f62fb67b1cbabf62cab3185bb5f4e3" kindref="member">ALIGN_NUMERIC</ref>;</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_width_spec_1ad1c9740afb2b05c4ac7b2d9fa9760891" kindref="member">fill_</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"></highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>width.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>*s<sp/>&amp;&amp;<sp/>*s<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_width_spec_1a83fed5d5a674ea54a48feb6edef4c1c7" kindref="member">width_</ref><sp/>=<sp/><ref refid="namespacefmt_1_1internal_1a20352082f5ee17703e71a37e30c6ddaf" kindref="member">internal::parse_nonnegative_int</ref>(s);</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>==<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">Arg</ref><sp/>width_arg<sp/>=<sp/><ref refid="namespacefmt_1_1internal_1a27d95fd413ab4be7aca6fe53f1a7f6a6" kindref="member">internal::is_name_start</ref>(*s)<sp/>?</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parse_arg_name(s)<sp/>:<sp/>parse_arg_index(s);</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s++<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(</highlight><highlight class="stringliteral">&quot;invalid<sp/>format<sp/>string&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ULongLong<sp/>value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(width_arg.<ref refid="structfmt_1_1internal_1_1_arg_1af1165b4e8647bea5913922de82599e2e" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa6ab1b5ad31036f4c90bae16e873b3396" kindref="member">Arg::INT</ref>:</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width_arg.<ref refid="structfmt_1_1internal_1_1_value_1ac295b81747c26b97893be505a03381c8" kindref="member">int_value</ref><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(</highlight><highlight class="stringliteral">&quot;negative<sp/>width&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>width_arg.<ref refid="structfmt_1_1internal_1_1_value_1ac295b81747c26b97893be505a03381c8" kindref="member">int_value</ref>;</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaac7303224391053ae45d4ff13ad0f017c" kindref="member">Arg::UINT</ref>:</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>width_arg.<ref refid="structfmt_1_1internal_1_1_value_1a9ced917767812c9572065509f22bec18" kindref="member">uint_value</ref>;</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa7674f34a96c22fec85d9f27d082b4412" kindref="member">Arg::LONG_LONG</ref>:</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width_arg.<ref refid="structfmt_1_1internal_1_1_value_1a1dab8b1df1f88c35b6893d63b1b72af8" kindref="member">long_long_value</ref><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(</highlight><highlight class="stringliteral">&quot;negative<sp/>width&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>width_arg.<ref refid="structfmt_1_1internal_1_1_value_1a1dab8b1df1f88c35b6893d63b1b72af8" kindref="member">long_long_value</ref>;</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa8c2ffe6909d26d46781aa6fb9b8ae418" kindref="member">Arg::ULONG_LONG</ref>:</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>width_arg.<ref refid="structfmt_1_1internal_1_1_value_1a78424f46c0150190010e5c27ec3c69a0" kindref="member">ulong_long_value</ref>;</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(</highlight><highlight class="stringliteral">&quot;width<sp/>is<sp/>not<sp/>integer&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&gt;<sp/>(std::numeric_limits&lt;int&gt;::max)())</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(</highlight><highlight class="stringliteral">&quot;number<sp/>is<sp/>too<sp/>big&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_width_spec_1a83fed5d5a674ea54a48feb6edef4c1c7" kindref="member">width_</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"></highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>precision.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_format_spec_1a8444724bdd0a55bf3226a17e321c12c5" kindref="member">precision_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>*s<sp/>&amp;&amp;<sp/>*s<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_format_spec_1a8444724bdd0a55bf3226a17e321c12c5" kindref="member">precision_</ref><sp/>=<sp/><ref refid="namespacefmt_1_1internal_1a20352082f5ee17703e71a37e30c6ddaf" kindref="member">internal::parse_nonnegative_int</ref>(s);</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>==<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">Arg</ref><sp/>precision_arg<sp/>=<sp/><ref refid="namespacefmt_1_1internal_1a27d95fd413ab4be7aca6fe53f1a7f6a6" kindref="member">internal::is_name_start</ref>(*s)<sp/>?</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parse_arg_name(s)<sp/>:<sp/>parse_arg_index(s);</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s++<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(</highlight><highlight class="stringliteral">&quot;invalid<sp/>format<sp/>string&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ULongLong<sp/>value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(precision_arg.<ref refid="structfmt_1_1internal_1_1_arg_1af1165b4e8647bea5913922de82599e2e" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa6ab1b5ad31036f4c90bae16e873b3396" kindref="member">Arg::INT</ref>:</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(precision_arg.<ref refid="structfmt_1_1internal_1_1_value_1ac295b81747c26b97893be505a03381c8" kindref="member">int_value</ref><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(</highlight><highlight class="stringliteral">&quot;negative<sp/>precision&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>precision_arg.<ref refid="structfmt_1_1internal_1_1_value_1ac295b81747c26b97893be505a03381c8" kindref="member">int_value</ref>;</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaac7303224391053ae45d4ff13ad0f017c" kindref="member">Arg::UINT</ref>:</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>precision_arg.<ref refid="structfmt_1_1internal_1_1_value_1a9ced917767812c9572065509f22bec18" kindref="member">uint_value</ref>;</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa7674f34a96c22fec85d9f27d082b4412" kindref="member">Arg::LONG_LONG</ref>:</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(precision_arg.<ref refid="structfmt_1_1internal_1_1_value_1a1dab8b1df1f88c35b6893d63b1b72af8" kindref="member">long_long_value</ref><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(</highlight><highlight class="stringliteral">&quot;negative<sp/>precision&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>precision_arg.<ref refid="structfmt_1_1internal_1_1_value_1a1dab8b1df1f88c35b6893d63b1b72af8" kindref="member">long_long_value</ref>;</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa8c2ffe6909d26d46781aa6fb9b8ae418" kindref="member">Arg::ULONG_LONG</ref>:</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>precision_arg.<ref refid="structfmt_1_1internal_1_1_value_1a78424f46c0150190010e5c27ec3c69a0" kindref="member">ulong_long_value</ref>;</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(</highlight><highlight class="stringliteral">&quot;precision<sp/>is<sp/>not<sp/>integer&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&gt;<sp/>(std::numeric_limits&lt;int&gt;::max)())</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(</highlight><highlight class="stringliteral">&quot;number<sp/>is<sp/>too<sp/>big&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_format_spec_1a8444724bdd0a55bf3226a17e321c12c5" kindref="member">precision_</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(</highlight><highlight class="stringliteral">&quot;missing<sp/>precision<sp/>specifier&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg.<ref refid="structfmt_1_1internal_1_1_arg_1af1165b4e8647bea5913922de82599e2e" kindref="member">type</ref><sp/>&lt;=<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa1cc1a5881e640c0009f58a05b653d535" kindref="member">Arg::LAST_INTEGER_TYPE</ref><sp/>||<sp/>arg.<ref refid="structfmt_1_1internal_1_1_arg_1af1165b4e8647bea5913922de82599e2e" kindref="member">type</ref><sp/>==<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaaaaa373dcb5378f0ec6cd6e4dc59a8cfb" kindref="member">Arg::POINTER</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1a638f25c535b3bfa12dc1478b11885b6f" kindref="member">fmt::format</ref>(</highlight><highlight class="stringliteral">&quot;precision<sp/>not<sp/>allowed<sp/>in<sp/>{}<sp/>format<sp/>specifier&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg.<ref refid="structfmt_1_1internal_1_1_arg_1af1165b4e8647bea5913922de82599e2e" kindref="member">type</ref><sp/>==<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaaaaa373dcb5378f0ec6cd6e4dc59a8cfb" kindref="member">Arg::POINTER</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;pointer&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;integer&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"></highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*s)</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_format_spec_1aa6f085ef583f708dde9636c03adea6ab" kindref="member">type_</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*s++);</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"></highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s++<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(</highlight><highlight class="stringliteral">&quot;missing<sp/>&apos;}&apos;<sp/>in<sp/>format<sp/>string&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"></highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Format<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/>ArgFormatter(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>spec,<sp/>s<sp/>-<sp/>1).visit(arg);</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="3731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"></highlight></codeline>
<codeline lineno="3733"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AF&gt;</highlight></codeline>
<codeline lineno="3734" refid="classfmt_1_1_basic_formatter_1a63acecbbf9681005f3c7eb4d42a54bf7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_formatter_1a63acecbbf9681005f3c7eb4d42a54bf7" kindref="member">BasicFormatter&lt;Char, AF&gt;::format</ref>(<ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">BasicCStringRef&lt;Char&gt;</ref><sp/>format_str)<sp/>{</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_formatter_1af8270b25395aeb82b8c72c370c5cf13a" kindref="member">Char</ref><sp/>*<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref><sp/>=<sp/>format_str.<ref refid="classfmt_1_1_basic_c_string_ref_1ae3bafa845b53339b20c4f5edb4f635f9" kindref="member">c_str</ref>();</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_formatter_1af8270b25395aeb82b8c72c370c5cf13a" kindref="member">Char</ref><sp/>*<ref refid="glew_8h_1ac55adc720a3098c1b454d2a4647f4361" kindref="member">start</ref><sp/>=<sp/><ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s)<sp/>{</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfmt_1_1_basic_formatter_1af8270b25395aeb82b8c72c370c5cf13a" kindref="member">Char</ref><sp/><ref refid="glew_8h_1ae0f40feefa74d9cb1721a009573cfce5" kindref="member">c</ref><sp/>=<sp/>*s++;</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>==<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1a7c721969e9660580a237bd4130422ab6" kindref="member">write</ref>(writer_,<sp/>start,<sp/>s);</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>++<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(</highlight><highlight class="stringliteral">&quot;unmatched<sp/>&apos;}&apos;<sp/>in<sp/>format<sp/>string&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1a7c721969e9660580a237bd4130422ab6" kindref="member">write</ref>(writer_,<sp/>start,<sp/>s<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref><sp/><ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref><sp/>=<sp/><ref refid="namespacefmt_1_1internal_1a27d95fd413ab4be7aca6fe53f1a7f6a6" kindref="member">internal::is_name_start</ref>(*s)<sp/>?</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parse_arg_name(s)<sp/>:<sp/>parse_arg_index(s);</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>s<sp/>=<sp/><ref refid="namespacefmt_1a638f25c535b3bfa12dc1478b11885b6f" kindref="member">format</ref>(s,<sp/>arg);</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/><ref refid="namespacefmt_1_1internal_1a7c721969e9660580a237bd4130422ab6" kindref="member">write</ref>(writer_,<sp/>start,<sp/>s);</highlight></codeline>
<codeline lineno="3753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3754"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>fmt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3755"><highlight class="normal"></highlight></codeline>
<codeline lineno="3756"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_USER_DEFINED_LITERALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3757"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefmt" kindref="compound">fmt</ref><sp/>{</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceinternal" kindref="compound">internal</ref><sp/>{</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"></highlight></codeline>
<codeline lineno="3760"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">UdlFormat<sp/>{</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_formatter_1af8270b25395aeb82b8c72c370c5cf13a" kindref="member">Char</ref><sp/>*str;</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"></highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()(Args<sp/>&amp;&amp;<sp/>...<sp/>args)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>decltype(<ref refid="namespacefmt_1a638f25c535b3bfa12dc1478b11885b6f" kindref="member">format</ref>(str,<sp/>std::forward&lt;Args&gt;(args)...))<sp/>{</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1a638f25c535b3bfa12dc1478b11885b6f" kindref="member">format</ref>(str,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3769"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"></highlight></codeline>
<codeline lineno="3771"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">UdlArg<sp/>{</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_formatter_1af8270b25395aeb82b8c72c370c5cf13a" kindref="member">Char</ref><sp/>*str;</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"></highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1internal_1_1_named_arg" kindref="compound">NamedArg&lt;Char&gt;</ref><sp/>operator=(T<sp/>&amp;&amp;value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{str,<sp/>std::forward&lt;T&gt;(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)};</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3779"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"></highlight></codeline>
<codeline lineno="3781"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3782"><highlight class="normal"></highlight></codeline>
<codeline lineno="3783"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">literals<sp/>{</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"></highlight></codeline>
<codeline lineno="3795"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::UdlFormat&lt;char&gt;</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_format(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>,<sp/>std::size_t)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{s};<sp/>}</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::UdlFormat&lt;wchar_t&gt;</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_format(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*s,<sp/>std::size_t)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{s};<sp/>}</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"></highlight></codeline>
<codeline lineno="3810"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::UdlArg&lt;char&gt;</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_a(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/>std::size_t)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{s};<sp/>}</highlight></codeline>
<codeline lineno="3812"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>internal::UdlArg&lt;wchar_t&gt;</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_a(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*s,<sp/>std::size_t)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{s};<sp/>}</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"></highlight></codeline>
<codeline lineno="3815"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>inline<sp/>namespace<sp/>literals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3816"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>fmt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3817"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>FMT_USE_USER_DEFINED_LITERALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3818"><highlight class="normal"></highlight></codeline>
<codeline lineno="3819"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Restore<sp/>warnings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3820"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_GCC_VERSION<sp/>&gt;=<sp/>406</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3821"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3822"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3823"><highlight class="normal"></highlight></codeline>
<codeline lineno="3824"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)<sp/>&amp;&amp;<sp/>!defined(FMT_ICC_VERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3825"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3826"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3827"><highlight class="normal"></highlight></codeline>
<codeline lineno="3828"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FMT_HEADER_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3829"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_FUNC<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3830"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&quot;<ref refid="format_8cc" kindref="compound">format.cc</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3831"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3832" refid="format_8h_1a02c8898388e0ae59aab58be14fcd4e05" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3833"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3834"><highlight class="normal"></highlight></codeline>
<codeline lineno="3835"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>FMT_FORMAT_H_</highlight></codeline>
    </programlisting>
    <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h"/>
  </compounddef>
</doxygen>
