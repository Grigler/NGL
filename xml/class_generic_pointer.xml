<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_generic_pointer" kind="class" language="C++" prot="public">
    <compoundname>GenericPointer</compoundname>
    <includes refid="pointer_8h" local="no">pointer.h</includes>
    <innerclass refid="class_generic_pointer_1_1_percent_decode_stream" prot="private">GenericPointer::PercentDecodeStream</innerclass>
    <innerclass refid="class_generic_pointer_1_1_percent_encode_stream" prot="private">GenericPointer::PercentEncodeStream</innerclass>
    <innerclass refid="struct_generic_pointer_1_1_token" prot="public">GenericPointer::Token</innerclass>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>ValueType</declname>
        <defname>ValueType</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>Allocator</declname>
        <defname>Allocator</defname>
        <defval><ref refid="class_crt_allocator" kindref="compound">CrtAllocator</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Constructors and destructor.</header>
      <memberdef kind="function" id="class_generic_pointer_1a7455896b98c559ac7842bfbe91d86c10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</definition>
        <argsstring>()</argsstring>
        <name>GenericPointer</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="99" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="99" bodyend="99"/>
        <referencedby refid="class_generic_pointer_1a4ad549b8a826c3c2dedf03fcc07be9b0" compoundref="pointer_8h" startline="106" endline="108">GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1a4ad549b8a826c3c2dedf03fcc07be9b0" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</definition>
        <argsstring>(const Ch *source, Allocator *allocator=0)</argsstring>
        <name>GenericPointer</name>
        <param>
          <type><ref refid="class_generic_pointer_1ad6e06cd83cf52e045c7e07a67078e973" kindref="member">const</ref> <ref refid="class_generic_pointer_1a38b73c84d37428340066d907f9d4f37f" kindref="member">Ch</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>Allocator *</type>
          <declname>allocator</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Constructor that parses a string or URI fragment representation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>A null-terminated, string or URI fragment representation of JSON pointer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>User supplied allocator for this pointer. If no allocator is provided, it creates a self-owned one. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="106" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="106" bodyend="108"/>
        <references refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" compoundref="pointer_8h" startline="232">GenericPointer&lt; ValueType, Allocator &gt;::allocator</references>
        <references refid="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" compoundref="pointer_8h" startline="1002">GenericPointer&lt; ValueType, Allocator &gt;::allocator_</references>
        <references refid="class_generic_pointer_1a7455896b98c559ac7842bfbe91d86c10" compoundref="pointer_8h" startline="99" endline="99">GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</references>
        <references refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0" compoundref="pointer_8h" startline="30">kPointerParseErrorNone</references>
        <references refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" compoundref="pointer_8h" startline="1004">GenericPointer&lt; ValueType, Allocator &gt;::nameBuffer_</references>
        <references refid="class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab" compoundref="pointer_8h" startline="1003">GenericPointer&lt; ValueType, Allocator &gt;::ownAllocator_</references>
        <references refid="class_generic_pointer_1a542a313d11b2296c92420179b9e9cf87" compoundref="pointer_8h" startline="767" endline="897">GenericPointer&lt; ValueType, Allocator &gt;::Parse</references>
        <references refid="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" compoundref="pointer_8h" startline="1008">GenericPointer&lt; ValueType, Allocator &gt;::parseErrorCode_</references>
        <references refid="class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37" compoundref="pointer_8h" startline="1007">GenericPointer&lt; ValueType, Allocator &gt;::parseErrorOffset_</references>
        <references refid="namespaceinternal_1a86326fb0c9d7c7ea8edd7deedbb2b26e" compoundref="strfunc_8h" startline="30" endline="34">internal::StrLen</references>
        <references refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" compoundref="pointer_8h" startline="1006">GenericPointer&lt; ValueType, Allocator &gt;::tokenCount_</references>
        <references refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" compoundref="pointer_8h" startline="1005">GenericPointer&lt; ValueType, Allocator &gt;::tokens_</references>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1a9c05684ea95306aac7626e70cb3946cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</definition>
        <argsstring>(const Ch *source, size_t length, Allocator *allocator=0)</argsstring>
        <name>GenericPointer</name>
        <param>
          <type><ref refid="class_generic_pointer_1ad6e06cd83cf52e045c7e07a67078e973" kindref="member">const</ref> <ref refid="class_generic_pointer_1a38b73c84d37428340066d907f9d4f37f" kindref="member">Ch</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>Allocator *</type>
          <declname>allocator</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Constructor that parses a string or URI fragment representation, with length of the source string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>A string or URI fragment representation of JSON pointer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>User supplied allocator for this pointer. If no allocator is provided, it creates a self-owned one. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Slightly faster than the overload without length. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="129" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="129" bodyend="131"/>
        <references refid="class_generic_pointer_1a542a313d11b2296c92420179b9e9cf87" compoundref="pointer_8h" startline="767" endline="897">GenericPointer&lt; ValueType, Allocator &gt;::Parse</references>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1a524a9921eff68f389a817a20ca7f1d84" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</definition>
        <argsstring>(const Token *tokens, size_t tokenCount)</argsstring>
        <name>GenericPointer</name>
        <param>
          <type><ref refid="class_generic_pointer_1ad6e06cd83cf52e045c7e07a67078e973" kindref="member">const</ref> <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref> *</type>
          <declname>tokens</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>tokenCount</declname>
        </param>
        <briefdescription>
<para>Constructor with user-supplied tokens. </para>        </briefdescription>
        <detaileddescription>
<para>This constructor let user supplies const array of tokens. This prevents the parsing process and eliminates allocation. This is preferred for memory constrained environments.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tokens</parametername>
</parameternamelist>
<parameterdescription>
<para>An constant array of tokens representing the JSON pointer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tokenCount</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of tokens.</para></parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>NAME(s)<sp/>{<sp/>s,<sp/>sizeof(s)<sp/>/<sp/>sizeof(s[0])<sp/>-<sp/>1,<sp/>kPointerInvalidIndex<sp/>}</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>INDEX(i)<sp/>{<sp/>#i,<sp/>sizeof(#i)<sp/>-<sp/>1,<sp/>i<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>const<sp/>Pointer::Token<sp/>kTokens[]<sp/>=<sp/>{<sp/>NAME(&quot;foo&quot;),<sp/>INDEX(123)<sp/>};</highlight></codeline>
<codeline><highlight class="normal">static<sp/>const<sp/>Pointer<sp/>p(kTokens,<sp/>sizeof(kTokens)<sp/>/<sp/>sizeof(kTokens[0]));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Equivalent<sp/>to<sp/>static<sp/>const<sp/>Pointer<sp/>p(&quot;/foo/123&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#undef<sp/>NAME</highlight></codeline>
<codeline><highlight class="normal">#undef<sp/>INDEX</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="155" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="155" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1a7803645e8f7f349ee09c7d50351e9432" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</definition>
        <argsstring>(const GenericPointer &amp;rhs)</argsstring>
        <name>GenericPointer</name>
        <param>
          <type><ref refid="class_generic_pointer_1ad6e06cd83cf52e045c7e07a67078e973" kindref="member">const</ref> <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="158" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="158" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1acf3eb2f7c4ebf9256f638aafa17534cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GenericPointer&lt; ValueType, Allocator &gt;::~GenericPointer</definition>
        <argsstring>()</argsstring>
        <name>~GenericPointer</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="163" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="163" bodyend="167"/>
        <references refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" compoundref="pointer_8h" startline="1004">GenericPointer&lt; ValueType, Allocator &gt;::nameBuffer_</references>
        <references refid="class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab" compoundref="pointer_8h" startline="1003">GenericPointer&lt; ValueType, Allocator &gt;::ownAllocator_</references>
        <references refid="rapidjson_8h_1a52c941c3fdd646527cdcd42aa846a28a" compoundref="rapidjson_8h" startline="484">RAPIDJSON_DELETE</references>
        <references refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" compoundref="pointer_8h" startline="1005">GenericPointer&lt; ValueType, Allocator &gt;::tokens_</references>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1a1d0174a6e72daa4024da9e08ce1e7951" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref> &amp;</type>
        <definition>GenericPointer&amp; GenericPointer&lt; ValueType, Allocator &gt;::operator=</definition>
        <argsstring>(const GenericPointer &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_generic_pointer_1ad6e06cd83cf52e045c7e07a67078e973" kindref="member">const</ref> <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="170" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="170" bodyend="188"/>
        <references refid="class_generic_pointer_1af6708500dbbfd4a01b0fa291ca487e1d" compoundref="pointer_8h" startline="730" endline="750">GenericPointer&lt; ValueType, Allocator &gt;::CopyFromRaw</references>
        <references refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" compoundref="pointer_8h" startline="1004">GenericPointer&lt; ValueType, Allocator &gt;::nameBuffer_</references>
        <references refid="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" compoundref="pointer_8h" startline="1008">GenericPointer&lt; ValueType, Allocator &gt;::parseErrorCode_</references>
        <references refid="class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37" compoundref="pointer_8h" startline="1007">GenericPointer&lt; ValueType, Allocator &gt;::parseErrorOffset_</references>
        <references refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" compoundref="pointer_8h" startline="1006">GenericPointer&lt; ValueType, Allocator &gt;::tokenCount_</references>
        <references refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" compoundref="pointer_8h" startline="1005">GenericPointer&lt; ValueType, Allocator &gt;::tokens_</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Append token</header>
      <memberdef kind="function" id="class_generic_pointer_1a6d55ac55724890527e583f26b2774f02" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref></type>
        <definition>GenericPointer GenericPointer&lt; ValueType, Allocator &gt;::Append</definition>
        <argsstring>(const Token &amp;token, Allocator *allocator=0) const </argsstring>
        <name>Append</name>
        <param>
          <type><ref refid="class_generic_pointer_1ad6e06cd83cf52e045c7e07a67078e973" kindref="member">const</ref> <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref> &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type>Allocator *</type>
          <declname>allocator</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Append a token and return a new Pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref> to be appended. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator for the newly return Pointer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new Pointer with appended token. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="201" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="201" bodyend="210"/>
        <references refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" compoundref="pointer_8h" startline="232">GenericPointer&lt; ValueType, Allocator &gt;::allocator</references>
        <references refid="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" compoundref="pointer_8h" startline="1002">GenericPointer&lt; ValueType, Allocator &gt;::allocator_</references>
        <references refid="class_generic_pointer_1af6708500dbbfd4a01b0fa291ca487e1d" compoundref="pointer_8h" startline="730" endline="750">GenericPointer&lt; ValueType, Allocator &gt;::CopyFromRaw</references>
        <references refid="struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf" compoundref="pointer_8h" startline="92">GenericPointer&lt; ValueType, Allocator &gt;::Token::index</references>
        <references refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" compoundref="pointer_8h" startline="91">GenericPointer&lt; ValueType, Allocator &gt;::Token::length</references>
        <references refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c" compoundref="pointer_8h" startline="90">GenericPointer&lt; ValueType, Allocator &gt;::Token::name</references>
        <references refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" compoundref="pointer_8h" startline="1006">GenericPointer&lt; ValueType, Allocator &gt;::tokenCount_</references>
        <references refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" compoundref="pointer_8h" startline="1005">GenericPointer&lt; ValueType, Allocator &gt;::tokens_</references>
        <referencedby refid="class_generic_pointer_1a0f2c0586fd945bf25a5da228d085f74b" compoundref="pointer_8h" startline="219" endline="222">GenericPointer&lt; ValueType, Allocator &gt;::Append</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1a0f2c0586fd945bf25a5da228d085f74b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref></type>
        <definition>GenericPointer GenericPointer&lt; ValueType, Allocator &gt;::Append</definition>
        <argsstring>(const Ch *name, SizeType length, Allocator *allocator=0) const </argsstring>
        <name>Append</name>
        <param>
          <type><ref refid="class_generic_pointer_1ad6e06cd83cf52e045c7e07a67078e973" kindref="member">const</ref> <ref refid="class_generic_pointer_1a38b73c84d37428340066d907f9d4f37f" kindref="member">Ch</ref> *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type>Allocator *</type>
          <declname>allocator</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Append a name token with length, and return a new Pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name to be appended. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator for the newly return Pointer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new Pointer with appended token. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="219" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="219" bodyend="222"/>
        <references refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" compoundref="pointer_8h" startline="232">GenericPointer&lt; ValueType, Allocator &gt;::allocator</references>
        <references refid="class_generic_pointer_1a6d55ac55724890527e583f26b2774f02" compoundref="pointer_8h" startline="201" endline="210">GenericPointer&lt; ValueType, Allocator &gt;::Append</references>
        <references refid="pointer_8h_1ae54ef57a7b599e262127c5adcc55960e" compoundref="pointer_8h" startline="23">kPointerInvalidIndex</references>
        <references refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" compoundref="pointer_8h" startline="91">GenericPointer&lt; ValueType, Allocator &gt;::Token::length</references>
        <references refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c" compoundref="pointer_8h" startline="90">GenericPointer&lt; ValueType, Allocator &gt;::Token::name</references>
        <references refid="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f">GenericPointer&lt; ValueType, Allocator &gt;::RAPIDJSON_DISABLEIF_RETURN</references>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>GenericPointer&lt; ValueType, Allocator &gt;::RAPIDJSON_DISABLEIF_RETURN</definition>
        <argsstring>((internal::NotExpr&lt; internal::IsSame&lt; typename internal::RemoveConst&lt; T &gt;::Type, Ch &gt; &gt;),(GenericPointer)) Append(T *name</argsstring>
        <name>RAPIDJSON_DISABLEIF_RETURN</name>
        <param>
          <type>(internal::NotExpr&lt; internal::IsSame&lt; typename internal::RemoveConst&lt; T &gt;::<ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">Type</ref>, <ref refid="class_generic_pointer_1a38b73c84d37428340066d907f9d4f37f" kindref="member">Ch</ref> &gt; &gt;)</type>
        </param>
        <param>
          <type>(<ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>)</type>
        </param>
        <briefdescription>
<para>Append a name token without length, and return a new Pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name (const Ch*) to be appended. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator for the newly return Pointer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new Pointer with appended token. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="231" column="1"/>
        <referencedby refid="class_generic_pointer_1a0f2c0586fd945bf25a5da228d085f74b" compoundref="pointer_8h" startline="219" endline="222">GenericPointer&lt; ValueType, Allocator &gt;::Append</referencedby>
        <referencedby refid="class_generic_pointer_1ae62ceea598633d21ad648b431b23c26a" compoundref="pointer_8h" startline="591" endline="593">GenericPointer&lt; ValueType, Allocator &gt;::Set</referencedby>
        <referencedby refid="pointer_8h_1a99418d6515d00c0203400d1412edb837" compoundref="pointer_8h" startline="1071" endline="1073">GetValueByPointerWithDefault</referencedby>
        <referencedby refid="pointer_8h_1ae96ce29de67839434baa923594ec6aaa" compoundref="pointer_8h" startline="1172" endline="1174">SetValueByPointer</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Set a value</header>
      <memberdef kind="variable" id="class_generic_pointer_1a08ef35da0ea9a51d8265a360f0c34540" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T GenericPointer&lt; ValueType, Allocator &gt;::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="608" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="608" bodyend="-1"/>
        <referencedby refid="class_generic_pointer_1adf0aa776e072b41d301e2a834ac2c2b5" compoundref="pointer_8h" startline="581" endline="583">GenericPointer&lt; ValueType, Allocator &gt;::Set</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_generic_pointer_1ace82428d4ad958b05a52480d949b32fa" prot="public" static="no" mutable="no">
        <type>T ValueType::AllocatorType &amp;<ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref></type>
        <definition>T ValueType::AllocatorType&amp; allocator GenericPointer&lt; ValueType, Allocator &gt;::const</definition>
        <argsstring></argsstring>
        <name>const</name>
        <initializer>{
        return Create(root, <ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>) = ValueType(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>).Move()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="608" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="608" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_generic_pointer_1afd073c4e3be53fd7ec08aec9f75fbaa9" prot="public" static="no" mutable="no">
        <type>stackAllocator &amp;</type>
        <definition>stackAllocator&amp; GenericPointer&lt; ValueType, Allocator &gt;::document</definition>
        <argsstring></argsstring>
        <name>document</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="644" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="644" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_generic_pointer_1abb1b141cfe93b7159842b5cad60d1be3" prot="public" static="no" mutable="no">
        <type>stackAllocator T <ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref></type>
        <definition>stackAllocator T value GenericPointer&lt; ValueType, Allocator &gt;::const</definition>
        <argsstring></argsstring>
        <name>const</name>
        <initializer>{
            return Create(<ref refid="class_generic_pointer_1a646e2825228e0d8331e3a49d7382202b" kindref="member">document</ref>) = <ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="644" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="644" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1adf0aa776e072b41d301e2a834ac2c2b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ValueType &amp;</type>
        <definition>ValueType&amp; GenericPointer&lt; ValueType, Allocator &gt;::Set</definition>
        <argsstring>(ValueType &amp;root, ValueType &amp;value, typename ValueType::AllocatorType &amp;allocator) const </argsstring>
        <name>Set</name>
        <param>
          <type>ValueType &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>ValueType &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename ValueType::AllocatorType &amp;</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
<para>Set a value in a subtree, with move semantics. </para>        </briefdescription>
        <detaileddescription>
<para>It creates all parents if they are not exist or types are different to the tokens. So this function always succeeds but potentially remove existing values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>root</parametername>
</parameternamelist>
<parameterdescription>
<para>Root value of a DOM sub-tree to be resolved. It can be any value other than document root. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator for creating the values if the specified value or its parents are not exist. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>Create() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="581" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="581" bodyend="583"/>
        <references refid="class_generic_pointer_1a08ef35da0ea9a51d8265a360f0c34540" compoundref="pointer_8h" startline="608">GenericPointer&lt; ValueType, Allocator &gt;::value</references>
        <referencedby refid="class_generic_pointer_1ae62ceea598633d21ad648b431b23c26a" compoundref="pointer_8h" startline="591" endline="593">GenericPointer&lt; ValueType, Allocator &gt;::Set</referencedby>
        <referencedby refid="pointer_8h_1aa1a07d61994bc13f68535428be4bbe66" compoundref="pointer_8h" startline="1162" endline="1164">SetValueByPointer</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1a80ceefa779d8d8e4699c433eb40ef1fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ValueType &amp;</type>
        <definition>ValueType&amp; GenericPointer&lt; ValueType, Allocator &gt;::Set</definition>
        <argsstring>(ValueType &amp;root, const ValueType &amp;value, typename ValueType::AllocatorType &amp;allocator) const </argsstring>
        <name>Set</name>
        <param>
          <type>ValueType &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type><ref refid="class_generic_pointer_1ad6e06cd83cf52e045c7e07a67078e973" kindref="member">const</ref> ValueType &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename ValueType::AllocatorType &amp;</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
<para>Set a value in a subtree, with copy semantics. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="586" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="586" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1ae62ceea598633d21ad648b431b23c26a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ValueType &amp;</type>
        <definition>ValueType&amp; GenericPointer&lt; ValueType, Allocator &gt;::Set</definition>
        <argsstring>(ValueType &amp;root, const Ch *value, typename ValueType::AllocatorType &amp;allocator) const </argsstring>
        <name>Set</name>
        <param>
          <type>ValueType &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type><ref refid="class_generic_pointer_1ad6e06cd83cf52e045c7e07a67078e973" kindref="member">const</ref> <ref refid="class_generic_pointer_1a38b73c84d37428340066d907f9d4f37f" kindref="member">Ch</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename ValueType::AllocatorType &amp;</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
<para>Set a null-terminated string in a subtree. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="591" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="591" bodyend="593"/>
        <references refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" compoundref="pointer_8h" startline="232">GenericPointer&lt; ValueType, Allocator &gt;::allocator</references>
        <references refid="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f">GenericPointer&lt; ValueType, Allocator &gt;::RAPIDJSON_DISABLEIF_RETURN</references>
        <references refid="class_generic_pointer_1adf0aa776e072b41d301e2a834ac2c2b5" compoundref="pointer_8h" startline="581" endline="583">GenericPointer&lt; ValueType, Allocator &gt;::Set</references>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1a914bbdd96e2a248e035b8ebd68526369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>GenericPointer&lt; ValueType, Allocator &gt;::RAPIDJSON_DISABLEIF_RETURN</definition>
        <argsstring>((internal::OrExpr&lt; internal::IsPointer&lt; T &gt;, internal::IsGenericValue&lt; T &gt; &gt;),(ValueType &amp;)) Set(ValueType &amp;root</argsstring>
        <name>RAPIDJSON_DISABLEIF_RETURN</name>
        <param>
          <type>(internal::OrExpr&lt; internal::IsPointer&lt; T &gt;, <ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue</ref>&lt; T &gt; &gt;)</type>
        </param>
        <param>
          <type>(ValueType &amp;)</type>
        </param>
        <briefdescription>
<para>Set a primitive value in a subtree. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Either <ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">Type</ref>, <computeroutput>int</computeroutput>, <computeroutput>unsigned</computeroutput>, <computeroutput>int64_t</computeroutput>, <computeroutput>uint64_t</computeroutput>, <computeroutput>bool</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="607" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1a49e879bd98bddbe7300f152a070d5604" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename stackAllocator</type>
          </param>
        </templateparamlist>
        <type>ValueType &amp;</type>
        <definition>ValueType&amp; GenericPointer&lt; ValueType, Allocator &gt;::Set</definition>
        <argsstring>(GenericDocument&lt; EncodingType, typename ValueType::AllocatorType, stackAllocator &gt; &amp;document, ValueType &amp;value) const </argsstring>
        <name>Set</name>
        <param>
          <type><ref refid="class_generic_document" kindref="compound">GenericDocument</ref>&lt; <ref refid="class_generic_pointer_1a4b802da797a7a0b615fd9611cedb7c3b" kindref="member">EncodingType</ref>, typename ValueType::AllocatorType, stackAllocator &gt; &amp;</type>
          <declname>document</declname>
        </param>
        <param>
          <type>ValueType &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set a value in a document, with move semantics. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="614" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="614" bodyend="616"/>
        <references refid="class_generic_pointer_1a08ef35da0ea9a51d8265a360f0c34540" compoundref="pointer_8h" startline="608">GenericPointer&lt; ValueType, Allocator &gt;::value</references>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1afa59f450284e5cc6f989dab4b8344168" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename stackAllocator</type>
          </param>
        </templateparamlist>
        <type>ValueType &amp;</type>
        <definition>ValueType&amp; GenericPointer&lt; ValueType, Allocator &gt;::Set</definition>
        <argsstring>(GenericDocument&lt; EncodingType, typename ValueType::AllocatorType, stackAllocator &gt; &amp;document, const ValueType &amp;value) const </argsstring>
        <name>Set</name>
        <param>
          <type><ref refid="class_generic_document" kindref="compound">GenericDocument</ref>&lt; <ref refid="class_generic_pointer_1a4b802da797a7a0b615fd9611cedb7c3b" kindref="member">EncodingType</ref>, typename ValueType::AllocatorType, stackAllocator &gt; &amp;</type>
          <declname>document</declname>
        </param>
        <param>
          <type><ref refid="class_generic_pointer_1ad6e06cd83cf52e045c7e07a67078e973" kindref="member">const</ref> ValueType &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set a value in a document, with copy semantics. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="620" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="620" bodyend="622"/>
        <references refid="class_generic_document_1aa4609d6b19f86aec1a6b96edf2c27686" compoundref="document_8h" startline="1992" endline="1995">GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;::GetAllocator</references>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1a09a5893890650b15939322a5d962c70a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename stackAllocator</type>
          </param>
        </templateparamlist>
        <type>ValueType &amp;</type>
        <definition>ValueType&amp; GenericPointer&lt; ValueType, Allocator &gt;::Set</definition>
        <argsstring>(GenericDocument&lt; EncodingType, typename ValueType::AllocatorType, stackAllocator &gt; &amp;document, const Ch *value) const </argsstring>
        <name>Set</name>
        <param>
          <type><ref refid="class_generic_document" kindref="compound">GenericDocument</ref>&lt; <ref refid="class_generic_pointer_1a4b802da797a7a0b615fd9611cedb7c3b" kindref="member">EncodingType</ref>, typename ValueType::AllocatorType, stackAllocator &gt; &amp;</type>
          <declname>document</declname>
        </param>
        <param>
          <type><ref refid="class_generic_pointer_1ad6e06cd83cf52e045c7e07a67078e973" kindref="member">const</ref> <ref refid="class_generic_pointer_1a38b73c84d37428340066d907f9d4f37f" kindref="member">Ch</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set a null-terminated string in a document. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="626" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="626" bodyend="628"/>
        <references refid="class_generic_document_1aa4609d6b19f86aec1a6b96edf2c27686" compoundref="document_8h" startline="1992" endline="1995">GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;::GetAllocator</references>
        <references refid="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f">GenericPointer&lt; ValueType, Allocator &gt;::RAPIDJSON_DISABLEIF_RETURN</references>
        <references refid="class_generic_pointer_1adf0aa776e072b41d301e2a834ac2c2b5" compoundref="pointer_8h" startline="581" endline="583">GenericPointer&lt; ValueType, Allocator &gt;::Set</references>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1a1bb4a253f33687734e5b20795632a801" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename stackAllocator</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>GenericPointer&lt; ValueType, Allocator &gt;::RAPIDJSON_DISABLEIF_RETURN</definition>
        <argsstring>((internal::OrExpr&lt; internal::IsPointer&lt; T &gt;, internal::IsGenericValue&lt; T &gt; &gt;),(ValueType &amp;)) Set(GenericDocument&lt; EncodingType</argsstring>
        <name>RAPIDJSON_DISABLEIF_RETURN</name>
        <param>
          <type>(internal::OrExpr&lt; internal::IsPointer&lt; T &gt;, <ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue</ref>&lt; T &gt; &gt;)</type>
        </param>
        <param>
          <type>(ValueType &amp;)</type>
        </param>
        <briefdescription>
<para>Set a primitive value in a document. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Either <ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">Type</ref>, <computeroutput>int</computeroutput>, <computeroutput>unsigned</computeroutput>, <computeroutput>int64_t</computeroutput>, <computeroutput>uint64_t</computeroutput>, <computeroutput>bool</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="643" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Swap a value</header>
      <memberdef kind="function" id="class_generic_pointer_1a25a063290bcf607694430d6b05ac9157" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ValueType &amp;</type>
        <definition>ValueType&amp; GenericPointer&lt; ValueType, Allocator &gt;::Swap</definition>
        <argsstring>(ValueType &amp;root, ValueType &amp;value, typename ValueType::AllocatorType &amp;allocator) const </argsstring>
        <name>Swap</name>
        <param>
          <type>ValueType &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>ValueType &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename ValueType::AllocatorType &amp;</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
<para>Swap a value with a value in a subtree. </para>        </briefdescription>
        <detaileddescription>
<para>It creates all parents if they are not exist or types are different to the tokens. So this function always succeeds but potentially remove existing values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>root</parametername>
</parameternamelist>
<parameterdescription>
<para>Root value of a DOM sub-tree to be resolved. It can be any value other than document root. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be swapped. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator for creating the values if the specified value or its parents are not exist. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>Create() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="663" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="663" bodyend="665"/>
        <referencedby refid="pointer_8h_1ad3de3c5603fb925ad5eafcb180d6353f" compoundref="pointer_8h" startline="1278" endline="1280">SwapValueByPointer</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1a403b64d9a3ff51ba5f21b038838564bb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename stackAllocator</type>
          </param>
        </templateparamlist>
        <type>ValueType &amp;</type>
        <definition>ValueType&amp; GenericPointer&lt; ValueType, Allocator &gt;::Swap</definition>
        <argsstring>(GenericDocument&lt; EncodingType, typename ValueType::AllocatorType, stackAllocator &gt; &amp;document, ValueType &amp;value) const </argsstring>
        <name>Swap</name>
        <param>
          <type><ref refid="class_generic_document" kindref="compound">GenericDocument</ref>&lt; <ref refid="class_generic_pointer_1a4b802da797a7a0b615fd9611cedb7c3b" kindref="member">EncodingType</ref>, typename ValueType::AllocatorType, stackAllocator &gt; &amp;</type>
          <declname>document</declname>
        </param>
        <param>
          <type>ValueType &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Swap a value with a value in a document. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="669" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="669" bodyend="671"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_generic_pointer_1a4b802da797a7a0b615fd9611cedb7c3b" prot="public" static="no">
        <type>ValueType::EncodingType</type>
        <definition>typedef ValueType::EncodingType GenericPointer&lt; ValueType, Allocator &gt;::EncodingType</definition>
        <argsstring></argsstring>
        <name>EncodingType</name>
        <briefdescription>
<para>Encoding type from Value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="73" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_generic_pointer_1a38b73c84d37428340066d907f9d4f37f" prot="public" static="no">
        <type>EncodingType::Ch</type>
        <definition>typedef EncodingType::Ch GenericPointer&lt; ValueType, Allocator &gt;::Ch</definition>
        <argsstring></argsstring>
        <name>Ch</name>
        <briefdescription>
<para>Character type from Value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="74" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" prot="public" static="no" mutable="no">
        <type>Allocator *</type>
        <definition>Allocator* GenericPointer&lt; ValueType, Allocator &gt;::allocator</definition>
        <argsstring></argsstring>
        <name>allocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="232" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="232" bodyend="-1"/>
        <referencedby refid="class_generic_pointer_1a4ad549b8a826c3c2dedf03fcc07be9b0" compoundref="pointer_8h" startline="106" endline="108">GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</referencedby>
        <referencedby refid="class_generic_pointer_1a6d55ac55724890527e583f26b2774f02" compoundref="pointer_8h" startline="201" endline="210">GenericPointer&lt; ValueType, Allocator &gt;::Append</referencedby>
        <referencedby refid="class_generic_pointer_1ae62ceea598633d21ad648b431b23c26a" compoundref="pointer_8h" startline="591" endline="593">GenericPointer&lt; ValueType, Allocator &gt;::Set</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_generic_pointer_1a646e2825228e0d8331e3a49d7382202b" prot="public" static="no" mutable="no">
        <type>Allocator stackAllocator stackAllocator &amp;</type>
        <definition>Allocator stackAllocator stackAllocator&amp; GenericPointer&lt; ValueType, Allocator &gt;::document</definition>
        <argsstring></argsstring>
        <name>document</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="562" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="562" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_generic_pointer_1ad6e06cd83cf52e045c7e07a67078e973" prot="public" static="no" mutable="no">
        <type>Allocator stackAllocator stackAllocator T <ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref></type>
        <definition>Allocator stackAllocator stackAllocator T defaultValue GenericPointer&lt; ValueType, Allocator &gt;::const</definition>
        <argsstring></argsstring>
        <name>const</name>
        <initializer>{
        return GetWithDefault(<ref refid="class_generic_pointer_1a646e2825228e0d8331e3a49d7382202b" kindref="member">document</ref>, <ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>, document.GetAllocator())</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="562" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="562" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" prot="private" static="no" mutable="no">
        <type>Allocator *</type>
        <definition>Allocator* GenericPointer&lt; ValueType, Allocator &gt;::allocator_</definition>
        <argsstring></argsstring>
        <name>allocator_</name>
        <briefdescription>
<para>The current allocator. It is either user-supplied or equal to ownAllocator_. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="1002" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="1002" bodyend="-1"/>
        <referencedby refid="class_generic_pointer_1a4ad549b8a826c3c2dedf03fcc07be9b0" compoundref="pointer_8h" startline="106" endline="108">GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</referencedby>
        <referencedby refid="class_generic_pointer_1a6d55ac55724890527e583f26b2774f02" compoundref="pointer_8h" startline="201" endline="210">GenericPointer&lt; ValueType, Allocator &gt;::Append</referencedby>
        <referencedby refid="class_generic_pointer_1af6708500dbbfd4a01b0fa291ca487e1d" compoundref="pointer_8h" startline="730" endline="750">GenericPointer&lt; ValueType, Allocator &gt;::CopyFromRaw</referencedby>
        <referencedby refid="class_generic_pointer_1a542a313d11b2296c92420179b9e9cf87" compoundref="pointer_8h" startline="767" endline="897">GenericPointer&lt; ValueType, Allocator &gt;::Parse</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab" prot="private" static="no" mutable="no">
        <type>Allocator *</type>
        <definition>Allocator* GenericPointer&lt; ValueType, Allocator &gt;::ownAllocator_</definition>
        <argsstring></argsstring>
        <name>ownAllocator_</name>
        <briefdescription>
<para>Allocator owned by this Pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="1003" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="1003" bodyend="-1"/>
        <referencedby refid="class_generic_pointer_1a4ad549b8a826c3c2dedf03fcc07be9b0" compoundref="pointer_8h" startline="106" endline="108">GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</referencedby>
        <referencedby refid="class_generic_pointer_1acf3eb2f7c4ebf9256f638aafa17534cb" compoundref="pointer_8h" startline="163" endline="167">GenericPointer&lt; ValueType, Allocator &gt;::~GenericPointer</referencedby>
        <referencedby refid="class_generic_pointer_1af6708500dbbfd4a01b0fa291ca487e1d" compoundref="pointer_8h" startline="730" endline="750">GenericPointer&lt; ValueType, Allocator &gt;::CopyFromRaw</referencedby>
        <referencedby refid="class_generic_pointer_1a542a313d11b2296c92420179b9e9cf87" compoundref="pointer_8h" startline="767" endline="897">GenericPointer&lt; ValueType, Allocator &gt;::Parse</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" prot="private" static="no" mutable="no">
        <type><ref refid="class_generic_pointer_1a38b73c84d37428340066d907f9d4f37f" kindref="member">Ch</ref> *</type>
        <definition>Ch* GenericPointer&lt; ValueType, Allocator &gt;::nameBuffer_</definition>
        <argsstring></argsstring>
        <name>nameBuffer_</name>
        <briefdescription>
<para>A buffer containing all names in tokens. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="1004" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="1004" bodyend="-1"/>
        <referencedby refid="class_generic_pointer_1a4ad549b8a826c3c2dedf03fcc07be9b0" compoundref="pointer_8h" startline="106" endline="108">GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</referencedby>
        <referencedby refid="class_generic_pointer_1acf3eb2f7c4ebf9256f638aafa17534cb" compoundref="pointer_8h" startline="163" endline="167">GenericPointer&lt; ValueType, Allocator &gt;::~GenericPointer</referencedby>
        <referencedby refid="class_generic_pointer_1a1d0174a6e72daa4024da9e08ce1e7951" compoundref="pointer_8h" startline="170" endline="188">GenericPointer&lt; ValueType, Allocator &gt;::operator=</referencedby>
        <referencedby refid="class_generic_pointer_1af6708500dbbfd4a01b0fa291ca487e1d" compoundref="pointer_8h" startline="730" endline="750">GenericPointer&lt; ValueType, Allocator &gt;::CopyFromRaw</referencedby>
        <referencedby refid="class_generic_pointer_1a542a313d11b2296c92420179b9e9cf87" compoundref="pointer_8h" startline="767" endline="897">GenericPointer&lt; ValueType, Allocator &gt;::Parse</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" prot="private" static="no" mutable="no">
        <type><ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref> *</type>
        <definition>Token* GenericPointer&lt; ValueType, Allocator &gt;::tokens_</definition>
        <argsstring></argsstring>
        <name>tokens_</name>
        <briefdescription>
<para>A list of tokens. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="1005" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="1005" bodyend="-1"/>
        <referencedby refid="class_generic_pointer_1a4ad549b8a826c3c2dedf03fcc07be9b0" compoundref="pointer_8h" startline="106" endline="108">GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</referencedby>
        <referencedby refid="class_generic_pointer_1acf3eb2f7c4ebf9256f638aafa17534cb" compoundref="pointer_8h" startline="163" endline="167">GenericPointer&lt; ValueType, Allocator &gt;::~GenericPointer</referencedby>
        <referencedby refid="class_generic_pointer_1a1d0174a6e72daa4024da9e08ce1e7951" compoundref="pointer_8h" startline="170" endline="188">GenericPointer&lt; ValueType, Allocator &gt;::operator=</referencedby>
        <referencedby refid="class_generic_pointer_1a6d55ac55724890527e583f26b2774f02" compoundref="pointer_8h" startline="201" endline="210">GenericPointer&lt; ValueType, Allocator &gt;::Append</referencedby>
        <referencedby refid="class_generic_pointer_1aa8fd4b1259fc500188f4162571b280ec" compoundref="pointer_8h" startline="682" endline="720">GenericPointer&lt; ValueType, Allocator &gt;::Erase</referencedby>
        <referencedby refid="class_generic_pointer_1af6708500dbbfd4a01b0fa291ca487e1d" compoundref="pointer_8h" startline="730" endline="750">GenericPointer&lt; ValueType, Allocator &gt;::CopyFromRaw</referencedby>
        <referencedby refid="class_generic_pointer_1a542a313d11b2296c92420179b9e9cf87" compoundref="pointer_8h" startline="767" endline="897">GenericPointer&lt; ValueType, Allocator &gt;::Parse</referencedby>
        <referencedby refid="class_generic_pointer_1ae3d83647990a335bab478afc84737b63" compoundref="pointer_8h" startline="906" endline="937">GenericPointer&lt; ValueType, Allocator &gt;::Stringify</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t GenericPointer&lt; ValueType, Allocator &gt;::tokenCount_</definition>
        <argsstring></argsstring>
        <name>tokenCount_</name>
        <briefdescription>
<para>Number of tokens in tokens_. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="1006" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="1006" bodyend="-1"/>
        <referencedby refid="class_generic_pointer_1a4ad549b8a826c3c2dedf03fcc07be9b0" compoundref="pointer_8h" startline="106" endline="108">GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</referencedby>
        <referencedby refid="class_generic_pointer_1a1d0174a6e72daa4024da9e08ce1e7951" compoundref="pointer_8h" startline="170" endline="188">GenericPointer&lt; ValueType, Allocator &gt;::operator=</referencedby>
        <referencedby refid="class_generic_pointer_1a6d55ac55724890527e583f26b2774f02" compoundref="pointer_8h" startline="201" endline="210">GenericPointer&lt; ValueType, Allocator &gt;::Append</referencedby>
        <referencedby refid="class_generic_pointer_1aa8fd4b1259fc500188f4162571b280ec" compoundref="pointer_8h" startline="682" endline="720">GenericPointer&lt; ValueType, Allocator &gt;::Erase</referencedby>
        <referencedby refid="class_generic_pointer_1af6708500dbbfd4a01b0fa291ca487e1d" compoundref="pointer_8h" startline="730" endline="750">GenericPointer&lt; ValueType, Allocator &gt;::CopyFromRaw</referencedby>
        <referencedby refid="class_generic_pointer_1a542a313d11b2296c92420179b9e9cf87" compoundref="pointer_8h" startline="767" endline="897">GenericPointer&lt; ValueType, Allocator &gt;::Parse</referencedby>
        <referencedby refid="class_generic_pointer_1ae3d83647990a335bab478afc84737b63" compoundref="pointer_8h" startline="906" endline="937">GenericPointer&lt; ValueType, Allocator &gt;::Stringify</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t GenericPointer&lt; ValueType, Allocator &gt;::parseErrorOffset_</definition>
        <argsstring></argsstring>
        <name>parseErrorOffset_</name>
        <briefdescription>
<para>Offset in code unit when parsing fail. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="1007" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="1007" bodyend="-1"/>
        <referencedby refid="class_generic_pointer_1a4ad549b8a826c3c2dedf03fcc07be9b0" compoundref="pointer_8h" startline="106" endline="108">GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</referencedby>
        <referencedby refid="class_generic_pointer_1a1d0174a6e72daa4024da9e08ce1e7951" compoundref="pointer_8h" startline="170" endline="188">GenericPointer&lt; ValueType, Allocator &gt;::operator=</referencedby>
        <referencedby refid="class_generic_pointer_1a542a313d11b2296c92420179b9e9cf87" compoundref="pointer_8h" startline="767" endline="897">GenericPointer&lt; ValueType, Allocator &gt;::Parse</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" prot="private" static="no" mutable="no">
        <type><ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gacb2e274f33e54d91b96e9883a99a98be" kindref="member">PointerParseErrorCode</ref></type>
        <definition>PointerParseErrorCode GenericPointer&lt; ValueType, Allocator &gt;::parseErrorCode_</definition>
        <argsstring></argsstring>
        <name>parseErrorCode_</name>
        <briefdescription>
<para>Parsing error code. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="1008" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="1008" bodyend="-1"/>
        <referencedby refid="class_generic_pointer_1a4ad549b8a826c3c2dedf03fcc07be9b0" compoundref="pointer_8h" startline="106" endline="108">GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</referencedby>
        <referencedby refid="class_generic_pointer_1a1d0174a6e72daa4024da9e08ce1e7951" compoundref="pointer_8h" startline="170" endline="188">GenericPointer&lt; ValueType, Allocator &gt;::operator=</referencedby>
        <referencedby refid="class_generic_pointer_1a542a313d11b2296c92420179b9e9cf87" compoundref="pointer_8h" startline="767" endline="897">GenericPointer&lt; ValueType, Allocator &gt;::Parse</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_generic_pointer_1aebf325c6fde06adfc4d959b507d7f170" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Allocator stackAllocator</type>
        <definition>Allocator stackAllocator GenericPointer&lt; ValueType, Allocator &gt;::RAPIDJSON_DISABLEIF_RETURN</definition>
        <argsstring>((internal::OrExpr&lt; internal::IsPointer&lt; T &gt;, internal::IsGenericValue&lt; T &gt; &gt;),(ValueType &amp;)) GetWithDefault(GenericDocument&lt; EncodingType</argsstring>
        <name>RAPIDJSON_DISABLEIF_RETURN</name>
        <param>
          <type>(internal::OrExpr&lt; internal::IsPointer&lt; T &gt;, <ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue</ref>&lt; T &gt; &gt;)</type>
        </param>
        <param>
          <type>(ValueType &amp;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="561" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1aa8fd4b1259fc500188f4162571b280ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool GenericPointer&lt; ValueType, Allocator &gt;::Erase</definition>
        <argsstring>(ValueType &amp;root) const </argsstring>
        <name>Erase</name>
        <param>
          <type>ValueType &amp;</type>
          <declname>root</declname>
        </param>
        <briefdescription>
<para>Erase a value in a subtree. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>root</parametername>
</parameternamelist>
<parameterdescription>
<para>Root value of a DOM sub-tree to be resolved. It can be any value other than document root. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether the resolved value is found and erased.</para></simplesect>
<simplesect kind="note"><para>Erasing with an empty pointer <computeroutput>Pointer</computeroutput>(&quot;&quot;), i.e. the root, always fail and return false. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="682" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="682" bodyend="720"/>
        <references refid="struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf" compoundref="pointer_8h" startline="92">GenericPointer&lt; ValueType, Allocator &gt;::Token::index</references>
        <references refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7af41527d6925efa3c5c3dadb23dfef7c8" compoundref="rapidjson_8h" startline="647">kArrayType</references>
        <references refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f" compoundref="rapidjson_8h" startline="646">kObjectType</references>
        <references refid="pointer_8h_1ae54ef57a7b599e262127c5adcc55960e" compoundref="pointer_8h" startline="23">kPointerInvalidIndex</references>
        <references refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" compoundref="pointer_8h" startline="91">GenericPointer&lt; ValueType, Allocator &gt;::Token::length</references>
        <references refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c" compoundref="pointer_8h" startline="90">GenericPointer&lt; ValueType, Allocator &gt;::Token::name</references>
        <references refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c" compoundref="rapidjson_8h" startline="344">RAPIDJSON_ASSERT</references>
        <references refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" compoundref="pointer_8h" startline="1006">GenericPointer&lt; ValueType, Allocator &gt;::tokenCount_</references>
        <references refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" compoundref="pointer_8h" startline="1005">GenericPointer&lt; ValueType, Allocator &gt;::tokens_</references>
        <referencedby refid="pointer_8h_1a7342710933f35ad7267c871f4a8cc55f" compoundref="pointer_8h" startline="1300" endline="1302">EraseValueByPointer</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_generic_pointer_1af6708500dbbfd4a01b0fa291ca487e1d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_generic_pointer_1a38b73c84d37428340066d907f9d4f37f" kindref="member">Ch</ref> *</type>
        <definition>Ch* GenericPointer&lt; ValueType, Allocator &gt;::CopyFromRaw</definition>
        <argsstring>(const GenericPointer &amp;rhs, size_t extraToken=0, size_t extraNameBufferSize=0)</argsstring>
        <name>CopyFromRaw</name>
        <param>
          <type><ref refid="class_generic_pointer_1ad6e06cd83cf52e045c7e07a67078e973" kindref="member">const</ref> <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>extraToken</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>extraNameBufferSize</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Clone the content from rhs to this. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Source pointer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extraToken</parametername>
</parameternamelist>
<parameterdescription>
<para>Extra tokens to be allocated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extraNameBufferSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Extra name buffer size (in number of Ch) to be allocated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Start of non-occupied name buffer, for storing extra names. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="730" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="730" bodyend="750"/>
        <references refid="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" compoundref="pointer_8h" startline="1002">GenericPointer&lt; ValueType, Allocator &gt;::allocator_</references>
        <references refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" compoundref="pointer_8h" startline="1004">GenericPointer&lt; ValueType, Allocator &gt;::nameBuffer_</references>
        <references refid="class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab" compoundref="pointer_8h" startline="1003">GenericPointer&lt; ValueType, Allocator &gt;::ownAllocator_</references>
        <references refid="rapidjson_8h_1ab9e102fa2f1a0ae4914d4dac21f690a2" compoundref="rapidjson_8h" startline="480">RAPIDJSON_NEW</references>
        <references refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" compoundref="pointer_8h" startline="1006">GenericPointer&lt; ValueType, Allocator &gt;::tokenCount_</references>
        <references refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" compoundref="pointer_8h" startline="1005">GenericPointer&lt; ValueType, Allocator &gt;::tokens_</references>
        <referencedby refid="class_generic_pointer_1a1d0174a6e72daa4024da9e08ce1e7951" compoundref="pointer_8h" startline="170" endline="188">GenericPointer&lt; ValueType, Allocator &gt;::operator=</referencedby>
        <referencedby refid="class_generic_pointer_1a6d55ac55724890527e583f26b2774f02" compoundref="pointer_8h" startline="201" endline="210">GenericPointer&lt; ValueType, Allocator &gt;::Append</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1ab7dc9f4a09830b4c19083608e25ef0a9" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool GenericPointer&lt; ValueType, Allocator &gt;::NeedPercentEncode</definition>
        <argsstring>(Ch c) const </argsstring>
        <name>NeedPercentEncode</name>
        <param>
          <type><ref refid="class_generic_pointer_1a38b73c84d37428340066d907f9d4f37f" kindref="member">Ch</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Check whether a character should be percent-encoded. </para>        </briefdescription>
        <detaileddescription>
<para>According to RFC 3986 2.3 Unreserved Characters. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character (code unit) to be tested. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="757" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="757" bodyend="759"/>
        <referencedby refid="class_generic_pointer_1a542a313d11b2296c92420179b9e9cf87" compoundref="pointer_8h" startline="767" endline="897">GenericPointer&lt; ValueType, Allocator &gt;::Parse</referencedby>
        <referencedby refid="class_generic_pointer_1ae3d83647990a335bab478afc84737b63" compoundref="pointer_8h" startline="906" endline="937">GenericPointer&lt; ValueType, Allocator &gt;::Stringify</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1a542a313d11b2296c92420179b9e9cf87" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>void GenericPointer&lt; ValueType, Allocator &gt;::Parse</definition>
        <argsstring>(const Ch *source, size_t length)</argsstring>
        <name>Parse</name>
        <param>
          <type><ref refid="class_generic_pointer_1ad6e06cd83cf52e045c7e07a67078e973" kindref="member">const</ref> <ref refid="class_generic_pointer_1a38b73c84d37428340066d907f9d4f37f" kindref="member">Ch</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Parse a JSON String or its URI fragment representation into tokens. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Either a JSON Pointer string, or its URI fragment representation. Not need to be null terminated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the source string. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Source cannot be JSON String Representation of JSON Pointer, e.g. In &quot;/\u0000&quot;,  will not be unescaped. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="767" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="767" bodyend="897"/>
        <references refid="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" compoundref="pointer_8h" startline="1002">GenericPointer&lt; ValueType, Allocator &gt;::allocator_</references>
        <references refid="struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf" compoundref="pointer_8h" startline="92">GenericPointer&lt; ValueType, Allocator &gt;::Token::index</references>
        <references refid="class_generic_pointer_1_1_percent_decode_stream_1a0deba6d1e988138c1431028b7fdfde3d" compoundref="pointer_8h" startline="977" endline="977">GenericPointer&lt; ValueType, Allocator &gt;::PercentDecodeStream::IsValid</references>
        <references refid="pointer_8h_1ae54ef57a7b599e262127c5adcc55960e" compoundref="pointer_8h" startline="23">kPointerInvalidIndex</references>
        <references refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beabd7eae93627f74267009a03679b6dc38" compoundref="pointer_8h" startline="35">kPointerParseErrorCharacterMustPercentEncode</references>
        <references refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea4d2a7e511d717fd1d2f532ef5fcf821b" compoundref="pointer_8h" startline="33">kPointerParseErrorInvalidEscape</references>
        <references refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beac0c1b013c0db34dcc5a47fc1ee7a8c35" compoundref="pointer_8h" startline="34">kPointerParseErrorInvalidPercentEncoding</references>
        <references refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0" compoundref="pointer_8h" startline="30">kPointerParseErrorNone</references>
        <references refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea5821696a2ab6cbccdc8288cbe6e81c77" compoundref="pointer_8h" startline="32">kPointerParseErrorTokenMustBeginWithSolidus</references>
        <references refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" compoundref="pointer_8h" startline="91">GenericPointer&lt; ValueType, Allocator &gt;::Token::length</references>
        <references refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c" compoundref="pointer_8h" startline="90">GenericPointer&lt; ValueType, Allocator &gt;::Token::name</references>
        <references refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" compoundref="pointer_8h" startline="1004">GenericPointer&lt; ValueType, Allocator &gt;::nameBuffer_</references>
        <references refid="class_generic_pointer_1ab7dc9f4a09830b4c19083608e25ef0a9" compoundref="pointer_8h" startline="757" endline="759">GenericPointer&lt; ValueType, Allocator &gt;::NeedPercentEncode</references>
        <references refid="class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab" compoundref="pointer_8h" startline="1003">GenericPointer&lt; ValueType, Allocator &gt;::ownAllocator_</references>
        <references refid="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" compoundref="pointer_8h" startline="1008">GenericPointer&lt; ValueType, Allocator &gt;::parseErrorCode_</references>
        <references refid="class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37" compoundref="pointer_8h" startline="1007">GenericPointer&lt; ValueType, Allocator &gt;::parseErrorOffset_</references>
        <references refid="struct_generic_insitu_string_stream_1afc671072f56eb6e8d9009061c6565dd4" compoundref="rapidjson_8h" startline="618" endline="618">GenericInsituStringStream&lt; Encoding &gt;::PutBegin</references>
        <references refid="struct_generic_insitu_string_stream_1a93702b08ff29c66bde389b0d4e9efa5a" compoundref="rapidjson_8h" startline="619" endline="619">GenericInsituStringStream&lt; Encoding &gt;::PutEnd</references>
        <references refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c" compoundref="rapidjson_8h" startline="344">RAPIDJSON_ASSERT</references>
        <references refid="rapidjson_8h_1ab9e102fa2f1a0ae4914d4dac21f690a2" compoundref="rapidjson_8h" startline="480">RAPIDJSON_NEW</references>
        <references refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" compoundref="rapidjson_8h" startline="322">SizeType</references>
        <references refid="class_generic_pointer_1_1_percent_decode_stream_1af9ed027feb3fa8d62364f75ff9931c1a" compoundref="pointer_8h" startline="976" endline="976">GenericPointer&lt; ValueType, Allocator &gt;::PercentDecodeStream::Tell</references>
        <references refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" compoundref="pointer_8h" startline="1006">GenericPointer&lt; ValueType, Allocator &gt;::tokenCount_</references>
        <references refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" compoundref="pointer_8h" startline="1005">GenericPointer&lt; ValueType, Allocator &gt;::tokens_</references>
        <referencedby refid="class_generic_pointer_1a4ad549b8a826c3c2dedf03fcc07be9b0" compoundref="pointer_8h" startline="106" endline="108">GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1ae3d83647990a335bab478afc84737b63" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>uriFragment</declname>
            <defname>uriFragment</defname>
          </param>
          <param>
            <type>typename OutputStream</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool GenericPointer&lt; ValueType, Allocator &gt;::Stringify</definition>
        <argsstring>(OutputStream &amp;os) const </argsstring>
        <name>Stringify</name>
        <param>
          <type>OutputStream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>Stringify to string or URI fragment representation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>uriFragment</parametername>
</parameternamelist>
<parameterdescription>
<para>True for stringifying to URI fragment representation. False for string representation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutputStream</parametername>
</parameternamelist>
<parameterdescription>
<para>type of output stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>The output stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="906" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="906" bodyend="937"/>
        <references refid="class_generic_pointer_1ab7dc9f4a09830b4c19083608e25ef0a9" compoundref="pointer_8h" startline="757" endline="759">GenericPointer&lt; ValueType, Allocator &gt;::NeedPercentEncode</references>
        <references refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c" compoundref="rapidjson_8h" startline="344">RAPIDJSON_ASSERT</references>
        <references refid="pointer_8h_1a88db3bc0dcf4320c2b7b68142f7e30d3" compoundref="pointer_8h" startline="1107">source</references>
        <references refid="struct_generic_string_stream_1a71dde3ded678912be1ef56376a72a653" compoundref="rapidjson_8h" startline="578" endline="578">GenericStringStream&lt; Encoding &gt;::Tell</references>
        <references refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" compoundref="pointer_8h" startline="1006">GenericPointer&lt; ValueType, Allocator &gt;::tokenCount_</references>
        <references refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" compoundref="pointer_8h" startline="1005">GenericPointer&lt; ValueType, Allocator &gt;::tokens_</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a JSON Pointer. Use Pointer for <ref refid="struct_u_t_f8" kindref="compound">UTF8</ref> encoding and default allocator. </para>    </briefdescription>
    <detaileddescription>
<para>This class implements RFC 6901 &quot;JavaScript Object Notation (JSON) Pointer&quot; (<ulink url="https://tools.ietf.org/html/rfc6901">https://tools.ietf.org/html/rfc6901</ulink>).</para><para>A JSON pointer is for identifying a specific value in a JSON document (<ref refid="class_generic_document" kindref="compound">GenericDocument</ref>). It can simplify coding of DOM tree manipulation, because it can access multiple-level depth of DOM tree with single API call.</para><para>After it parses a string representation (e.g. &quot;/foo/0&quot; or URI fragment representation (e.g. &quot;#/foo/0&quot;) into its internal representation (tokens), it can be used to resolve a specific value in multiple documents, or sub-tree of documents.</para><para>Contrary to <ref refid="class_generic_value" kindref="compound">GenericValue</ref>, Pointer can be copy constructed and copy assigned. Apart from assignment, a Pointer cannot be modified after construction.</para><para>Although Pointer is very convenient, please aware that constructing Pointer involves parsing and dynamic memory allocation. A special constructor with user- supplied tokens eliminates these.</para><para><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref> depends on <ref refid="class_generic_document" kindref="compound">GenericDocument</ref> and <ref refid="class_generic_value" kindref="compound">GenericValue</ref>.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>The value type of the DOM tree. E.g. <ref refid="class_generic_value" kindref="compound">GenericValue</ref>&lt;UTF8&lt;&gt; &gt; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>The allocator type for allocating memory for internal representation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref> uses same encoding of ValueType. However, Allocator of <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref> is independent of Allocator of Value. </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="1553">
        <label>size_t</label>
      </node>
      <node id="1551">
        <label>GenericPointer&lt; ValueType, Allocator &gt;</label>
        <link refid="class_generic_pointer"/>
        <childnode refid="1552" relation="usage">
          <edgelabel>-tokens_</edgelabel>
        </childnode>
        <childnode refid="1553" relation="usage">
          <edgelabel>-tokenCount_</edgelabel>
          <edgelabel>-parseErrorOffset_</edgelabel>
        </childnode>
        <childnode refid="1554" relation="usage">
          <edgelabel>+value</edgelabel>
        </childnode>
      </node>
      <node id="1554">
        <label>T</label>
      </node>
      <node id="1552">
        <label>GenericPointer&lt; ValueType, Allocator &gt;::Token</label>
        <link refid="struct_generic_pointer_1_1_token"/>
      </node>
    </collaborationgraph>
    <location file="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" line="71" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/rapidjson/pointer.h" bodystart="71" bodyend="1009"/>
    <listofallmembers>
      <member refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>allocator</name></member>
      <member refid="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" prot="private" virt="non-virtual"><scope>GenericPointer</scope><name>allocator_</name></member>
      <member refid="class_generic_pointer_1a6d55ac55724890527e583f26b2774f02" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>Append</name></member>
      <member refid="class_generic_pointer_1a0f2c0586fd945bf25a5da228d085f74b" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>Append</name></member>
      <member refid="class_generic_pointer_1a38b73c84d37428340066d907f9d4f37f" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>Ch</name></member>
      <member refid="class_generic_pointer_1ad6e06cd83cf52e045c7e07a67078e973" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>const</name></member>
      <member refid="class_generic_pointer_1ace82428d4ad958b05a52480d949b32fa" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>const</name></member>
      <member refid="class_generic_pointer_1abb1b141cfe93b7159842b5cad60d1be3" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>const</name></member>
      <member refid="class_generic_pointer_1af6708500dbbfd4a01b0fa291ca487e1d" prot="private" virt="non-virtual"><scope>GenericPointer</scope><name>CopyFromRaw</name></member>
      <member refid="class_generic_pointer_1a646e2825228e0d8331e3a49d7382202b" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>document</name></member>
      <member refid="class_generic_pointer_1afd073c4e3be53fd7ec08aec9f75fbaa9" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>document</name></member>
      <member refid="class_generic_pointer_1a4b802da797a7a0b615fd9611cedb7c3b" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>EncodingType</name></member>
      <member refid="class_generic_pointer_1aa8fd4b1259fc500188f4162571b280ec" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>Erase</name></member>
      <member refid="class_generic_pointer_1a7455896b98c559ac7842bfbe91d86c10" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>GenericPointer</name></member>
      <member refid="class_generic_pointer_1a4ad549b8a826c3c2dedf03fcc07be9b0" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>GenericPointer</name></member>
      <member refid="class_generic_pointer_1a9c05684ea95306aac7626e70cb3946cc" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>GenericPointer</name></member>
      <member refid="class_generic_pointer_1a524a9921eff68f389a817a20ca7f1d84" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>GenericPointer</name></member>
      <member refid="class_generic_pointer_1a7803645e8f7f349ee09c7d50351e9432" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>GenericPointer</name></member>
      <member refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" prot="private" virt="non-virtual"><scope>GenericPointer</scope><name>nameBuffer_</name></member>
      <member refid="class_generic_pointer_1ab7dc9f4a09830b4c19083608e25ef0a9" prot="private" virt="non-virtual"><scope>GenericPointer</scope><name>NeedPercentEncode</name></member>
      <member refid="class_generic_pointer_1a1d0174a6e72daa4024da9e08ce1e7951" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>operator=</name></member>
      <member refid="class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab" prot="private" virt="non-virtual"><scope>GenericPointer</scope><name>ownAllocator_</name></member>
      <member refid="class_generic_pointer_1a542a313d11b2296c92420179b9e9cf87" prot="private" virt="non-virtual"><scope>GenericPointer</scope><name>Parse</name></member>
      <member refid="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" prot="private" virt="non-virtual"><scope>GenericPointer</scope><name>parseErrorCode_</name></member>
      <member refid="class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37" prot="private" virt="non-virtual"><scope>GenericPointer</scope><name>parseErrorOffset_</name></member>
      <member refid="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>RAPIDJSON_DISABLEIF_RETURN</name></member>
      <member refid="class_generic_pointer_1aebf325c6fde06adfc4d959b507d7f170" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>RAPIDJSON_DISABLEIF_RETURN</name></member>
      <member refid="class_generic_pointer_1a914bbdd96e2a248e035b8ebd68526369" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>RAPIDJSON_DISABLEIF_RETURN</name></member>
      <member refid="class_generic_pointer_1a1bb4a253f33687734e5b20795632a801" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>RAPIDJSON_DISABLEIF_RETURN</name></member>
      <member refid="class_generic_pointer_1adf0aa776e072b41d301e2a834ac2c2b5" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>Set</name></member>
      <member refid="class_generic_pointer_1a80ceefa779d8d8e4699c433eb40ef1fa" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>Set</name></member>
      <member refid="class_generic_pointer_1ae62ceea598633d21ad648b431b23c26a" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>Set</name></member>
      <member refid="class_generic_pointer_1a49e879bd98bddbe7300f152a070d5604" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>Set</name></member>
      <member refid="class_generic_pointer_1afa59f450284e5cc6f989dab4b8344168" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>Set</name></member>
      <member refid="class_generic_pointer_1a09a5893890650b15939322a5d962c70a" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>Set</name></member>
      <member refid="class_generic_pointer_1ae3d83647990a335bab478afc84737b63" prot="private" virt="non-virtual"><scope>GenericPointer</scope><name>Stringify</name></member>
      <member refid="class_generic_pointer_1a25a063290bcf607694430d6b05ac9157" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>Swap</name></member>
      <member refid="class_generic_pointer_1a403b64d9a3ff51ba5f21b038838564bb" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>Swap</name></member>
      <member refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" prot="private" virt="non-virtual"><scope>GenericPointer</scope><name>tokenCount_</name></member>
      <member refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" prot="private" virt="non-virtual"><scope>GenericPointer</scope><name>tokens_</name></member>
      <member refid="class_generic_pointer_1a08ef35da0ea9a51d8265a360f0c34540" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>value</name></member>
      <member refid="class_generic_pointer_1acf3eb2f7c4ebf9256f638aafa17534cb" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>~GenericPointer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
