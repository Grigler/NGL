<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_n_c_c_a_point_bake_8cpp" kind="file" language="C++">
    <compoundname>NCCAPointBake.cpp</compoundname>
    <includes refid="_n_c_c_a_point_bake_8h" local="yes">NCCAPointBake.h</includes>
    <includes refid="rapidxml_8hpp" local="yes">rapidxml/rapidxml.hpp</includes>
    <includes local="no">boost/lexical_cast.hpp</includes>
    <includes local="no">boost/tokenizer.hpp</includes>
    <includes local="no">cstring</includes>
    <incdepgraph>
      <node id="5028">
        <label>Types.h</label>
        <link refid="_types_8h"/>
        <childnode refid="5029" relation="include">
        </childnode>
        <childnode refid="5035" relation="include">
        </childnode>
        <childnode refid="5036" relation="include">
        </childnode>
        <childnode refid="5037" relation="include">
        </childnode>
      </node>
      <node id="5027">
        <label>Obj.h</label>
        <link refid="_obj_8h"/>
        <childnode refid="5028" relation="include">
        </childnode>
        <childnode refid="5038" relation="include">
        </childnode>
        <childnode refid="5039" relation="include">
        </childnode>
        <childnode refid="5044" relation="include">
        </childnode>
        <childnode refid="5045" relation="include">
        </childnode>
        <childnode refid="5041" relation="include">
        </childnode>
        <childnode refid="5042" relation="include">
        </childnode>
        <childnode refid="5046" relation="include">
        </childnode>
        <childnode refid="5050" relation="include">
        </childnode>
        <childnode refid="5051" relation="include">
        </childnode>
        <childnode refid="5053" relation="include">
        </childnode>
        <childnode refid="5056" relation="include">
        </childnode>
      </node>
      <node id="5063">
        <label>boost/tokenizer.hpp</label>
      </node>
      <node id="5040">
        <label>Image.h</label>
        <link refid="_image_8h"/>
        <childnode refid="5041" relation="include">
        </childnode>
        <childnode refid="5042" relation="include">
        </childnode>
        <childnode refid="5028" relation="include">
        </childnode>
        <childnode refid="5043" relation="include">
        </childnode>
      </node>
      <node id="5062">
        <label>boost/lexical_cast.hpp</label>
      </node>
      <node id="5055">
        <label>cstdint</label>
      </node>
      <node id="5037">
        <label>QGLContext</label>
      </node>
      <node id="5049">
        <label>Vec3.h</label>
        <link refid="_vec3_8h"/>
        <childnode refid="5028" relation="include">
        </childnode>
        <childnode refid="5048" relation="include">
        </childnode>
      </node>
      <node id="5056">
        <label>cmath</label>
      </node>
      <node id="5059">
        <label>cassert</label>
      </node>
      <node id="5031">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
        <childnode refid="5032" relation="include">
        </childnode>
        <childnode refid="5033" relation="include">
        </childnode>
      </node>
      <node id="5057">
        <label>rapidxml/rapidxml.hpp</label>
        <link refid="rapidxml_8hpp"/>
        <childnode refid="5058" relation="include">
        </childnode>
        <childnode refid="5059" relation="include">
        </childnode>
        <childnode refid="5060" relation="include">
        </childnode>
        <childnode refid="5061" relation="include">
        </childnode>
      </node>
      <node id="5041">
        <label>string</label>
      </node>
      <node id="5061">
        <label>exception</label>
      </node>
      <node id="5030">
        <label>stddef.h</label>
      </node>
      <node id="5045">
        <label>fstream</label>
      </node>
      <node id="5029">
        <label>glew.h</label>
        <link refid="glew_8h"/>
        <childnode refid="5030" relation="include">
        </childnode>
        <childnode refid="5031" relation="include">
        </childnode>
        <childnode refid="5034" relation="include">
        </childnode>
      </node>
      <node id="5034">
        <label>GL/glu.h</label>
      </node>
      <node id="5025">
        <label>NCCAPointBake.cpp</label>
        <link refid="NCCAPointBake.cpp"/>
        <childnode refid="5026" relation="include">
        </childnode>
        <childnode refid="5057" relation="include">
        </childnode>
        <childnode refid="5062" relation="include">
        </childnode>
        <childnode refid="5063" relation="include">
        </childnode>
        <childnode refid="5064" relation="include">
        </childnode>
      </node>
      <node id="5032">
        <label>limits.h</label>
      </node>
      <node id="5046">
        <label>Vec4.h</label>
        <link refid="_vec4_8h"/>
        <childnode refid="5028" relation="include">
        </childnode>
        <childnode refid="5047" relation="include">
        </childnode>
        <childnode refid="5049" relation="include">
        </childnode>
        <childnode refid="5048" relation="include">
        </childnode>
      </node>
      <node id="5052">
        <label>AbstractVAO.h</label>
        <link refid="_abstract_v_a_o_8h"/>
        <childnode refid="5028" relation="include">
        </childnode>
      </node>
      <node id="5033">
        <label>wchar.h</label>
      </node>
      <node id="5043">
        <label>Colour.h</label>
        <link refid="_colour_8h"/>
        <childnode refid="5028" relation="include">
        </childnode>
      </node>
      <node id="5039">
        <label>Texture.h</label>
        <link refid="_texture_8h"/>
        <childnode refid="5040" relation="include">
        </childnode>
        <childnode refid="5028" relation="include">
        </childnode>
        <childnode refid="5041" relation="include">
        </childnode>
      </node>
      <node id="5038">
        <label>vector</label>
      </node>
      <node id="5060">
        <label>new</label>
      </node>
      <node id="5048">
        <label>array</label>
      </node>
      <node id="5053">
        <label>RibExport.h</label>
        <link refid="_rib_export_8h"/>
        <childnode refid="5028" relation="include">
        </childnode>
        <childnode refid="5045" relation="include">
        </childnode>
        <childnode refid="5041" relation="include">
        </childnode>
      </node>
      <node id="5026">
        <label>NCCAPointBake.h</label>
        <link refid="_n_c_c_a_point_bake_8h"/>
        <childnode refid="5027" relation="include">
        </childnode>
        <childnode refid="5028" relation="include">
        </childnode>
        <childnode refid="5046" relation="include">
        </childnode>
        <childnode refid="5038" relation="include">
        </childnode>
        <childnode refid="5041" relation="include">
        </childnode>
      </node>
      <node id="5036">
        <label>QtOpenGL/QGLContext</label>
      </node>
      <node id="5054">
        <label>NGLassert.h</label>
        <link refid="_n_g_lassert_8h"/>
      </node>
      <node id="5058">
        <label>cstdlib</label>
      </node>
      <node id="5044">
        <label>iostream</label>
      </node>
      <node id="5035">
        <label>GL/gl.h</label>
      </node>
      <node id="5064">
        <label>cstring</label>
      </node>
      <node id="5047">
        <label>Vec2.h</label>
        <link refid="_vec2_8h"/>
        <childnode refid="5028" relation="include">
        </childnode>
        <childnode refid="5048" relation="include">
        </childnode>
      </node>
      <node id="5042">
        <label>memory</label>
      </node>
      <node id="5051">
        <label>BBox.h</label>
        <link refid="_b_box_8h"/>
        <childnode refid="5028" relation="include">
        </childnode>
        <childnode refid="5049" relation="include">
        </childnode>
        <childnode refid="5046" relation="include">
        </childnode>
        <childnode refid="5052" relation="include">
        </childnode>
        <childnode refid="5042" relation="include">
        </childnode>
      </node>
      <node id="5050">
        <label>AbstractMesh.h</label>
        <link refid="_abstract_mesh_8h"/>
        <childnode refid="5028" relation="include">
        </childnode>
        <childnode refid="5051" relation="include">
        </childnode>
        <childnode refid="5053" relation="include">
        </childnode>
        <childnode refid="5039" relation="include">
        </childnode>
        <childnode refid="5054" relation="include">
        </childnode>
        <childnode refid="5046" relation="include">
        </childnode>
        <childnode refid="5052" relation="include">
        </childnode>
        <childnode refid="5038" relation="include">
        </childnode>
        <childnode refid="5041" relation="include">
        </childnode>
        <childnode refid="5055" relation="include">
        </childnode>
        <childnode refid="5042" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacengl">ngl</innernamespace>
    <briefdescription>
<para>implementation files for NCCAPointBake class </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>Copyright<sp/>(C)<sp/>2010<sp/>Jon<sp/>Macey</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="16"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_n_c_c_a_point_bake_8h" kindref="compound">NCCAPointBake.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="rapidxml_8hpp" kindref="compound">rapidxml/rapidxml.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/lexical_cast.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/tokenizer.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="26"><highlight class="comment"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacengl" kindref="compound">ngl</ref></highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30" refid="namespacengl_1a28a1ca061f91e4bf081ac0e4d48a3c63" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::tokenizer&lt;boost::char_separator&lt;char&gt;<sp/>&gt;<sp/><ref refid="namespacengl_1a28a1ca061f91e4bf081ac0e4d48a3c63" kindref="member">tokenizer</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="classngl_1_1_n_c_c_a_point_bake_1af36042732e8ba3066b9da578c4400ce0" refkind="member"><highlight class="normal"><ref refid="classngl_1_1_n_c_c_a_point_bake_1af36042732e8ba3066b9da578c4400ce0" kindref="member">NCCAPointBake::NCCAPointBake</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a022615dc202587a3b5eb7d9c9aef1fc3" kindref="member">m_numFrames</ref>=0;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1ad5848a6fe3010ff09ff07c7316d4ba4f" kindref="member">m_currFrame</ref>=0;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a541041445e9b59c67a07ac2ff2d06491" kindref="member">m_nVerts</ref>=0;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a38a4de48d3917390c539147f9c47e637" kindref="member">m_startFrame</ref>=0;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a1f57c1484fb732c4999767c0b318e261" kindref="member">m_endFrame</ref>=0;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a4b8ef23d5d2262dd222bfd36f7a3dbd6" kindref="member">m_mesh</ref>=0;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a19b13e762e4103dd543dcb2f7845b319" kindref="member">m_binFile</ref>=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="classngl_1_1_n_c_c_a_point_bake_1ab78610a7787f4864f9e4d69281d63d84" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1ab78610a7787f4864f9e4d69281d63d84" kindref="member">NCCAPointBake::loadPointBake</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/>&amp;_fileName)<sp/>noexcept</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a022615dc202587a3b5eb7d9c9aef1fc3" kindref="member">m_numFrames</ref>=0;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1ad5848a6fe3010ff09ff07c7316d4ba4f" kindref="member">m_currFrame</ref>=0;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a541041445e9b59c67a07ac2ff2d06491" kindref="member">m_nVerts</ref>=0;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a38a4de48d3917390c539147f9c47e637" kindref="member">m_startFrame</ref>=0;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a1f57c1484fb732c4999767c0b318e261" kindref="member">m_endFrame</ref>=0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a4b8ef23d5d2262dd222bfd36f7a3dbd6" kindref="member">m_mesh</ref>=0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a19b13e762e4103dd543dcb2f7845b319" kindref="member">m_binFile</ref>=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><ref refid="classrapidxml_1_1xml__node" kindref="compound">rapidxml::xml_node&lt;&gt;</ref><sp/>*<sp/>rootNode;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>xml<sp/>file<sp/>into<sp/>a<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>xmlFile<sp/>(_fileName.c_str()<sp/>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!xmlFile.is_open())</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>open<sp/>file\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>std::vector&lt;char&gt;<sp/><ref refid="glew_8h_1a6c0f527f003707dfaca177b40f406ed9" kindref="member">buffer</ref>((std::istreambuf_iterator&lt;char&gt;(xmlFile)),<sp/>std::istreambuf_iterator&lt;char&gt;());</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>buffer.push_back(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><ref refid="classrapidxml_1_1xml__document" kindref="compound">rapidxml::xml_document&lt;&gt;</ref><sp/>doc;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>doc.<ref refid="classrapidxml_1_1xml__document_1ac6e73ff9ac323bf5a370c38feb03a6b1" kindref="member">parse</ref>&lt;<ref refid="namespacerapidxml_1a61912424b47db5038e726d4e1c22417f" kindref="member">rapidxml::parse_trim_whitespace</ref>&gt;(&amp;buffer[0]);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>rootNode=doc.<ref refid="classrapidxml_1_1xml__node_1a2dedeb4e04bb35e06a9a7bddf6ba652d" kindref="member">first_node</ref>();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rootNode-&gt;name()<sp/>!=<ref refid="glew_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref>(</highlight><highlight class="stringliteral">&quot;NCCAPointBake&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;this<sp/>is<sp/>not<sp/>a<sp/>pointbake<sp/>file<sp/>\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><ref refid="classrapidxml_1_1xml__node" kindref="compound">rapidxml::xml_node&lt;&gt;</ref><sp/>*<sp/>child=rootNode-&gt;<ref refid="classrapidxml_1_1xml__node_1a2dedeb4e04bb35e06a9a7bddf6ba652d" kindref="member">first_node</ref>(</highlight><highlight class="stringliteral">&quot;MeshName&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a70254a235da4d5da8580c21d591a3de0" kindref="member">m_meshName</ref>=child-&gt;<ref refid="classrapidxml_1_1xml__base_1adcdaccff61c665f039d9344e447b7445" kindref="member">value</ref>();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;found<sp/>mesh<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<ref refid="classngl_1_1_n_c_c_a_point_bake_1a70254a235da4d5da8580c21d591a3de0" kindref="member">m_meshName</ref>&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>child=rootNode-&gt;<ref refid="classrapidxml_1_1xml__node_1a2dedeb4e04bb35e06a9a7bddf6ba652d" kindref="member">first_node</ref>(</highlight><highlight class="stringliteral">&quot;NumVerts&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a541041445e9b59c67a07ac2ff2d06491" kindref="member">m_nVerts</ref>=boost::lexical_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(child-&gt;<ref refid="classrapidxml_1_1xml__base_1adcdaccff61c665f039d9344e447b7445" kindref="member">value</ref>());</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;NumVerts<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<ref refid="classngl_1_1_n_c_c_a_point_bake_1a541041445e9b59c67a07ac2ff2d06491" kindref="member">m_nVerts</ref>&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>child=rootNode-&gt;<ref refid="classrapidxml_1_1xml__node_1a2dedeb4e04bb35e06a9a7bddf6ba652d" kindref="member">first_node</ref>(</highlight><highlight class="stringliteral">&quot;StartFrame&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a38a4de48d3917390c539147f9c47e637" kindref="member">m_startFrame</ref>=boost::lexical_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(child-&gt;<ref refid="classrapidxml_1_1xml__base_1adcdaccff61c665f039d9344e447b7445" kindref="member">value</ref>());</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;StartFrame&quot;</highlight><highlight class="normal">&lt;&lt;<ref refid="classngl_1_1_n_c_c_a_point_bake_1a38a4de48d3917390c539147f9c47e637" kindref="member">m_startFrame</ref>&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>child=rootNode-&gt;<ref refid="classrapidxml_1_1xml__node_1a2dedeb4e04bb35e06a9a7bddf6ba652d" kindref="member">first_node</ref>(</highlight><highlight class="stringliteral">&quot;EndFrame&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a1f57c1484fb732c4999767c0b318e261" kindref="member">m_endFrame</ref>=boost::lexical_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(child-&gt;<ref refid="classrapidxml_1_1xml__base_1adcdaccff61c665f039d9344e447b7445" kindref="member">value</ref>());</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;EndFrame&quot;</highlight><highlight class="normal">&lt;&lt;<ref refid="classngl_1_1_n_c_c_a_point_bake_1a1f57c1484fb732c4999767c0b318e261" kindref="member">m_endFrame</ref>&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>child=rootNode-&gt;<ref refid="classrapidxml_1_1xml__node_1a2dedeb4e04bb35e06a9a7bddf6ba652d" kindref="member">first_node</ref>(</highlight><highlight class="stringliteral">&quot;NumFrames&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a022615dc202587a3b5eb7d9c9aef1fc3" kindref="member">m_numFrames</ref>=boost::lexical_cast&lt;<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(child-&gt;<ref refid="classrapidxml_1_1xml__base_1adcdaccff61c665f039d9344e447b7445" kindref="member">value</ref>());</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;EndFrame<sp/><sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<ref refid="classngl_1_1_n_c_c_a_point_bake_1a022615dc202587a3b5eb7d9c9aef1fc3" kindref="member">m_numFrames</ref>&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//first<sp/>allocate<sp/>base<sp/>pointer<sp/>[vertex]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1aa3d12aa4f757ef8c69a020844e289b26" kindref="member">m_data</ref>.resize(m_numFrames);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;&quot;Size<sp/>is<sp/>now&quot;&lt;&lt;m_data.size()&lt;&lt;endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//now<sp/>for<sp/>each<sp/>of<sp/>these<sp/>we<sp/>need<sp/>to<sp/>allocate<sp/>more<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE<sp/>the<sp/>use<sp/>of<sp/>a<sp/>reference<sp/>here<sp/>as<sp/>we<sp/>are<sp/>changing<sp/>the<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="glew_8h_1a42c2b1d86fa71a425e73a882cb0a72c8" kindref="member">data</ref><sp/>:<sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1aa3d12aa4f757ef8c69a020844e289b26" kindref="member">m_data</ref>)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glew_8h_1a42c2b1d86fa71a425e73a882cb0a72c8" kindref="member">data</ref>.resize(m_nVerts);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CurrentFrame=0;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>the<sp/>line<sp/>we<sp/>wish<sp/>to<sp/>parse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><ref refid="glew_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/>lineBuffer;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>say<sp/>which<sp/>separators<sp/>should<sp/>be<sp/>used<sp/>in<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>case<sp/>Spaces,<sp/>Tabs<sp/>and<sp/>return<sp/>\<sp/>new<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>boost::char_separator&lt;char&gt;<sp/>sep(</highlight><highlight class="stringliteral">&quot;<sp/>\t\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>traverse<sp/>each<sp/>frame<sp/>and<sp/>grab<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(child=rootNode-&gt;<ref refid="classrapidxml_1_1xml__node_1a2dedeb4e04bb35e06a9a7bddf6ba652d" kindref="member">first_node</ref>(</highlight><highlight class="stringliteral">&quot;Frame&quot;</highlight><highlight class="normal">);<sp/>child;<sp/>child=child-&gt;<ref refid="classrapidxml_1_1xml__node_1ac59af4dd5f0ec715753e42467dff6aed" kindref="member">next_sibling</ref>())</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;doing<sp/>frame<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;child-&gt;<ref refid="classrapidxml_1_1xml__node_1ae426802be58114ffc41bf30ac6b8c37d" kindref="member">first_attribute</ref>(</highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">)-&gt;value()&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>CurrentFrame=boost::lexical_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(child-&gt;<ref refid="classrapidxml_1_1xml__node_1ae426802be58114ffc41bf30ac6b8c37d" kindref="member">first_attribute</ref>(</highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">)-&gt;value());</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>CurrentFrame-=<ref refid="classngl_1_1_n_c_c_a_point_bake_1a38a4de48d3917390c539147f9c47e637" kindref="member">m_startFrame</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>std::flush(std::cerr);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="classrapidxml_1_1xml__node" kindref="compound">rapidxml::xml_node&lt;&gt;</ref><sp/>*<sp/>vertex=child-&gt;<ref refid="classrapidxml_1_1xml__node_1a2dedeb4e04bb35e06a9a7bddf6ba652d" kindref="member">first_node</ref>(</highlight><highlight class="stringliteral">&quot;Vertex&quot;</highlight><highlight class="normal">);<sp/>vertex;<sp/>vertex=vertex-&gt;next_sibling())</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a57f14e05b1900f16a2da82ade47d0c6d" kindref="member">index</ref>=boost::lexical_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(vertex-&gt;first_attribute(</highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">)-&gt;value());</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lineBuffer=vertex-&gt;value();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tokenizer<sp/>tokens(lineBuffer,<sp/>sep);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tokenizer::iterator<sp/><sp/>firstWord<sp/>=<sp/>tokens.begin();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacengl_1a5875636a29b76a7bd09b3b52994455a2" kindref="member">Real</ref><sp/><ref refid="glew_8h_1ad77deca22f617d3f0e0eb786445689fc" kindref="member">x</ref>=boost::lexical_cast&lt;<ref refid="namespacengl_1a5875636a29b76a7bd09b3b52994455a2" kindref="member">Real</ref>&gt;(*firstWord++);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacengl_1a5875636a29b76a7bd09b3b52994455a2" kindref="member">Real</ref><sp/><ref refid="glew_8h_1a9298c7ad619074f5285b32c6b72bfdea" kindref="member">y</ref>=boost::lexical_cast&lt;<ref refid="namespacengl_1a5875636a29b76a7bd09b3b52994455a2" kindref="member">Real</ref>&gt;(*firstWord++);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacengl_1a5875636a29b76a7bd09b3b52994455a2" kindref="member">Real</ref><sp/><ref refid="glew_8h_1a826e1ac898f4ef56cea62219f74607db" kindref="member">z</ref>=boost::lexical_cast&lt;<ref refid="namespacengl_1a5875636a29b76a7bd09b3b52994455a2" kindref="member">Real</ref>&gt;(*firstWord++);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_data[CurrentFrame][<ref refid="glew_8h_1a57f14e05b1900f16a2da82ade47d0c6d" kindref="member">index</ref>].set(x,y,z);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="classngl_1_1_n_c_c_a_point_bake_1acbbe27ef0b2472fd82e3f2066f3dc257" refkind="member"><highlight class="normal"><ref refid="classngl_1_1_n_c_c_a_point_bake_1acbbe27ef0b2472fd82e3f2066f3dc257" kindref="member">NCCAPointBake::~NCCAPointBake</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="classngl_1_1_n_c_c_a_point_bake_1af64df451894e5560c553ac4617b36e6c" refkind="member"><highlight class="normal"><ref refid="classngl_1_1_n_c_c_a_point_bake_1af36042732e8ba3066b9da578c4400ce0" kindref="member">NCCAPointBake::NCCAPointBake</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/>&amp;_fileName)<sp/>noexcept</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1ab78610a7787f4864f9e4d69281d63d84" kindref="member">loadPointBake</ref>(_fileName);</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="classngl_1_1_n_c_c_a_point_bake_1a61c01f5a863b220da5c553da7d8f409b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a61c01f5a863b220da5c553da7d8f409b" kindref="member">NCCAPointBake::setFrame</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_frame)<sp/>noexcept</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1ad5848a6fe3010ff09ff07c7316d4ba4f" kindref="member">m_currFrame</ref>=_frame;</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="classngl_1_1_n_c_c_a_point_bake_1a22153fa102ae71c8d82bf5dddc815e2c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a22153fa102ae71c8d82bf5dddc815e2c" kindref="member">NCCAPointBake::loadBinaryPointBake</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/>&amp;_fileName)<sp/>noexcept</highlight></codeline>
<codeline lineno="150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>open<sp/>a<sp/>file<sp/>stream<sp/>for<sp/>ip<sp/>in<sp/>binary<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>std::fstream<sp/>file;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>file.open(_fileName.c_str(),<ref refid="glew_8h_1a83ad0ee7f1e06b59c90271716e689080" kindref="member">std::ios::in</ref><sp/>|<sp/><ref refid="glew_8h_1a0ace813ee1f7020974174eb65d53ff0d" kindref="member">std::ios::binary</ref>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>it<sp/>worked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!file.is_open())</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;problems<sp/>Opening<sp/>File<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;_fileName&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>lets<sp/>read<sp/>in<sp/>the<sp/>header<sp/>and<sp/>see<sp/>if<sp/>the<sp/>file<sp/>is<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>header[11];</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>file.read(header,10*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>header[10]=0;<sp/></highlight><highlight class="comment">//<sp/>for<sp/>strcmp<sp/>we<sp/>need<sp/>\n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>basically<sp/>I<sp/>used<sp/>the<sp/>magick<sp/>string<sp/>ngl::bin<sp/>(I<sp/>presume<sp/>unique<sp/>in<sp/>files!)<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>test<sp/>against<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(header,</highlight><highlight class="stringliteral">&quot;ngl::binpb&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>best<sp/>close<sp/>the<sp/>file<sp/>and<sp/>exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>file.close();</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;this<sp/>is<sp/>not<sp/>an<sp/>ngl::binpb<sp/>file<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//file.read(reinterpret_cast<sp/>&lt;char<sp/>*&gt;<sp/>(&amp;m_nVerts),sizeof(unsigned<sp/>long<sp/>int));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>file.read(reinterpret_cast<sp/>&lt;char<sp/>*&gt;(&amp;<ref refid="classngl_1_1_n_c_c_a_point_bake_1a022615dc202587a3b5eb7d9c9aef1fc3" kindref="member">m_numFrames</ref>),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>file.read(reinterpret_cast<sp/>&lt;char<sp/>*&gt;(&amp;<ref refid="classngl_1_1_n_c_c_a_point_bake_1ad5848a6fe3010ff09ff07c7316d4ba4f" kindref="member">m_currFrame</ref>),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>file.read(reinterpret_cast<sp/>&lt;char<sp/>*&gt;(&amp;<ref refid="classngl_1_1_n_c_c_a_point_bake_1a541041445e9b59c67a07ac2ff2d06491" kindref="member">m_nVerts</ref>),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>file.read(reinterpret_cast<sp/>&lt;char<sp/>*&gt;(&amp;<ref refid="classngl_1_1_n_c_c_a_point_bake_1a38a4de48d3917390c539147f9c47e637" kindref="member">m_startFrame</ref>),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>file.read(reinterpret_cast<sp/>&lt;char<sp/>*&gt;(&amp;<ref refid="classngl_1_1_n_c_c_a_point_bake_1a19b13e762e4103dd543dcb2f7845b319" kindref="member">m_binFile</ref>),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;Loaded<sp/>header\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>std::cout&lt;&lt;<ref refid="classngl_1_1_n_c_c_a_point_bake_1a022615dc202587a3b5eb7d9c9aef1fc3" kindref="member">m_numFrames</ref>&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>std::cout&lt;&lt;<ref refid="classngl_1_1_n_c_c_a_point_bake_1ad5848a6fe3010ff09ff07c7316d4ba4f" kindref="member">m_currFrame</ref>&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>std::cout&lt;&lt;<ref refid="classngl_1_1_n_c_c_a_point_bake_1a541041445e9b59c67a07ac2ff2d06491" kindref="member">m_nVerts</ref>&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>std::cout&lt;&lt;<ref refid="classngl_1_1_n_c_c_a_point_bake_1a38a4de48d3917390c539147f9c47e637" kindref="member">m_startFrame</ref>&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>std::cout&lt;&lt;<ref refid="classngl_1_1_n_c_c_a_point_bake_1a19b13e762e4103dd543dcb2f7845b319" kindref="member">m_binFile</ref>&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1aa3d12aa4f757ef8c69a020844e289b26" kindref="member">m_data</ref>.resize(m_numFrames);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frame<sp/>=0;<sp/>frame&lt;<ref refid="classngl_1_1_n_c_c_a_point_bake_1a022615dc202587a3b5eb7d9c9aef1fc3" kindref="member">m_numFrames</ref>;<sp/>++frame)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1aa3d12aa4f757ef8c69a020844e289b26" kindref="member">m_data</ref>[frame].resize(m_nVerts);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref>=0;<sp/><ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref>&lt;<sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a541041445e9b59c67a07ac2ff2d06491" kindref="member">m_nVerts</ref>;<sp/>++<ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref>)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>file.read(<sp/>reinterpret_cast<sp/>&lt;char<sp/>*&gt;(&amp;<ref refid="classngl_1_1_n_c_c_a_point_bake_1aa3d12aa4f757ef8c69a020844e289b26" kindref="member">m_data</ref>[frame][<ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref>].m_x),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="namespacengl_1a5875636a29b76a7bd09b3b52994455a2" kindref="member">Real</ref>));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>file.read(<sp/>reinterpret_cast<sp/>&lt;char<sp/>*&gt;(&amp;<ref refid="classngl_1_1_n_c_c_a_point_bake_1aa3d12aa4f757ef8c69a020844e289b26" kindref="member">m_data</ref>[frame][<ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref>].m_y),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="namespacengl_1a5875636a29b76a7bd09b3b52994455a2" kindref="member">Real</ref>));</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>file.read(<sp/>reinterpret_cast<sp/>&lt;char<sp/>*&gt;(&amp;<ref refid="classngl_1_1_n_c_c_a_point_bake_1aa3d12aa4f757ef8c69a020844e289b26" kindref="member">m_data</ref>[frame][<ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref>].m_z),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="namespacengl_1a5875636a29b76a7bd09b3b52994455a2" kindref="member">Real</ref>));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203" refid="classngl_1_1_n_c_c_a_point_bake_1a7b5b861ed85c4ee2ac2c6c052f861b3b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a7b5b861ed85c4ee2ac2c6c052f861b3b" kindref="member">NCCAPointBake::saveBinaryPointBake</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/>&amp;_fileName)<sp/>noexcept</highlight></codeline>
<codeline lineno="204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>basically<sp/>we<sp/>need<sp/>to<sp/>save<sp/>all<sp/>the<sp/>state<sp/>data<sp/>from<sp/>the<sp/>abstract<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>map<sp/>the<sp/>vbo<sp/>on<sp/>the<sp/>gpu<sp/>and<sp/>dump<sp/>that<sp/>in<sp/>one<sp/>go,<sp/>this<sp/>means<sp/>we<sp/>have<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>CreateVBO<sp/>first<sp/>the<sp/>Save</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fstream<sp/>file;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>file.open(_fileName.c_str(),std::ios::out<sp/>|<sp/><ref refid="glew_8h_1a0ace813ee1f7020974174eb65d53ff0d" kindref="member">std::ios::binary</ref>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!file.is_open())</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;problems<sp/>Opening<sp/>File<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;_fileName&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lets<sp/>write<sp/>out<sp/>our<sp/>own<sp/>Magic<sp/>Number<sp/>file<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/>header(</highlight><highlight class="stringliteral">&quot;ngl::binpb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>file.write(header.c_str(),</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(header.length()));</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a19b13e762e4103dd543dcb2f7845b319" kindref="member">m_binFile</ref>=</highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>file.write(reinterpret_cast<sp/>&lt;char<sp/>*&gt;(&amp;<ref refid="classngl_1_1_n_c_c_a_point_bake_1a022615dc202587a3b5eb7d9c9aef1fc3" kindref="member">m_numFrames</ref>),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>file.write(reinterpret_cast<sp/>&lt;char<sp/>*&gt;(&amp;<ref refid="classngl_1_1_n_c_c_a_point_bake_1ad5848a6fe3010ff09ff07c7316d4ba4f" kindref="member">m_currFrame</ref>),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>file.write(reinterpret_cast<sp/>&lt;char<sp/>*&gt;(&amp;<ref refid="classngl_1_1_n_c_c_a_point_bake_1a541041445e9b59c67a07ac2ff2d06491" kindref="member">m_nVerts</ref>),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>file.write(reinterpret_cast<sp/>&lt;char<sp/>*&gt;(&amp;<ref refid="classngl_1_1_n_c_c_a_point_bake_1a38a4de48d3917390c539147f9c47e637" kindref="member">m_startFrame</ref>),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>file.write(reinterpret_cast<sp/>&lt;char<sp/>*&gt;(&amp;<ref refid="classngl_1_1_n_c_c_a_point_bake_1a19b13e762e4103dd543dcb2f7845b319" kindref="member">m_binFile</ref>),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<ref refid="classngl_1_1_n_c_c_a_point_bake_1a022615dc202587a3b5eb7d9c9aef1fc3" kindref="member">m_numFrames</ref>&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<ref refid="classngl_1_1_n_c_c_a_point_bake_1ad5848a6fe3010ff09ff07c7316d4ba4f" kindref="member">m_currFrame</ref>&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<ref refid="classngl_1_1_n_c_c_a_point_bake_1a541041445e9b59c67a07ac2ff2d06491" kindref="member">m_nVerts</ref>&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<ref refid="classngl_1_1_n_c_c_a_point_bake_1a38a4de48d3917390c539147f9c47e637" kindref="member">m_startFrame</ref>&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<ref refid="classngl_1_1_n_c_c_a_point_bake_1a19b13e762e4103dd543dcb2f7845b319" kindref="member">m_binFile</ref>&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>write<sp/>out<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frame<sp/>=0;<sp/>frame&lt;<ref refid="classngl_1_1_n_c_c_a_point_bake_1a022615dc202587a3b5eb7d9c9aef1fc3" kindref="member">m_numFrames</ref>;<sp/>++frame)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref>=0;<sp/><ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref>&lt;<sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a541041445e9b59c67a07ac2ff2d06491" kindref="member">m_nVerts</ref>;<sp/>++<ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref>)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file.write(<sp/>reinterpret_cast<sp/>&lt;char<sp/>*&gt;(&amp;<ref refid="classngl_1_1_n_c_c_a_point_bake_1aa3d12aa4f757ef8c69a020844e289b26" kindref="member">m_data</ref>[frame][<ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref>].m_x),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="namespacengl_1a5875636a29b76a7bd09b3b52994455a2" kindref="member">Real</ref>));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file.write(<sp/>reinterpret_cast<sp/>&lt;char<sp/>*&gt;(&amp;<ref refid="classngl_1_1_n_c_c_a_point_bake_1aa3d12aa4f757ef8c69a020844e289b26" kindref="member">m_data</ref>[frame][<ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref>].m_y),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="namespacengl_1a5875636a29b76a7bd09b3b52994455a2" kindref="member">Real</ref>));</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file.write(<sp/>reinterpret_cast<sp/>&lt;char<sp/>*&gt;(&amp;<ref refid="classngl_1_1_n_c_c_a_point_bake_1aa3d12aa4f757ef8c69a020844e289b26" kindref="member">m_data</ref>[frame][<ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref>].m_z),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="namespacengl_1a5875636a29b76a7bd09b3b52994455a2" kindref="member">Real</ref>));</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>file.close();</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246" refid="classngl_1_1_n_c_c_a_point_bake_1ab3fb20f6af7c77b7daf6bc652becdbaa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1ab3fb20f6af7c77b7daf6bc652becdbaa" kindref="member">NCCAPointBake::setMeshToFrame</ref>(<sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_frame)<sp/>noexcept</highlight></codeline>
<codeline lineno="247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>map<sp/>the<sp/>m_obj&apos;s<sp/>vbo<sp/>dat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacengl_1a5875636a29b76a7bd09b3b52994455a2" kindref="member">Real</ref><sp/>*ptr=<ref refid="classngl_1_1_n_c_c_a_point_bake_1a4b8ef23d5d2262dd222bfd36f7a3dbd6" kindref="member">m_mesh</ref>-&gt;<ref refid="classngl_1_1_abstract_mesh_1a778aab7afc0c3015b0d5133dfbf33b94" kindref="member">mapVAOVerts</ref>();</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;Face&gt;<sp/>faces=<ref refid="classngl_1_1_n_c_c_a_point_bake_1a4b8ef23d5d2262dd222bfd36f7a3dbd6" kindref="member">m_mesh</ref>-&gt;<ref refid="classngl_1_1_abstract_mesh_1ad56784799ae979b3151f29158ce8de36" kindref="member">getFaceList</ref>();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unsigned<sp/>int<sp/>nFaces=faces.size();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>for<sp/>each<sp/>of<sp/>the<sp/>faces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>step=0;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a676ca580c460c0154eb58200433d2a9e" kindref="member">face</ref><sp/>:<sp/>faces)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>for<sp/>each<sp/>triangle<sp/>in<sp/>the<sp/>face<sp/>(remember<sp/>we<sp/>ensured<sp/>tri<sp/>when<sp/>loading)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>for<sp/>all<sp/>the<sp/>verts<sp/>and<sp/>set<sp/>the<sp/>new<sp/>vert<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>data<sp/>is<sp/>packed<sp/>uv,<sp/>nx,ny,nz<sp/>then<sp/>x,y,z</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>we<sp/>only<sp/>want<sp/>to<sp/>change<sp/>x,y,z,<sp/>we<sp/>need<sp/>to<sp/>skip<sp/>over</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;j&lt;3;++j)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[step+5]=<ref refid="classngl_1_1_n_c_c_a_point_bake_1aa3d12aa4f757ef8c69a020844e289b26" kindref="member">m_data</ref>[_frame][<ref refid="glew_8h_1a676ca580c460c0154eb58200433d2a9e" kindref="member">face</ref>.m_vert[j]].m_x;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[step+6]=<ref refid="classngl_1_1_n_c_c_a_point_bake_1aa3d12aa4f757ef8c69a020844e289b26" kindref="member">m_data</ref>[_frame][<ref refid="glew_8h_1a676ca580c460c0154eb58200433d2a9e" kindref="member">face</ref>.m_vert[j]].m_y;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr[step+7]=<ref refid="classngl_1_1_n_c_c_a_point_bake_1aa3d12aa4f757ef8c69a020844e289b26" kindref="member">m_data</ref>[_frame][<ref refid="glew_8h_1a676ca580c460c0154eb58200433d2a9e" kindref="member">face</ref>.m_vert[j]].m_z;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step+=8;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unmap<sp/>the<sp/>vbo<sp/>as<sp/>we<sp/>have<sp/>finished<sp/>updating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a4b8ef23d5d2262dd222bfd36f7a3dbd6" kindref="member">m_mesh</ref>-&gt;<ref refid="classngl_1_1_abstract_mesh_1ad5a08610ff985730c8116b337d9d578a" kindref="member">unMapVAO</ref>();</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1ad5848a6fe3010ff09ff07c7316d4ba4f" kindref="member">m_currFrame</ref>=_frame;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="classngl_1_1_n_c_c_a_point_bake_1a717223e7692e9192b275e3e871ccb347" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a717223e7692e9192b275e3e871ccb347" kindref="member">NCCAPointBake::attachMesh</ref>(<ref refid="classngl_1_1_abstract_mesh" kindref="compound">AbstractMesh</ref><sp/>*_mesh)<sp/>noexcept</highlight></codeline>
<codeline lineno="282"><highlight class="normal">{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;doing<sp/>attach<sp/>mesh\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_mesh-&gt;m_nVerts<sp/>!=<sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a541041445e9b59c67a07ac2ff2d06491" kindref="member">m_nVerts</ref>)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>Mesh<sp/>can&apos;t<sp/>be<sp/>attached<sp/>to<sp/>this<sp/>data<sp/>as<sp/>vert<sp/>count<sp/>does<sp/>not<sp/>match\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;mesh<sp/>verts<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;_mesh-&gt;m_nVerts&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>file<sp/>verts<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<ref refid="classngl_1_1_n_c_c_a_point_bake_1a541041445e9b59c67a07ac2ff2d06491" kindref="member">m_nVerts</ref>&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1a4b8ef23d5d2262dd222bfd36f7a3dbd6" kindref="member">m_mesh</ref>=_mesh;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="classngl_1_1_n_c_c_a_point_bake_1adfae283859e7aec70e01b6363420efd9" refkind="member"><highlight class="normal">std::vector&lt;Vec3&gt;<sp/>&amp;<sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1adfae283859e7aec70e01b6363420efd9" kindref="member">NCCAPointBake::getRawDataPointerAtFrame</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_f)<sp/>noexcept</highlight></codeline>
<codeline lineno="302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><ref refid="_n_g_lassert_8h_1acef7dc418d5bcc430c79741ba952beb4" kindref="member">NGL_ASSERT</ref>(_f&lt;=<ref refid="classngl_1_1_n_c_c_a_point_bake_1a022615dc202587a3b5eb7d9c9aef1fc3" kindref="member">m_numFrames</ref>);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classngl_1_1_n_c_c_a_point_bake_1aa3d12aa4f757ef8c69a020844e289b26" kindref="member">m_data</ref>[_f];</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>ngl<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/jmacey/NGL/src/NCCAPointBake.cpp"/>
  </compounddef>
</doxygen>
