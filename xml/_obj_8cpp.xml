<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_obj_8cpp" kind="file" language="C++">
    <compoundname>Obj.cpp</compoundname>
    <includes local="yes">boost/bind.hpp</includes>
    <includes local="yes">boost/spirit.hpp</includes>
    <includes refid="_obj_8h" local="yes">Obj.h</includes>
    <incdepgraph>
      <node id="5240">
        <label>Types.h</label>
        <link refid="_types_8h"/>
        <childnode refid="5241" relation="include">
        </childnode>
        <childnode refid="5247" relation="include">
        </childnode>
        <childnode refid="5248" relation="include">
        </childnode>
        <childnode refid="5249" relation="include">
        </childnode>
      </node>
      <node id="5239">
        <label>Obj.h</label>
        <link refid="_obj_8h"/>
        <childnode refid="5240" relation="include">
        </childnode>
        <childnode refid="5250" relation="include">
        </childnode>
        <childnode refid="5251" relation="include">
        </childnode>
        <childnode refid="5256" relation="include">
        </childnode>
        <childnode refid="5257" relation="include">
        </childnode>
        <childnode refid="5253" relation="include">
        </childnode>
        <childnode refid="5254" relation="include">
        </childnode>
        <childnode refid="5258" relation="include">
        </childnode>
        <childnode refid="5262" relation="include">
        </childnode>
        <childnode refid="5263" relation="include">
        </childnode>
        <childnode refid="5265" relation="include">
        </childnode>
        <childnode refid="5268" relation="include">
        </childnode>
      </node>
      <node id="5252">
        <label>Image.h</label>
        <link refid="_image_8h"/>
        <childnode refid="5253" relation="include">
        </childnode>
        <childnode refid="5254" relation="include">
        </childnode>
        <childnode refid="5240" relation="include">
        </childnode>
        <childnode refid="5255" relation="include">
        </childnode>
      </node>
      <node id="5267">
        <label>cstdint</label>
      </node>
      <node id="5249">
        <label>QGLContext</label>
      </node>
      <node id="5261">
        <label>Vec3.h</label>
        <link refid="_vec3_8h"/>
        <childnode refid="5240" relation="include">
        </childnode>
        <childnode refid="5260" relation="include">
        </childnode>
      </node>
      <node id="5268">
        <label>cmath</label>
      </node>
      <node id="5243">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
        <childnode refid="5244" relation="include">
        </childnode>
        <childnode refid="5245" relation="include">
        </childnode>
      </node>
      <node id="5253">
        <label>string</label>
      </node>
      <node id="5242">
        <label>stddef.h</label>
      </node>
      <node id="5257">
        <label>fstream</label>
      </node>
      <node id="5241">
        <label>glew.h</label>
        <link refid="glew_8h"/>
        <childnode refid="5242" relation="include">
        </childnode>
        <childnode refid="5243" relation="include">
        </childnode>
        <childnode refid="5246" relation="include">
        </childnode>
      </node>
      <node id="5246">
        <label>GL/glu.h</label>
      </node>
      <node id="5236">
        <label>Obj.cpp</label>
        <link refid="Obj.cpp"/>
        <childnode refid="5237" relation="include">
        </childnode>
        <childnode refid="5238" relation="include">
        </childnode>
        <childnode refid="5239" relation="include">
        </childnode>
      </node>
      <node id="5244">
        <label>limits.h</label>
      </node>
      <node id="5258">
        <label>Vec4.h</label>
        <link refid="_vec4_8h"/>
        <childnode refid="5240" relation="include">
        </childnode>
        <childnode refid="5259" relation="include">
        </childnode>
        <childnode refid="5261" relation="include">
        </childnode>
        <childnode refid="5260" relation="include">
        </childnode>
      </node>
      <node id="5264">
        <label>AbstractVAO.h</label>
        <link refid="_abstract_v_a_o_8h"/>
        <childnode refid="5240" relation="include">
        </childnode>
      </node>
      <node id="5245">
        <label>wchar.h</label>
      </node>
      <node id="5255">
        <label>Colour.h</label>
        <link refid="_colour_8h"/>
        <childnode refid="5240" relation="include">
        </childnode>
      </node>
      <node id="5251">
        <label>Texture.h</label>
        <link refid="_texture_8h"/>
        <childnode refid="5252" relation="include">
        </childnode>
        <childnode refid="5240" relation="include">
        </childnode>
        <childnode refid="5253" relation="include">
        </childnode>
      </node>
      <node id="5250">
        <label>vector</label>
      </node>
      <node id="5260">
        <label>array</label>
      </node>
      <node id="5265">
        <label>RibExport.h</label>
        <link refid="_rib_export_8h"/>
        <childnode refid="5240" relation="include">
        </childnode>
        <childnode refid="5257" relation="include">
        </childnode>
        <childnode refid="5253" relation="include">
        </childnode>
      </node>
      <node id="5248">
        <label>QtOpenGL/QGLContext</label>
      </node>
      <node id="5266">
        <label>NGLassert.h</label>
        <link refid="_n_g_lassert_8h"/>
      </node>
      <node id="5256">
        <label>iostream</label>
      </node>
      <node id="5237">
        <label>boost/bind.hpp</label>
      </node>
      <node id="5238">
        <label>boost/spirit.hpp</label>
      </node>
      <node id="5247">
        <label>GL/gl.h</label>
      </node>
      <node id="5259">
        <label>Vec2.h</label>
        <link refid="_vec2_8h"/>
        <childnode refid="5240" relation="include">
        </childnode>
        <childnode refid="5260" relation="include">
        </childnode>
      </node>
      <node id="5254">
        <label>memory</label>
      </node>
      <node id="5263">
        <label>BBox.h</label>
        <link refid="_b_box_8h"/>
        <childnode refid="5240" relation="include">
        </childnode>
        <childnode refid="5261" relation="include">
        </childnode>
        <childnode refid="5258" relation="include">
        </childnode>
        <childnode refid="5264" relation="include">
        </childnode>
        <childnode refid="5254" relation="include">
        </childnode>
      </node>
      <node id="5262">
        <label>AbstractMesh.h</label>
        <link refid="_abstract_mesh_8h"/>
        <childnode refid="5240" relation="include">
        </childnode>
        <childnode refid="5263" relation="include">
        </childnode>
        <childnode refid="5265" relation="include">
        </childnode>
        <childnode refid="5251" relation="include">
        </childnode>
        <childnode refid="5266" relation="include">
        </childnode>
        <childnode refid="5258" relation="include">
        </childnode>
        <childnode refid="5264" relation="include">
        </childnode>
        <childnode refid="5250" relation="include">
        </childnode>
        <childnode refid="5253" relation="include">
        </childnode>
        <childnode refid="5267" relation="include">
        </childnode>
        <childnode refid="5254" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacengl">ngl</innernamespace>
    <briefdescription>
<para>implementation files for Obj class </para>    </briefdescription>
    <detaileddescription>
<para><xrefsect id="todo_1_todo000006"><xreftitle>Todo</xreftitle><xrefdescription><para>re-write this at some stage to use boost::spirit::qi </para></xrefdescription></xrefsect></para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>Copyright<sp/>(C)<sp/>2009<sp/>Jon<sp/>Macey</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="16"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;boost/bind.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;boost/spirit.hpp&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_obj_8h" kindref="compound">Obj.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacengl" kindref="compound">ngl</ref></highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>make<sp/>a<sp/>namespace<sp/>for<sp/>our<sp/>parser<sp/>to<sp/>save<sp/>writing<sp/>boost::spirit::<sp/>all<sp/>the<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">spt=boost::spirit;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>syntactic<sp/>sugar<sp/>for<sp/>specifying<sp/>our<sp/>grammar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="namespacengl_1aa8ae18c641e8a606f5245f380c345d35" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>spt::rule&lt;spt::phrase_scanner_t&gt;<sp/><ref refid="namespacengl_1aa8ae18c641e8a606f5245f380c345d35" kindref="member">srule</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parse<sp/>a<sp/>vertex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="classngl_1_1_obj_1a138b929c328a5755ca8f816eebf4c585" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classngl_1_1_obj_1a138b929c328a5755ca8f816eebf4c585" kindref="member">Obj::parseVertex</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_begin<sp/>)<sp/><sp/>noexcept</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>std::vector&lt;Real&gt;<sp/><ref refid="glew_8h_1a0aa8cf39c79d294b1d9f4daef5020bec" kindref="member">values</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>is<sp/>the<sp/>parse<sp/>rule<sp/>to<sp/>load<sp/>the<sp/>data<sp/>into<sp/>a<sp/>vector<sp/>(above)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>srule<sp/>vertex<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal"><sp/>&gt;&gt;<sp/>spt::real_p[spt::append(values)]<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spt::real_p[spt::append(values)]<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spt::real_p[spt::append(values)];</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>parse<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>spt::parse_info&lt;&gt;<sp/><ref refid="glew_8h_1a5fb5836a37f7607602a16ad733ed6357" kindref="member">result</ref><sp/>=<sp/>spt::parse(_begin,<sp/>vertex,<sp/>spt::space_p);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>check<sp/>this<sp/>at<sp/>some<sp/>stage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><ref refid="_types_8h_1a9362db426901a67b0ce07e7bbb52ac14" kindref="member">NGL_UNUSED</ref>(result);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>add<sp/>it<sp/>to<sp/>our<sp/>vert<sp/>list<sp/>in<sp/>abstact<sp/>mesh<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>m_verts.push_back(<ref refid="classngl_1_1_vec3" kindref="compound">Vec3</ref>(values[0],values[1],values[2]));</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parse<sp/>a<sp/>texture<sp/>coordinate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="classngl_1_1_obj_1af62594c0448128601f595074fa27d8de" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classngl_1_1_obj_1af62594c0448128601f595074fa27d8de" kindref="member">Obj::parseTextureCoordinate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>_begin<sp/>)<sp/>noexcept</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>std::vector&lt;Real&gt;<sp/><ref refid="glew_8h_1a0aa8cf39c79d294b1d9f4daef5020bec" kindref="member">values</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>our<sp/>parse<sp/>rule<sp/>for<sp/>a<sp/>tex<sp/>cord,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>can<sp/>be<sp/>either<sp/>a<sp/>2<sp/>or<sp/>3<sp/>d<sp/>text<sp/>so<sp/>the<sp/>*rule<sp/>looks<sp/>for<sp/>an<sp/>additional<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>srule<sp/>texcord<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;vt&quot;</highlight><highlight class="normal"><sp/>&gt;&gt;<sp/>spt::real_p[spt::append(values)]<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spt::real_p[spt::append(values)]<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(spt::real_p[spt::append(values)]);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>spt::parse_info&lt;&gt;<sp/><ref refid="glew_8h_1a5fb5836a37f7607602a16ad733ed6357" kindref="member">result</ref><sp/>=<sp/>spt::parse(_begin,<sp/>texcord,<sp/>spt::space_p);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>check<sp/>the<sp/>return<sp/>values<sp/>at<sp/>some<sp/>stage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><ref refid="_types_8h_1a9362db426901a67b0ce07e7bbb52ac14" kindref="member">NGL_UNUSED</ref>(result);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>tex<sp/>cord</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>have<sp/>a<sp/>value<sp/>use<sp/>it<sp/>other<sp/>wise<sp/>set<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><ref refid="namespacengl_1a5875636a29b76a7bd09b3b52994455a2" kindref="member">Real</ref><sp/>vt3<sp/>=<sp/>values.size()<sp/>==<sp/>3<sp/>?<sp/>values[2]<sp/>:<sp/>0.0f;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>m_tex.push_back(<ref refid="classngl_1_1_vec3" kindref="compound">Vec3</ref>(values[0],values[1],vt3));</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parse<sp/>a<sp/>normal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="classngl_1_1_obj_1a024e327ae24613032b3c0873adb6cf91" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classngl_1_1_obj_1a024e327ae24613032b3c0873adb6cf91" kindref="member">Obj::parseNormal</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_begin<sp/>)<sp/><sp/>noexcept</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>std::vector&lt;Real&gt;<sp/><ref refid="glew_8h_1a0aa8cf39c79d294b1d9f4daef5020bec" kindref="member">values</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>is<sp/>our<sp/>rule<sp/>for<sp/>normals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>srule<sp/>norm<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;vn&quot;</highlight><highlight class="normal"><sp/>&gt;&gt;<sp/>spt::real_p[spt::append(values)]<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spt::real_p[spt::append(values)]<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spt::real_p[spt::append(values)];</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>and<sp/>push<sp/>back<sp/>to<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>spt::parse_info&lt;&gt;<sp/><ref refid="glew_8h_1a5fb5836a37f7607602a16ad733ed6357" kindref="member">result</ref><sp/>=<sp/>spt::parse(_begin,<sp/>norm,<sp/>spt::space_p);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>check<sp/>the<sp/>return<sp/>values<sp/>at<sp/>some<sp/>stage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><ref refid="_types_8h_1a9362db426901a67b0ce07e7bbb52ac14" kindref="member">NGL_UNUSED</ref>(result);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>m_norm.push_back(<ref refid="classngl_1_1_vec3" kindref="compound">Vec3</ref>(values[0],values[1],values[2]));</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parse<sp/>face</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="classngl_1_1_obj_1a02c9578871d7687522a93f27d729078c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classngl_1_1_obj_1a02c9578871d7687522a93f27d729078c" kindref="member">Obj::parseFace</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>_begin<sp/><sp/><sp/>)<sp/><sp/>noexcept</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ok<sp/>this<sp/>one<sp/>is<sp/>quite<sp/>complex<sp/>first<sp/>create<sp/>some<sp/>lists<sp/>for<sp/>our<sp/>face<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>list<sp/>to<sp/>hold<sp/>the<sp/>vertex<sp/>data<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>std::vector&lt;unsigned<sp/>int&gt;<sp/>vec;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>list<sp/>to<sp/>hold<sp/>the<sp/>tex<sp/>cord<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>std::vector&lt;unsigned<sp/>int&gt;<sp/>tvec;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>list<sp/>to<sp/>hold<sp/>the<sp/>normal<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>std::vector&lt;unsigned<sp/>int&gt;<sp/>nvec;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>parse<sp/>rule<sp/>for<sp/>a<sp/>face<sp/>entry<sp/>V/T/N</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>our<sp/>entry<sp/>can<sp/>be<sp/>always<sp/>a<sp/>vert,<sp/>followed<sp/>by<sp/>optional<sp/>t<sp/>and<sp/>norm<sp/>seperated<sp/>by<sp/>/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>it<sp/>is<sp/>possible<sp/>to<sp/>have<sp/>just<sp/>a<sp/>V<sp/>value<sp/>with<sp/>no<sp/>/<sp/>so<sp/>the<sp/>rule<sp/>should<sp/>do<sp/>all<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>srule<sp/>entry<sp/>=<sp/>spt::int_p[spt::append(vec)]<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&gt;&gt;<sp/>(spt::int_p[spt::append(tvec)]<sp/>|<sp/>spt::epsilon_p)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&gt;&gt;<sp/>(spt::int_p[spt::append(nvec)]<sp/>|<sp/>spt::epsilon_p)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>spt::epsilon_p</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>face<sp/>has<sp/>at<sp/>least<sp/>3<sp/>of<sp/>the<sp/>above<sp/>entries<sp/>plus<sp/>many<sp/>optional<sp/>ones</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>srule<sp/><ref refid="glew_8h_1a676ca580c460c0154eb58200433d2a9e" kindref="member">face</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal"><sp/><sp/>&gt;&gt;<sp/>entry<sp/>&gt;&gt;<sp/>entry<sp/>&gt;&gt;<sp/>entry<sp/>&gt;&gt;<sp/>*(entry);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>we&apos;ve<sp/>done<sp/>this<sp/>we<sp/>can<sp/>parse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/>spt::parse(_begin,<sp/>face,<sp/>spt::space_p);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVerts=</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(vec.size());</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>now<sp/>build<sp/>a<sp/>face<sp/>structure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><ref refid="classngl_1_1_face" kindref="compound">Face</ref><sp/><ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>verts<sp/>are<sp/>-1<sp/>the<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>f.<ref refid="classngl_1_1_face_1a1f631fd5e14f40f6918f04e5138516e1" kindref="member">m_numVerts</ref>=numVerts-1;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>f.<ref refid="classngl_1_1_face_1a4e732b36e1c00178cbc1b49d119d9ecf" kindref="member">m_textureCoord</ref>=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>f.<ref refid="classngl_1_1_face_1a545775cb6a0c8922a6f0b0f17ac937e7" kindref="member">m_normals</ref>=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>vertex<sp/>indices<sp/>into<sp/>our<sp/>face<sp/>data<sp/>structure<sp/>index<sp/>in<sp/>obj<sp/>start<sp/>from<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>we<sp/>need<sp/>to<sp/>do<sp/>-1<sp/>for<sp/>our<sp/>array<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/>vec)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>f.<ref refid="classngl_1_1_face_1a5f36fac982c23b1bac50d1b711415291" kindref="member">m_vert</ref>.push_back(i-1);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>merge<sp/>in<sp/>texture<sp/>coordinates<sp/>and<sp/>normals,<sp/>if<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>OBJ<sp/>format<sp/>requires<sp/>an<sp/>encoding<sp/>for<sp/>faces<sp/>which<sp/>uses<sp/>one<sp/>of<sp/>the<sp/>vertex/texture/normal<sp/>specifications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>consistently<sp/>across<sp/>the<sp/>entire<sp/>face.<sp/><sp/>eg.<sp/>we<sp/>can<sp/>have<sp/>all<sp/>v/vt/vn,<sp/>or<sp/>all<sp/>v//vn,<sp/>or<sp/>all<sp/>v,<sp/>but<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>v//vn<sp/>then<sp/>v/vt/vn<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!nvec.empty())</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nvec.size()<sp/>!=<sp/>vec.size())</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;Something<sp/>wrong<sp/>with<sp/>the<sp/>face<sp/>data<sp/>will<sp/>continue<sp/>but<sp/>may<sp/>not<sp/>be<sp/>correct\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>in<sp/>these<sp/>references<sp/>to<sp/>normal<sp/>vectors<sp/>to<sp/>the<sp/>mesh&apos;s<sp/>normal<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/>nvec)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f.<ref refid="classngl_1_1_face_1ac8eac320a04d818c87997b8dd0737e73" kindref="member">m_norm</ref>.push_back(i-1);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>f.<ref refid="classngl_1_1_face_1a545775cb6a0c8922a6f0b0f17ac937e7" kindref="member">m_normals</ref>=</highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>merge<sp/>in<sp/>texture<sp/>coordinates,<sp/>if<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!tvec.empty())</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tvec.size()<sp/>!=<sp/>vec.size())</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;Something<sp/>wrong<sp/>with<sp/>the<sp/>face<sp/>data<sp/>will<sp/>continue<sp/>but<sp/>may<sp/>not<sp/>be<sp/>correct\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>in<sp/>these<sp/>references<sp/>to<sp/>normal<sp/>vectors<sp/>to<sp/>the<sp/>mesh&apos;s<sp/>normal<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/>tvec)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f.<ref refid="classngl_1_1_face_1ab35ab22aa9d56f1420eee0ae718c75db" kindref="member">m_tex</ref>.push_back(i-1);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>f.<ref refid="classngl_1_1_face_1a4e732b36e1c00178cbc1b49d119d9ecf" kindref="member">m_textureCoord</ref>=</highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>finally<sp/>save<sp/>the<sp/>face<sp/>into<sp/>our<sp/>face<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>m_face.push_back(f);</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="classngl_1_1_obj_1af478e04439a0a83c4594cfa34df33efc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classngl_1_1_obj_1af478e04439a0a83c4594cfa34df33efc" kindref="member">Obj::load</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/>&amp;_fname,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_calcBB<sp/>)<sp/><sp/>noexcept</highlight></codeline>
<codeline lineno="178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>here<sp/>we<sp/>build<sp/>up<sp/>our<sp/>ebnf<sp/>rules<sp/>for<sp/>parsing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>first<sp/>we<sp/>have<sp/>a<sp/>comment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>srule<sp/>comment<sp/>=<sp/>spt::comment_p(</highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>below<sp/>for<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>obj<sp/>spec<sp/>and<sp/>other<sp/>good<sp/>format<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>http://local.wasp.uwa.edu.au/~pbourke/dataformats/obj/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>vertices<sp/>rule<sp/>v<sp/>is<sp/>a<sp/>parse<sp/>of<sp/>3<sp/>reals<sp/>and<sp/>we<sp/>run<sp/>the<sp/>parseVertex<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>srule<sp/>vertex=<sp/>(</highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal"><sp/><sp/>&gt;&gt;<sp/>spt::real_p<sp/>&gt;&gt;<sp/>spt::real_p<sp/>&gt;&gt;<sp/>spt::real_p)<sp/>[bind(&amp;<ref refid="classngl_1_1_obj_1a138b929c328a5755ca8f816eebf4c585" kindref="member">Obj::parseVertex</ref>,<ref refid="glew_8h_1affddbd68f2b2d56ed516793c17b80b48" kindref="member">boost::ref</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">),<sp/>_1)];</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>srule<sp/>tex=<sp/>(</highlight><highlight class="stringliteral">&quot;vt&quot;</highlight><highlight class="normal"><sp/>&gt;&gt;<sp/>spt::real_p<sp/>&gt;&gt;<sp/>spt::real_p)<sp/>[bind(&amp;<ref refid="classngl_1_1_obj_1af62594c0448128601f595074fa27d8de" kindref="member">Obj::parseTextureCoordinate</ref>,<sp/><ref refid="glew_8h_1affddbd68f2b2d56ed516793c17b80b48" kindref="member">boost::ref</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">),<sp/>_1)];</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>normal<sp/>rule<sp/>and<sp/>parsing<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>srule<sp/>norm=<sp/>(</highlight><highlight class="stringliteral">&quot;vn&quot;</highlight><highlight class="normal"><sp/>&gt;&gt;<sp/>spt::real_p<sp/>&gt;&gt;<sp/>spt::real_p<sp/>&gt;&gt;<sp/>spt::real_p)<sp/>[bind(&amp;<ref refid="classngl_1_1_obj_1a024e327ae24613032b3c0873adb6cf91" kindref="member">Obj::parseNormal</ref>,<ref refid="glew_8h_1affddbd68f2b2d56ed516793c17b80b48" kindref="member">boost::ref</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">),<sp/>_1)];</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>our<sp/>vertex<sp/>data<sp/>can<sp/>be<sp/>any<sp/>of<sp/>the<sp/>above<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>srule<sp/>vertex_type<sp/>=<sp/>vertex<sp/>|<sp/>tex<sp/>|<sp/>norm;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>rule<sp/>for<sp/>the<sp/>face<sp/>and<sp/>parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>srule<sp/><sp/><ref refid="glew_8h_1a676ca580c460c0154eb58200433d2a9e" kindref="member">face</ref><sp/>=<sp/>(spt::ch_p(</highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">)<sp/>&gt;&gt;<sp/>*(spt::anychar_p))[bind(&amp;<ref refid="classngl_1_1_obj_1a02c9578871d7687522a93f27d729078c" kindref="member">Obj::parseFace</ref>,<sp/><ref refid="glew_8h_1affddbd68f2b2d56ed516793c17b80b48" kindref="member">boost::ref</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">),<sp/>_1)];</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>open<sp/>the<sp/>file<sp/>to<sp/>parse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>std::ifstream<sp/><ref refid="glew_8h_1a83ad0ee7f1e06b59c90271716e689080" kindref="member">in</ref>(_fname.c_str());</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="glew_8h_1a83ad0ee7f1e06b59c90271716e689080" kindref="member">in</ref>.is_open()<sp/>!=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;FILE<sp/>NOT<sp/>FOUND<sp/>!!!!<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;_fname.c_str()&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><ref refid="glew_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/>str;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>grabbing<sp/>a<sp/>line<sp/>and<sp/>then<sp/>pass<sp/>it<sp/>to<sp/>our<sp/>parsing<sp/>framework</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(std::getline(<ref refid="glew_8h_1a83ad0ee7f1e06b59c90271716e689080" kindref="member">in</ref>,<sp/>str))</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>spt::parse(str.c_str(),<sp/>vertex_type<sp/><sp/>|<sp/>face<sp/>|<sp/>comment,<sp/>spt::space_p);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>we<sp/>are<sp/>done<sp/>close<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><ref refid="glew_8h_1a83ad0ee7f1e06b59c90271716e689080" kindref="member">in</ref>.close();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>grab<sp/>the<sp/>sizes<sp/>used<sp/>for<sp/>drawing<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>m_nVerts=</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_verts.size());</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>m_nNorm=</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_norm.size());</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>m_nTex=</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_tex.size());</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>m_nFaces=</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_face.size());</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>center<sp/>of<sp/>the<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_calcBB<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;calcDimensions();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="classngl_1_1_obj_1ab2467598bb010625fe35e0e51b2cc3d0" refkind="member"><highlight class="normal"><ref refid="classngl_1_1_obj_1ae735ae3de0c16e7eb072e48d37cae019" kindref="member">Obj::Obj</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref>&amp;<sp/>_fname<sp/><sp/>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_calcBB)<sp/><sp/>noexcept<sp/>:<ref refid="classngl_1_1_abstract_mesh" kindref="compound">AbstractMesh</ref>()</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>m_vbo=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ext=0;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>default<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>m_nVerts=m_nNorm=m_nTex=m_nFaces=0;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>the<sp/>default<sp/>extents<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>m_maxX=0.0f;<sp/>m_maxY=0.0f;<sp/>m_maxZ=0.0f;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>m_minX=0.0f;<sp/>m_minY=0.0f;<sp/>m_minZ=0.0f;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>m_nNorm=m_nTex=0;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>the<sp/>file<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>m_loaded=load(_fname,_calcBB);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>m_texture<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="classngl_1_1_obj_1aa36005d8772bc49544a48c4c20d950bd" refkind="member"><highlight class="normal"><ref refid="classngl_1_1_obj_1ae735ae3de0c16e7eb072e48d37cae019" kindref="member">Obj::Obj</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_fname,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_texName,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_calcBB<sp/><sp/><sp/>)<sp/><sp/>noexcept:<ref refid="classngl_1_1_abstract_mesh" kindref="compound">AbstractMesh</ref>()</highlight></codeline>
<codeline lineno="251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>m_vbo=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>m_vao=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>m_ext=0;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>default<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>m_nVerts=m_nNorm=m_nTex=m_nFaces=0;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//set<sp/>the<sp/>default<sp/>extents<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>m_maxX=0.0f;<sp/>m_maxY=0.0f;<sp/>m_maxZ=0.0f;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>m_minX=0.0f;<sp/>m_minY=0.0f;<sp/>m_minZ=0.0f;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>m_nNorm=m_nTex=0;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>the<sp/>file<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>m_loaded=load(_fname,_calcBB);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>texture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>loadTexture(_texName);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>m_texture<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="classngl_1_1_obj_1ae157daa57e6bb78c8c1695f6acd2a73d" refkind="member"><highlight class="normal"><ref refid="classngl_1_1_obj_1ae735ae3de0c16e7eb072e48d37cae019" kindref="member">Obj::Obj</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref>&amp;<sp/>_fname,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref>&amp;<sp/>_texName,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_calcBB<sp/><sp/><sp/>)<sp/><sp/>noexcept:<ref refid="classngl_1_1_abstract_mesh" kindref="compound">AbstractMesh</ref>()</highlight></codeline>
<codeline lineno="271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>m_vbo=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>m_vao=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ext=0;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>default<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>m_nVerts=m_nNorm=m_nTex=m_nFaces=0;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>the<sp/>default<sp/>extents<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>m_maxX=0.0f;<sp/>m_maxY=0.0f;<sp/>m_maxZ=0.0f;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>m_minX=0.0f;<sp/>m_minY=0.0f;<sp/>m_minZ=0.0f;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>m_nNorm=m_nTex=0;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>the<sp/>file<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>m_loaded=load(_fname,_calcBB);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>texture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>loadTexture(_texName);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>m_texture<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="classngl_1_1_obj_1a735ccfd38594369bfb2fb7f87894912a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classngl_1_1_obj_1a735ccfd38594369bfb2fb7f87894912a" kindref="member">Obj::save</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref>&amp;<sp/>_fname)</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept</highlight></codeline>
<codeline lineno="291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>the<sp/>stream<sp/>and<sp/>parse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>std::fstream<sp/>fileOut;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>fileOut.open(_fname.c_str(),std::ios::out);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fileOut.is_open())</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;File<sp/>:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;_fname&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>Not<sp/>founds<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>out<sp/>some<sp/>comments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>fileOut&lt;&lt;</highlight><highlight class="stringliteral">&quot;#<sp/>This<sp/>file<sp/>was<sp/>created<sp/>by<sp/>ngl<sp/>Obj<sp/>exporter<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;_fname.c_str()&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>was<sp/>c++<sp/>11<sp/><sp/>for(Vec3<sp/>v<sp/>:<sp/>m_norm)<sp/>for<sp/>all<sp/>of<sp/>these</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>out<sp/>the<sp/>verts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="classngl_1_1_vec3" kindref="compound">Vec3</ref><sp/><ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref><sp/>:<sp/>m_verts)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>fileOut&lt;&lt;</highlight><highlight class="stringliteral">&quot;v<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref>.m_x&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref>.m_y&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref>.m_z&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>out<sp/>the<sp/>tex<sp/>cords</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="classngl_1_1_vec3" kindref="compound">Vec3</ref><sp/><ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref><sp/>:<sp/>m_tex)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>fileOut&lt;&lt;</highlight><highlight class="stringliteral">&quot;vt<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref>.m_x&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref>.m_y&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>out<sp/>the<sp/>normals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="classngl_1_1_vec3" kindref="compound">Vec3</ref><sp/><ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref><sp/>:<sp/>m_norm)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>fileOut&lt;&lt;</highlight><highlight class="stringliteral">&quot;vn<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref>.m_x&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref>.m_y&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<ref refid="glew_8h_1a6509431814422c215a65946289dd98b8" kindref="member">v</ref>.m_z&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>finally<sp/>the<sp/>faces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="classngl_1_1_face" kindref="compound">Face</ref><sp/><ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref><sp/>:<sp/>m_face)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>fileOut&lt;&lt;</highlight><highlight class="stringliteral">&quot;f<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>now<sp/>have<sp/>V/T/N<sp/>for<sp/>each<sp/>to<sp/>write<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;=<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>.m_numVerts;<sp/>++i)</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>forget<sp/>that<sp/>obj<sp/>indices<sp/>start<sp/>from<sp/>1<sp/>not<sp/>0<sp/>(i<sp/>did<sp/>originally<sp/>!)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>fileOut&lt;&lt;<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>.m_vert[i]+1;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>fileOut&lt;&lt;</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>fileOut&lt;&lt;<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>.m_tex[i]+1;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>fileOut&lt;&lt;</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>fileOut&lt;&lt;<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>.m_norm[i]+1;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>fileOut&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>fileOut&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal">}<sp/></highlight><highlight class="comment">//end<sp/>ngl<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/jmacey/NGL/src/Obj.cpp"/>
  </compounddef>
</doxygen>
