<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="ostream_8h" kind="file" language="C++">
    <compoundname>ostream.h</compoundname>
    <includes refid="format_8h" local="yes">fmt/format.h</includes>
    <includes local="no">ostream</includes>
    <includedby refid="ostream_8cc" local="yes">ostream.cc</includedby>
    <includedby refid="printf_8h" local="yes">printf.h</includedby>
    <incdepgraph>
      <node id="5332">
        <label>limits</label>
      </node>
      <node id="5325">
        <label>ostream.h</label>
        <link refid="ostream.h"/>
        <childnode refid="5326" relation="include">
        </childnode>
        <childnode refid="5341" relation="include">
        </childnode>
      </node>
      <node id="5329">
        <label>cmath</label>
      </node>
      <node id="5327">
        <label>cassert</label>
      </node>
      <node id="5334">
        <label>stdexcept</label>
      </node>
      <node id="5338">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
        <childnode refid="5339" relation="include">
        </childnode>
        <childnode refid="5340" relation="include">
        </childnode>
      </node>
      <node id="5335">
        <label>string</label>
      </node>
      <node id="5341">
        <label>ostream</label>
      </node>
      <node id="5339">
        <label>limits.h</label>
      </node>
      <node id="5340">
        <label>wchar.h</label>
      </node>
      <node id="5330">
        <label>cstdio</label>
      </node>
      <node id="5336">
        <label>vector</label>
      </node>
      <node id="5337">
        <label>utility</label>
      </node>
      <node id="5326">
        <label>fmt/format.h</label>
        <link refid="format_8h"/>
        <childnode refid="5327" relation="include">
        </childnode>
        <childnode refid="5328" relation="include">
        </childnode>
        <childnode refid="5329" relation="include">
        </childnode>
        <childnode refid="5330" relation="include">
        </childnode>
        <childnode refid="5331" relation="include">
        </childnode>
        <childnode refid="5332" relation="include">
        </childnode>
        <childnode refid="5333" relation="include">
        </childnode>
        <childnode refid="5334" relation="include">
        </childnode>
        <childnode refid="5335" relation="include">
        </childnode>
        <childnode refid="5336" relation="include">
        </childnode>
        <childnode refid="5337" relation="include">
        </childnode>
        <childnode refid="5338" relation="include">
        </childnode>
      </node>
      <node id="5328">
        <label>clocale</label>
      </node>
      <node id="5331">
        <label>cstring</label>
      </node>
      <node id="5333">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5342">
        <label>ostream.h</label>
        <link refid="ostream.h"/>
        <childnode refid="5343" relation="include">
        </childnode>
        <childnode refid="5344" relation="include">
        </childnode>
      </node>
      <node id="5343">
        <label>ostream.cc</label>
        <link refid="ostream_8cc"/>
      </node>
      <node id="5344">
        <label>printf.h</label>
        <link refid="printf_8h"/>
        <childnode refid="5345" relation="include">
        </childnode>
      </node>
      <node id="5345">
        <label>format.cc</label>
        <link refid="format_8cc"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classfmt_1_1internal_1_1_format_buf" prot="public">fmt::internal::FormatBuf</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_dummy_stream" prot="public">fmt::internal::DummyStream</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_convert_to_int_impl_3_01_t_00_01true_01_4" prot="public">fmt::internal::ConvertToIntImpl&lt; T, true &gt;</innerclass>
    <innernamespace refid="namespacefmt">fmt</innernamespace>
    <innernamespace refid="namespacefmt_1_1internal">fmt::internal</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>Formatting<sp/>library<sp/>for<sp/>C++<sp/>-<sp/>std::ostream<sp/>support</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>Copyright<sp/>(c)<sp/>2012<sp/>-<sp/>2016,<sp/>Victor<sp/>Zverovich</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>For<sp/>the<sp/>license<sp/>information<sp/>refer<sp/>to<sp/>format.h.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_OSTREAM_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_OSTREAM_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="format_8h" kindref="compound">fmt/format.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefmt" kindref="compound">fmt</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceinternal" kindref="compound">internal</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="21" refid="classfmt_1_1internal_1_1_format_buf" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1internal_1_1_format_buf" kindref="compound">FormatBuf</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::basic_streambuf&lt;Char&gt;<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="23" refid="classfmt_1_1internal_1_1_format_buf_1a389bdb614aa79b88a8ea43345c3a57e4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::basic_streambuf&lt;Char&gt;::int_type<sp/><ref refid="classfmt_1_1internal_1_1_format_buf_1a389bdb614aa79b88a8ea43345c3a57e4" kindref="member">int_type</ref>;</highlight></codeline>
<codeline lineno="24" refid="classfmt_1_1internal_1_1_format_buf_1a5e6e9b79da2d8d8b136fe759d8b31085" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::basic_streambuf&lt;Char&gt;::traits_type<sp/><ref refid="classfmt_1_1internal_1_1_format_buf_1a5e6e9b79da2d8d8b136fe759d8b31085" kindref="member">traits_type</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="classfmt_1_1internal_1_1_format_buf_1ac7fafc20907da3643bc43634fc30638d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_buffer" kindref="compound">Buffer&lt;Char&gt;</ref><sp/>&amp;<ref refid="classfmt_1_1internal_1_1_format_buf_1ac7fafc20907da3643bc43634fc30638d" kindref="member">buffer_</ref>;</highlight></codeline>
<codeline lineno="27" refid="classfmt_1_1internal_1_1_format_buf_1a0ad6598d4eb214e895d96af608c380a8" refkind="member"><highlight class="normal"><sp/><sp/>Char<sp/>*<ref refid="classfmt_1_1internal_1_1_format_buf_1a0ad6598d4eb214e895d96af608c380a8" kindref="member">start_</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="30" refid="classfmt_1_1internal_1_1_format_buf_1adcbde95f2bfaffd93ec7f39ae5636bfb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_format_buf_1adcbde95f2bfaffd93ec7f39ae5636bfb" kindref="member">FormatBuf</ref>(<ref refid="classfmt_1_1_buffer" kindref="compound">Buffer&lt;Char&gt;</ref><sp/>&amp;<ref refid="glew_8h_1a6c0f527f003707dfaca177b40f406ed9" kindref="member">buffer</ref>)<sp/>:<sp/>buffer_(buffer),<sp/>start_(&amp;buffer[0])<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;setp(start_,<sp/>start_<sp/>+<sp/>buffer_.<ref refid="classfmt_1_1_buffer_1aaf54fe786de91157629f96380e0cb215" kindref="member">capacity</ref>());</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="classfmt_1_1internal_1_1_format_buf_1af5f472241b45d828a8d40cea7694c95c" refkind="member"><highlight class="normal"><sp/><sp/>int_type<sp/><ref refid="classfmt_1_1internal_1_1_format_buf_1af5f472241b45d828a8d40cea7694c95c" kindref="member">overflow</ref>(int_type<sp/>ch<sp/>=<sp/>traits_type::eof())<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!traits_type::eq_int_type(ch,<sp/>traits_type::eof()))<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_size<sp/>=<sp/><ref refid="classfmt_1_1internal_1_1_format_buf_1a37d9219b491e9f05f22334b60cf41c5f" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer_.<ref refid="classfmt_1_1_buffer_1a20f893164dc20e8ea8c77810d4ea8d59" kindref="member">resize</ref>(buf_size);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer_.<ref refid="classfmt_1_1_buffer_1a7f46a3ce8d86abe35904f6654bd4ea1e" kindref="member">reserve</ref>(buf_size<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start_<sp/>=<sp/>&amp;buffer_[0];</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start_[buf_size]<sp/>=<sp/>traits_type::to_char_type(ch);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;setp(start_+<sp/>buf_size<sp/>+<sp/>1,<sp/>start_<sp/>+<sp/>buf_size<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="classfmt_1_1internal_1_1_format_buf_1a37d9219b491e9f05f22334b60cf41c5f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_format_buf_1a37d9219b491e9f05f22334b60cf41c5f" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1a28bed1291226be35437bc3173c19c205" kindref="member">to_unsigned</ref>(this-&gt;pptr()<sp/>-<sp/>start_);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal">};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><ref refid="namespacefmt_1_1internal_1a39cdac57ccb1df4930903dec83078d5e" kindref="member">Yes</ref><sp/>&amp;<ref refid="namespacefmt_1_1internal_1aedce4aeaa89239024c67c7682cff3370" kindref="member">convert</ref>(std::ostream<sp/>&amp;);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="structfmt_1_1internal_1_1_dummy_stream" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_dummy_stream" kindref="compound">DummyStream</ref><sp/>:<sp/>std::ostream<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1internal_1_1_dummy_stream" kindref="compound">DummyStream</ref>();<sp/><sp/></highlight><highlight class="comment">//<sp/>Suppress<sp/>a<sp/>bogus<sp/>warning<sp/>in<sp/>MSVC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Hide<sp/>all<sp/>operator&lt;&lt;<sp/>overloads<sp/>from<sp/>std::ostream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator&lt;&lt;(Null&lt;&gt;);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><ref refid="namespacefmt_1_1internal_1abf626ed3fde5ec6d176528219f93fc84" kindref="member">No</ref><sp/>&amp;<ref refid="namespacefmt_1_1internal_1a2ab2dc3e996d40259b9fbb6f980c92fd" kindref="member">operator&lt;&lt;</ref>(std::ostream<sp/>&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="63" refid="structfmt_1_1internal_1_1_convert_to_int_impl_3_01_t_00_01true_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_convert_to_int_impl" kindref="compound">ConvertToIntImpl</ref>&lt;T,<sp/>true&gt;<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>to<sp/>int<sp/>only<sp/>if<sp/>T<sp/>doesn&apos;t<sp/>have<sp/>an<sp/>overloaded<sp/>operator&lt;&lt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="66" refid="structfmt_1_1internal_1_1_convert_to_int_impl_3_01_t_00_01true_01_4_1a1c6b9142f7dbe2c4470e65281a2ae231a7608e5d3bb0cf9c5deb6bcd4a9b0deef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref><sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="namespacefmt_1_1internal_1aedce4aeaa89239024c67c7682cff3370" kindref="member">convert</ref>(get&lt;DummyStream&gt;()<sp/>&lt;&lt;<sp/>get&lt;T&gt;()))<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="namespacefmt_1_1internal_1abf626ed3fde5ec6d176528219f93fc84" kindref="member">No</ref>)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="68"><highlight class="normal">};</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Write<sp/>the<sp/>content<sp/>of<sp/>w<sp/>to<sp/>os.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1a7c721969e9660580a237bd4130422ab6" kindref="member">write</ref>(std::ostream<sp/>&amp;os,<sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">Writer</ref><sp/>&amp;<ref refid="glew_8h_1a433584688554d9a05d22844c39473968" kindref="member">w</ref>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>a<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgFormatter,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="76" refid="namespacefmt_1a3e1efc349649f867c4cc16cab445d7c5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1ac8923cb1e602be0535f92ef716f4fb57" kindref="member">format_arg</ref>(<ref refid="classfmt_1_1_basic_formatter" kindref="compound">BasicFormatter&lt;Char, ArgFormatter&gt;</ref><sp/>&amp;<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*&amp;format_str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_memory_buffer" kindref="compound">internal::MemoryBuffer&lt;Char, internal::INLINE_BUFFER_SIZE&gt;</ref><sp/><ref refid="glew_8h_1a6c0f527f003707dfaca177b40f406ed9" kindref="member">buffer</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_format_buf" kindref="compound">internal::FormatBuf&lt;Char&gt;</ref><sp/>format_buf(buffer);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>std::basic_ostream&lt;Char&gt;<sp/>output(&amp;format_buf);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>output<sp/>&lt;&lt;<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_string_ref" kindref="compound">BasicStringRef&lt;Char&gt;</ref><sp/>str(&amp;buffer[0],<sp/>format_buf.<ref refid="classfmt_1_1internal_1_1_format_buf_1a37d9219b491e9f05f22334b60cf41c5f" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_make_arg" kindref="compound">internal::MakeArg&lt; BasicFormatter&lt;Char&gt;</ref><sp/>&gt;<sp/>MakeArg;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>format_str<sp/>=<sp/>f.<ref refid="classfmt_1_1_basic_formatter_1a63acecbbf9681005f3c7eb4d42a54bf7" kindref="member">format</ref>(format_str,<sp/>MakeArg(str));</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><ref refid="format_8h_1a9a4960b70582ed2620911a0b75dce0b5" kindref="member">FMT_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1adec465a02f79e1e023ec283fa6da9f13" kindref="member">print</ref>(std::ostream<sp/>&amp;os,<sp/><ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">CStringRef</ref><sp/>format_str,<sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>args);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><ref refid="format_8h_1a65215c7dfcc0e942cd0798860877e86b" kindref="member">FMT_VARIADIC</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>print,<sp/>std::ostream<sp/>&amp;,<sp/><ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">CStringRef</ref>)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>fmt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FMT_HEADER_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&quot;<ref refid="ostream_8cc" kindref="compound">ostream.cc</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>FMT_OSTREAM_H_</highlight></codeline>
    </programlisting>
    <location file="/Users/jmacey/NGL/include/ngl/fmt/ostream.h"/>
  </compounddef>
</doxygen>
