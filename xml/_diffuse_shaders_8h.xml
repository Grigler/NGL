<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_diffuse_shaders_8h" kind="file" language="C++">
    <compoundname>DiffuseShaders.h</compoundname>
    <includes local="no">string</includes>
    <includedby refid="_shader_lib_8cpp" local="yes">ShaderLib.cpp</includedby>
    <incdepgraph>
      <node id="4174">
        <label>string</label>
      </node>
      <node id="4173">
        <label>DiffuseShaders.h</label>
        <link refid="DiffuseShaders.h"/>
        <childnode refid="4174" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4176">
        <label>ShaderLib.cpp</label>
        <link refid="_shader_lib_8cpp"/>
      </node>
      <node id="4175">
        <label>DiffuseShaders.h</label>
        <link refid="DiffuseShaders.h"/>
        <childnode refid="4176" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_diffuse_shaders_8h_1aee26a94a59f39d3d34cde95aee8e2738" prot="public" static="no" mutable="no">
        <type>const <ref refid="glew_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref></type>
        <definition>const std::string diffuseVertexShader</definition>
        <argsstring></argsstring>
        <name>diffuseVertexShader</name>
        <initializer>=
R&quot;DELIM(
  #version 150
  out vec3 fragmentNormal;
  <ref refid="glew_8h_1a83ad0ee7f1e06b59c90271716e689080" kindref="member">in</ref> vec3 inVert;
  <ref refid="glew_8h_1a83ad0ee7f1e06b59c90271716e689080" kindref="member">in</ref> vec3 inNormal;
  uniform mat4 MVP;
  uniform mat3 normalMatrix;
  <ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref> main()
  {
  fragmentNormal = (normalMatrix*inNormal);
  gl_Position = MVP*vec4(inVert,1.0);
  }
)DELIM&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/src/shaders/DiffuseShaders.h" line="6" column="1" bodyfile="/Users/jmacey/NGL/src/shaders/DiffuseShaders.h" bodystart="6" bodyend="-1"/>
        <referencedby refid="classngl_1_1_shader_lib_1a005c7b95f7cc6bb38bb207443503e392" compoundref="_shader_lib_8cpp" startline="715" endline="740">ngl::ShaderLib::loadDiffuseShaders</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_diffuse_shaders_8h_1a107986c80c412fc53b63825fb2583d72" prot="public" static="no" mutable="no">
        <type>const <ref refid="glew_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref></type>
        <definition>const std::string diffuseFragmentShader</definition>
        <argsstring></argsstring>
        <name>diffuseFragmentShader</name>
        <initializer>=
R&quot;DELIM(
 #version 150
 <ref refid="glew_8h_1a83ad0ee7f1e06b59c90271716e689080" kindref="member">in</ref> vec3 fragmentNormal;
 out vec4 fragColour;
 uniform vec4 Colour;
 uniform vec3 lightPos;
 uniform vec4 lightDiffuse;
 <ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref> main ()
 {
 fragColour= vec4(0.);
 vec3 N = normalize(fragmentNormal);
 vec3 L = normalize(lightPos);
 fragColour += Colour*lightDiffuse *dot(L, N);
 }
)DELIM&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/src/shaders/DiffuseShaders.h" line="21" column="1" bodyfile="/Users/jmacey/NGL/src/shaders/DiffuseShaders.h" bodystart="21" bodyend="-1"/>
        <referencedby refid="classngl_1_1_shader_lib_1a005c7b95f7cc6bb38bb207443503e392" compoundref="_shader_lib_8cpp" startline="715" endline="740">ngl::ShaderLib::loadDiffuseShaders</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>DIFFUSESHADERS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DIFFUSESHADERS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>see<sp/>below<sp/>for<sp/>the<sp/>really<sp/>cool<sp/>c++<sp/>11<sp/>version<sp/>of<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="_diffuse_shaders_8h_1aee26a94a59f39d3d34cde95aee8e2738" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/><ref refid="_diffuse_shaders_8h_1aee26a94a59f39d3d34cde95aee8e2738" kindref="member">diffuseVertexShader</ref><sp/>=</highlight></codeline>
<codeline lineno="7"><highlight class="normal">R</highlight><highlight class="stringliteral">&quot;DELIM(</highlight></codeline>
<codeline lineno="8"><highlight class="stringliteral"><sp/><sp/>#version<sp/>150</highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral"><sp/><sp/>out<sp/>vec3<sp/>fragmentNormal;</highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral"><sp/><sp/>in<sp/>vec3<sp/>inVert;</highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral"><sp/><sp/>in<sp/>vec3<sp/>inNormal;</highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral"><sp/><sp/>uniform<sp/>mat4<sp/>MVP;</highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral"><sp/><sp/>uniform<sp/>mat3<sp/>normalMatrix;</highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral"><sp/><sp/>void<sp/>main()</highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral"><sp/><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral"><sp/><sp/>fragmentNormal<sp/>=<sp/>(normalMatrix*inNormal);</highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral"><sp/><sp/>gl_Position<sp/>=<sp/>MVP*vec4(inVert,1.0);</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral">)DELIM&quot;;</highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="21" refid="_diffuse_shaders_8h_1a107986c80c412fc53b63825fb2583d72" refkind="member"><highlight class="stringliteral"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/><ref refid="_diffuse_shaders_8h_1a107986c80c412fc53b63825fb2583d72" kindref="member">diffuseFragmentShader</ref><sp/>=</highlight></codeline>
<codeline lineno="22"><highlight class="normal">R</highlight><highlight class="stringliteral">&quot;DELIM(</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral"><sp/>#version<sp/>150</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"><sp/>in<sp/>vec3<sp/>fragmentNormal;</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral"><sp/>out<sp/>vec4<sp/>fragColour;</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral"><sp/>uniform<sp/>vec4<sp/>Colour;</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral"><sp/>uniform<sp/>vec3<sp/>lightPos;</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral"><sp/>uniform<sp/>vec4<sp/>lightDiffuse;</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral"><sp/>void<sp/>main<sp/>()</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral"><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"><sp/>fragColour=<sp/>vec4(0.);</highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"><sp/>vec3<sp/>N<sp/>=<sp/>normalize(fragmentNormal);</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral"><sp/>vec3<sp/>L<sp/>=<sp/>normalize(lightPos);</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"><sp/>fragColour<sp/>+=<sp/>Colour*lightDiffuse<sp/>*dot(L,<sp/>N);</highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral"><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral">)DELIM&quot;;</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/jmacey/NGL/src/shaders/DiffuseShaders.h"/>
  </compounddef>
</doxygen>
