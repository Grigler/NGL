<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="posix_8cc" kind="file" language="C++">
    <compoundname>posix.cc</compoundname>
    <includes refid="posix_8h" local="yes">fmt/posix.h</includes>
    <includes local="no">limits.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">sys/stat.h</includes>
    <includes local="no">unistd.h</includes>
    <incdepgraph>
      <node id="5501">
        <label>sys/stat.h</label>
      </node>
      <node id="5491">
        <label>limits</label>
      </node>
      <node id="5478">
        <label>fmt/posix.h</label>
        <link refid="posix_8h"/>
        <childnode refid="5479" relation="include">
        </childnode>
        <childnode refid="5480" relation="include">
        </childnode>
        <childnode refid="5481" relation="include">
        </childnode>
        <childnode refid="5482" relation="include">
        </childnode>
        <childnode refid="5483" relation="include">
        </childnode>
        <childnode refid="5484" relation="include">
        </childnode>
        <childnode refid="5485" relation="include">
        </childnode>
      </node>
      <node id="5483">
        <label>stdlib.h</label>
      </node>
      <node id="5488">
        <label>cmath</label>
      </node>
      <node id="5479">
        <label>errno.h</label>
      </node>
      <node id="5486">
        <label>cassert</label>
      </node>
      <node id="5493">
        <label>stdexcept</label>
      </node>
      <node id="5480">
        <label>fcntl.h</label>
      </node>
      <node id="5497">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
        <childnode refid="5498" relation="include">
        </childnode>
        <childnode refid="5499" relation="include">
        </childnode>
      </node>
      <node id="5494">
        <label>string</label>
      </node>
      <node id="5498">
        <label>limits.h</label>
      </node>
      <node id="5499">
        <label>wchar.h</label>
      </node>
      <node id="5500">
        <label>sys/types.h</label>
      </node>
      <node id="5489">
        <label>cstdio</label>
      </node>
      <node id="5502">
        <label>unistd.h</label>
      </node>
      <node id="5495">
        <label>vector</label>
      </node>
      <node id="5496">
        <label>utility</label>
      </node>
      <node id="5485">
        <label>fmt/format.h</label>
        <link refid="format_8h"/>
        <childnode refid="5486" relation="include">
        </childnode>
        <childnode refid="5487" relation="include">
        </childnode>
        <childnode refid="5488" relation="include">
        </childnode>
        <childnode refid="5489" relation="include">
        </childnode>
        <childnode refid="5490" relation="include">
        </childnode>
        <childnode refid="5491" relation="include">
        </childnode>
        <childnode refid="5492" relation="include">
        </childnode>
        <childnode refid="5493" relation="include">
        </childnode>
        <childnode refid="5494" relation="include">
        </childnode>
        <childnode refid="5495" relation="include">
        </childnode>
        <childnode refid="5496" relation="include">
        </childnode>
        <childnode refid="5497" relation="include">
        </childnode>
      </node>
      <node id="5487">
        <label>clocale</label>
      </node>
      <node id="5484">
        <label>cstddef</label>
      </node>
      <node id="5477">
        <label>posix.cc</label>
        <link refid="posix.cc"/>
        <childnode refid="5478" relation="include">
        </childnode>
        <childnode refid="5498" relation="include">
        </childnode>
        <childnode refid="5500" relation="include">
        </childnode>
        <childnode refid="5501" relation="include">
        </childnode>
        <childnode refid="5502" relation="include">
        </childnode>
      </node>
      <node id="5482">
        <label>stdio.h</label>
      </node>
      <node id="5490">
        <label>cstring</label>
      </node>
      <node id="5481">
        <label>locale.h</label>
      </node>
      <node id="5492">
        <label>memory</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="posix_8cc_1af08ec37a8c99d747fb60fa15bc28678b" prot="public" static="no">
        <name>_CRT_SECURE_NO_WARNINGS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/posix.cc" line="12" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/posix.cc" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="posix_8cc_1a144d062bf42ef80e2fb48e0ea0b9112e" prot="public" static="no">
        <name>FMT_ARGS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/posix.cc" line="88" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/posix.cc" bodystart="88" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>A<sp/>C++<sp/>interface<sp/>to<sp/>POSIX<sp/>functions.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>Copyright<sp/>(c)<sp/>2012<sp/>-<sp/>2016,<sp/>Victor<sp/>Zverovich</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>For<sp/>the<sp/>license<sp/>information<sp/>refer<sp/>to<sp/>format.h.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Disable<sp/>bogus<sp/>MSVC<sp/>warnings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_CRT_SECURE_NO_WARNINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="posix_8cc_1af08ec37a8c99d747fb60fa15bc28678b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>_CRT_SECURE_NO_WARNINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="posix_8h" kindref="compound">fmt/posix.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;io.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>O_CREAT<sp/>_O_CREAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>O_TRUNC<sp/>_O_TRUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifndef<sp/>S_IRUSR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>S_IRUSR<sp/>_S_IREAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifndef<sp/>S_IWUSR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>S_IWUSR<sp/>_S_IWRITE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>__MINGW32__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>_SH_DENYNO<sp/>0x40</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>fileno</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>undef<sp/>fileno</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>type<sp/>of<sp/>read<sp/>and<sp/>write<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RWResult;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>Windows<sp/>the<sp/>count<sp/>argument<sp/>to<sp/>read<sp/>and<sp/>write<sp/>is<sp/>unsigned,<sp/>so<sp/>convert</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>from<sp/>size_t<sp/>preventing<sp/>integer<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>convert_rwcount(std::size_t<sp/><ref refid="glew_8h_1a10b284d589000663becfbc6867a3a9f7" kindref="member">count</ref>)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a10b284d589000663becfbc6867a3a9f7" kindref="member">count &lt;= UINT_MAX ? static_cast&lt;unsigned&gt;</ref>(<ref refid="glew_8h_1a10b284d589000663becfbc6867a3a9f7" kindref="member">count</ref>)<sp/>:<sp/>UINT_MAX;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>type<sp/>of<sp/>read<sp/>and<sp/>write<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>ssize_t<sp/>RWResult;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t<sp/>convert_rwcount(std::size_t<sp/>count)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a10b284d589000663becfbc6867a3a9f7" kindref="member">count</ref>;<sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="classfmt_1_1_buffered_file_1a18cee20addbee759cc25b8b0dc1deb03" refkind="member"><highlight class="normal"><ref refid="classfmt_1_1_buffered_file_1a18cee20addbee759cc25b8b0dc1deb03" kindref="member">fmt::BufferedFile::~BufferedFile</ref>()<sp/><ref refid="format_8h_1aef128913e8400683b1cbd1a3a2e11df3" kindref="member">FMT_NOEXCEPT</ref><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classfmt_1_1_buffered_file_1a670164faa1fd6798f843b8391bbe7ae3" kindref="member">file_</ref><sp/>&amp;&amp;<sp/><ref refid="posix_8h_1acca658935a0993e7cf549b4a5be255a3" kindref="member">FMT_SYSTEM</ref>(fclose(<ref refid="classfmt_1_1_buffered_file_1a670164faa1fd6798f843b8391bbe7ae3" kindref="member">file_</ref>))<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1a6ca15e6d89910192be15bddd428c3a17" kindref="member">fmt::report_system_error</ref>(errno,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>close<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="classfmt_1_1_buffered_file_1a5a2e3a0aabc752eb52993ea2488c95a8" refkind="member"><highlight class="normal"><ref refid="classfmt_1_1_buffered_file_1a2a996ecfca1c6d53caa60089526bae03" kindref="member">fmt::BufferedFile::BufferedFile</ref>(</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">fmt::CStringRef</ref><sp/>filename,<sp/><ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">fmt::CStringRef</ref><sp/><ref refid="glew_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5" kindref="member">mode</ref>)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><ref refid="posix_8h_1a54f7e73fc1fc6ded8358c6339b51bde7" kindref="member">FMT_RETRY_VAL</ref>(<ref refid="classfmt_1_1_buffered_file_1a670164faa1fd6798f843b8391bbe7ae3" kindref="member">file_</ref>,<sp/><ref refid="posix_8h_1acca658935a0993e7cf549b4a5be255a3" kindref="member">FMT_SYSTEM</ref>(fopen(filename.<ref refid="classfmt_1_1_basic_c_string_ref_1ae3bafa845b53339b20c4f5edb4f635f9" kindref="member">c_str</ref>(),<sp/>mode.<ref refid="classfmt_1_1_basic_c_string_ref_1ae3bafa845b53339b20c4f5edb4f635f9" kindref="member">c_str</ref>())),<sp/>0);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classfmt_1_1_buffered_file_1a670164faa1fd6798f843b8391bbe7ae3" kindref="member">file_</ref>)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_system_error" kindref="compound">SystemError</ref>(errno,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>open<sp/>file<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>filename);</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="classfmt_1_1_buffered_file_1ad9b8340d0a6b638ef0ab83c7bed3d554" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_buffered_file_1ad9b8340d0a6b638ef0ab83c7bed3d554" kindref="member">fmt::BufferedFile::close</ref>()<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classfmt_1_1_buffered_file_1a670164faa1fd6798f843b8391bbe7ae3" kindref="member">file_</ref>)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a5fb5836a37f7607602a16ad733ed6357" kindref="member">result</ref><sp/>=<sp/><ref refid="posix_8h_1acca658935a0993e7cf549b4a5be255a3" kindref="member">FMT_SYSTEM</ref>(fclose(<ref refid="classfmt_1_1_buffered_file_1a670164faa1fd6798f843b8391bbe7ae3" kindref="member">file_</ref>));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_buffered_file_1a670164faa1fd6798f843b8391bbe7ae3" kindref="member">file_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_system_error" kindref="compound">SystemError</ref>(errno,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>close<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>macro<sp/>used<sp/>to<sp/>prevent<sp/>expansion<sp/>of<sp/>fileno<sp/>on<sp/>broken<sp/>versions<sp/>of<sp/>MinGW.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="posix_8cc_1a144d062bf42ef80e2fb48e0ea0b9112e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_ARGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="classfmt_1_1_buffered_file_1a12330a2aa3b372295020e3b2d973f8ae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_buffered_file_1a12330a2aa3b372295020e3b2d973f8ae" kindref="member">fmt::BufferedFile::fileno</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd<sp/>=<sp/><ref refid="posix_8h_1aa693a9f0c55e9b081f1ea5bf04968dd7" kindref="member">FMT_POSIX_CALL</ref>(<ref refid="classfmt_1_1_buffered_file_1a12330a2aa3b372295020e3b2d973f8ae" kindref="member">fileno</ref><sp/><ref refid="posix_8cc_1a144d062bf42ef80e2fb48e0ea0b9112e" kindref="member">FMT_ARGS</ref>(<ref refid="classfmt_1_1_buffered_file_1a670164faa1fd6798f843b8391bbe7ae3" kindref="member">file_</ref>));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_system_error" kindref="compound">SystemError</ref>(errno,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>get<sp/>file<sp/>descriptor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fd;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="classfmt_1_1_file_1afe222b8f1728f1d803302aacba34ab0a" refkind="member"><highlight class="normal"><ref refid="classfmt_1_1_file_1ac91e0eeb32b780593df95bd399ef1b10" kindref="member">fmt::File::File</ref>(<ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">fmt::CStringRef</ref><sp/><ref refid="glew_8h_1ab25d8cd967ccbd19b630d7100ff8f67e" kindref="member">path</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oflag)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5" kindref="member">mode</ref><sp/>=<sp/>S_IRUSR<sp/>|<sp/>S_IWUSR;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)<sp/>&amp;&amp;<sp/>!defined(__MINGW32__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>fd_<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><ref refid="posix_8h_1aa693a9f0c55e9b081f1ea5bf04968dd7" kindref="member">FMT_POSIX_CALL</ref>(sopen_s(&amp;fd_,<sp/>path.<ref refid="classfmt_1_1_basic_c_string_ref_1ae3bafa845b53339b20c4f5edb4f635f9" kindref="member">c_str</ref>(),<sp/>oflag,<sp/>_SH_DENYNO,<sp/><ref refid="glew_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5" kindref="member">mode</ref>));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><ref refid="posix_8h_1a9d6790ac79298b8abd2472500422e138" kindref="member">FMT_RETRY</ref>(fd_,<sp/><ref refid="posix_8h_1aa693a9f0c55e9b081f1ea5bf04968dd7" kindref="member">FMT_POSIX_CALL</ref>(open(path.<ref refid="classfmt_1_1_basic_c_string_ref_1ae3bafa845b53339b20c4f5edb4f635f9" kindref="member">c_str</ref>(),<sp/>oflag,<sp/><ref refid="glew_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5" kindref="member">mode</ref>)));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd_<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_system_error" kindref="compound">SystemError</ref>(errno,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>open<sp/>file<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>path);</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="classfmt_1_1_file_1a892fac8d89786dff4bc3693eb267e1c8" refkind="member"><highlight class="normal"><ref refid="classfmt_1_1_file_1a892fac8d89786dff4bc3693eb267e1c8" kindref="member">fmt::File::~File</ref>()<sp/><ref refid="format_8h_1aef128913e8400683b1cbd1a3a2e11df3" kindref="member">FMT_NOEXCEPT</ref><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>retry<sp/>close<sp/>in<sp/>case<sp/>of<sp/>EINTR!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>http://linux.derkeiler.com/Mailing-Lists/Kernel/2005-09/3000.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd_<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/><ref refid="posix_8h_1aa693a9f0c55e9b081f1ea5bf04968dd7" kindref="member">FMT_POSIX_CALL</ref>(<ref refid="classfmt_1_1_buffered_file_1ad9b8340d0a6b638ef0ab83c7bed3d554" kindref="member">close</ref>(fd_))<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1a6ca15e6d89910192be15bddd428c3a17" kindref="member">fmt::report_system_error</ref>(errno,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>close<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="classfmt_1_1_file_1a0f9f9adfcae772efe2cae9c60a2f23f4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_file_1a0f9f9adfcae772efe2cae9c60a2f23f4" kindref="member">fmt::File::close</ref>()<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd_<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>retry<sp/>close<sp/>in<sp/>case<sp/>of<sp/>EINTR!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>http://linux.derkeiler.com/Mailing-Lists/Kernel/2005-09/3000.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a5fb5836a37f7607602a16ad733ed6357" kindref="member">result</ref><sp/>=<sp/><ref refid="posix_8h_1aa693a9f0c55e9b081f1ea5bf04968dd7" kindref="member">FMT_POSIX_CALL</ref>(<ref refid="classfmt_1_1_buffered_file_1ad9b8340d0a6b638ef0ab83c7bed3d554" kindref="member">close</ref>(fd_));</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>fd_<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_system_error" kindref="compound">SystemError</ref>(errno,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>close<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="classfmt_1_1_file_1aea68742f4f814c97d497a8a04dfc571e" refkind="member"><highlight class="normal"><ref refid="namespacefmt_1aef84b50b68fdc25388fed2952c2db563" kindref="member">fmt::LongLong</ref><sp/><ref refid="classfmt_1_1_file_1aea68742f4f814c97d497a8a04dfc571e" kindref="member">fmt::File::size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>GetFileSize<sp/>instead<sp/>of<sp/>GetFileSizeEx<sp/>for<sp/>the<sp/>case<sp/>when<sp/>_WIN32_WINNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>less<sp/>than<sp/>0x0500<sp/>as<sp/>is<sp/>the<sp/>case<sp/>with<sp/>some<sp/>default<sp/>MinGW<sp/>builds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Both<sp/>functions<sp/>support<sp/>large<sp/>file<sp/>sizes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>DWORD<sp/>size_upper<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><ref refid="wglew_8h_1aa1efb7b85228601549d183556de19dfc" kindref="member">HANDLE</ref><sp/>handle<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="wglew_8h_1aa1efb7b85228601549d183556de19dfc" kindref="member">HANDLE</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_get_osfhandle(fd_));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>DWORD<sp/>size_lower<sp/>=<sp/><ref refid="posix_8h_1acca658935a0993e7cf549b4a5be255a3" kindref="member">FMT_SYSTEM</ref>(GetFileSize(handle,<sp/>&amp;size_upper));</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size_lower<sp/>==<sp/>INVALID_FILE_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/>error<sp/>=<sp/>GetLastError();</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error<sp/>!=<sp/>NO_ERROR)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>WindowsError(GetLastError(),<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>get<sp/>file<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><ref refid="namespacefmt_1af495ed85910212d4ba243ae2a8ce8f1f" kindref="member">fmt::ULongLong</ref><sp/>long_size<sp/>=<sp/>size_upper;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(long_size<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(DWORD)<sp/>*<sp/>CHAR_BIT)<sp/>|<sp/>size_lower;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>Stat;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>Stat<sp/>file_stat<sp/>=<sp/>Stat();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="posix_8h_1aa693a9f0c55e9b081f1ea5bf04968dd7" kindref="member">FMT_POSIX_CALL</ref>(fstat(fd_,<sp/>&amp;file_stat))<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_system_error" kindref="compound">SystemError</ref>(errno,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>get<sp/>file<sp/>attributes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a204f6e58eced6add1741a1778c4690b9" kindref="member">FMT_STATIC_ASSERT</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="namespacefmt_1aef84b50b68fdc25388fed2952c2db563" kindref="member">fmt::LongLong</ref>)<sp/>&gt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(file_stat.st_size),</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;return<sp/>type<sp/>of<sp/>File::size<sp/>is<sp/>not<sp/>large<sp/>enough&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file_stat.st_size;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="classfmt_1_1_file_1abc5028be3839fafe1e54aa44bf94cb32" refkind="member"><highlight class="normal">std::size_t<sp/><ref refid="classfmt_1_1_file_1abc5028be3839fafe1e54aa44bf94cb32" kindref="member">fmt::File::read</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="glew_8h_1a6c0f527f003707dfaca177b40f406ed9" kindref="member">buffer</ref>,<sp/>std::size_t<sp/><ref refid="glew_8h_1a10b284d589000663becfbc6867a3a9f7" kindref="member">count</ref>)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>RWResult<sp/><ref refid="glew_8h_1a5fb5836a37f7607602a16ad733ed6357" kindref="member">result</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><ref refid="posix_8h_1a9d6790ac79298b8abd2472500422e138" kindref="member">FMT_RETRY</ref>(result,<sp/><ref refid="posix_8h_1aa693a9f0c55e9b081f1ea5bf04968dd7" kindref="member">FMT_POSIX_CALL</ref>(read(fd_,<sp/>buffer,<sp/>convert_rwcount(count))));</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_system_error" kindref="compound">SystemError</ref>(errno,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>read<sp/>from<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1a28bed1291226be35437bc3173c19c205" kindref="member">internal::to_unsigned</ref>(result);</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="classfmt_1_1_file_1a0af6a258b5ca604680a83bada8a836d8" refkind="member"><highlight class="normal">std::size_t<sp/><ref refid="classfmt_1_1_file_1a0af6a258b5ca604680a83bada8a836d8" kindref="member">fmt::File::write</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="glew_8h_1a6c0f527f003707dfaca177b40f406ed9" kindref="member">buffer</ref>,<sp/>std::size_t<sp/><ref refid="glew_8h_1a10b284d589000663becfbc6867a3a9f7" kindref="member">count</ref>)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>RWResult<sp/><ref refid="glew_8h_1a5fb5836a37f7607602a16ad733ed6357" kindref="member">result</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><ref refid="posix_8h_1a9d6790ac79298b8abd2472500422e138" kindref="member">FMT_RETRY</ref>(result,<sp/><ref refid="posix_8h_1aa693a9f0c55e9b081f1ea5bf04968dd7" kindref="member">FMT_POSIX_CALL</ref>(<ref refid="namespacefmt_1_1internal_1a7c721969e9660580a237bd4130422ab6" kindref="member">write</ref>(fd_,<sp/>buffer,<sp/>convert_rwcount(count))));</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_system_error" kindref="compound">SystemError</ref>(errno,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>write<sp/>to<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1a28bed1291226be35437bc3173c19c205" kindref="member">internal::to_unsigned</ref>(result);</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="classfmt_1_1_file_1a2521de9e7f1ee48234ddc117689a3739" refkind="member"><highlight class="normal"><ref refid="classfmt_1_1_file" kindref="compound">fmt::File</ref><sp/><ref refid="classfmt_1_1_file_1a2521de9e7f1ee48234ddc117689a3739" kindref="member">fmt::File::dup</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>retry<sp/>as<sp/>dup<sp/>doesn&apos;t<sp/>return<sp/>EINTR.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>http://pubs.opengroup.org/onlinepubs/009695399/functions/dup.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_fd<sp/>=<sp/><ref refid="posix_8h_1aa693a9f0c55e9b081f1ea5bf04968dd7" kindref="member">FMT_POSIX_CALL</ref>(dup(fd));</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_fd<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_system_error" kindref="compound">SystemError</ref>(errno,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>duplicate<sp/>file<sp/>descriptor<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>fd);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_buffered_file_1a68d15876ad188b7628261b12d0eac8aa" kindref="member">File</ref>(new_fd);</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="classfmt_1_1_file_1a45718106d65eb24d0a44dbd6ef75865c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_file_1a45718106d65eb24d0a44dbd6ef75865c" kindref="member">fmt::File::dup2</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a5fb5836a37f7607602a16ad733ed6357" kindref="member">result</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><ref refid="posix_8h_1a9d6790ac79298b8abd2472500422e138" kindref="member">FMT_RETRY</ref>(result,<sp/><ref refid="posix_8h_1aa693a9f0c55e9b081f1ea5bf04968dd7" kindref="member">FMT_POSIX_CALL</ref>(dup2(fd_,<sp/>fd)));</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_system_error" kindref="compound">SystemError</ref>(errno,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>duplicate<sp/>file<sp/>descriptor<sp/>{}<sp/>to<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>fd_,<sp/>fd);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="classfmt_1_1_file_1a2c15a1bef5be959578969a275d470011" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_file_1a45718106d65eb24d0a44dbd6ef75865c" kindref="member">fmt::File::dup2</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/><ref refid="classfmt_1_1_error_code" kindref="compound">ErrorCode</ref><sp/>&amp;ec)<sp/><ref refid="format_8h_1aef128913e8400683b1cbd1a3a2e11df3" kindref="member">FMT_NOEXCEPT</ref><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a5fb5836a37f7607602a16ad733ed6357" kindref="member">result</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><ref refid="posix_8h_1a9d6790ac79298b8abd2472500422e138" kindref="member">FMT_RETRY</ref>(result,<sp/><ref refid="posix_8h_1aa693a9f0c55e9b081f1ea5bf04968dd7" kindref="member">FMT_POSIX_CALL</ref>(dup2(fd_,<sp/>fd)));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>ec<sp/>=<sp/><ref refid="classfmt_1_1_error_code" kindref="compound">ErrorCode</ref>(errno);</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="classfmt_1_1_file_1a84143751d0471636367eddbdf1269823" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_file_1a84143751d0471636367eddbdf1269823" kindref="member">fmt::File::pipe</ref>(<ref refid="classfmt_1_1_file" kindref="compound">File</ref><sp/>&amp;read_end,<sp/><ref refid="classfmt_1_1_file" kindref="compound">File</ref><sp/>&amp;write_end)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Close<sp/>the<sp/>descriptors<sp/>first<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>assignments<sp/>don&apos;t<sp/>throw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>there<sp/>are<sp/>no<sp/>leaks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>read_end.<ref refid="classfmt_1_1_file_1a0f9f9adfcae772efe2cae9c60a2f23f4" kindref="member">close</ref>();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>write_end.<ref refid="classfmt_1_1_file_1a0f9f9adfcae772efe2cae9c60a2f23f4" kindref="member">close</ref>();</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fds[2]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>the<sp/>default<sp/>pipe<sp/>capacity<sp/>same<sp/>as<sp/>on<sp/>Linux<sp/>2.6.11+.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>DEFAULT_CAPACITY<sp/>=<sp/>65536<sp/>};</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a5fb5836a37f7607602a16ad733ed6357" kindref="member">result</ref><sp/>=<sp/><ref refid="posix_8h_1aa693a9f0c55e9b081f1ea5bf04968dd7" kindref="member">FMT_POSIX_CALL</ref>(pipe(fds,<sp/>DEFAULT_CAPACITY,<sp/>_O_BINARY));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>retry<sp/>as<sp/>the<sp/>pipe<sp/>function<sp/>doesn&apos;t<sp/>return<sp/>EINTR.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>http://pubs.opengroup.org/onlinepubs/009696799/functions/pipe.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="posix_8h_1aa693a9f0c55e9b081f1ea5bf04968dd7" kindref="member">FMT_POSIX_CALL</ref>(pipe(fds));</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_system_error" kindref="compound">SystemError</ref>(errno,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>create<sp/>pipe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>assignments<sp/>don&apos;t<sp/>throw<sp/>because<sp/>read_fd<sp/>and<sp/>write_fd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>closed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>read_end<sp/>=<sp/><ref refid="classfmt_1_1_buffered_file_1a68d15876ad188b7628261b12d0eac8aa" kindref="member">File</ref>(fds[0]);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>write_end<sp/>=<sp/><ref refid="classfmt_1_1_buffered_file_1a68d15876ad188b7628261b12d0eac8aa" kindref="member">File</ref>(fds[1]);</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="classfmt_1_1_file_1ab8f1cc502c78916df5f743900ea92ad4" refkind="member"><highlight class="normal"><ref refid="classfmt_1_1_buffered_file" kindref="compound">fmt::BufferedFile</ref><sp/><ref refid="classfmt_1_1_file_1ab8f1cc502c78916df5f743900ea92ad4" kindref="member">fmt::File::fdopen</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="glew_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5" kindref="member">mode</ref>)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>retry<sp/>as<sp/>fdopen<sp/>doesn&apos;t<sp/>return<sp/>EINTR.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>FILE<sp/>*<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref><sp/>=<sp/><ref refid="posix_8h_1aa693a9f0c55e9b081f1ea5bf04968dd7" kindref="member">FMT_POSIX_CALL</ref>(fdopen(fd_,<sp/>mode));</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_system_error" kindref="compound">SystemError</ref>(errno,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>associate<sp/>stream<sp/>with<sp/>file<sp/>descriptor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_buffered_file" kindref="compound">BufferedFile</ref><sp/>file(f);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>fd_<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file;</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="namespacefmt_1a28071220364a5499348cec5dbba7a005" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1a28071220364a5499348cec5dbba7a005" kindref="member">fmt::getpagesize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>SYSTEM_INFO<sp/>si;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>GetSystemInfo(&amp;si);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>si.dwPageSize;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref><sp/>=<sp/><ref refid="posix_8h_1aa693a9f0c55e9b081f1ea5bf04968dd7" kindref="member">FMT_POSIX_CALL</ref>(sysconf(_SC_PAGESIZE));</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_system_error" kindref="compound">SystemError</ref>(errno,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>get<sp/>memory<sp/>page<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/jmacey/NGL/include/ngl/fmt/posix.cc"/>
  </compounddef>
</doxygen>
