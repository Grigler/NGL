<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="todo" kind="page">
    <compoundname>todo</compoundname>
    <title>Todo List</title>
    <detaileddescription>
<para><variablelist>
<varlistentry><term><anchor id="todo_1_todo000001"/>Member <ref refid="classngl_1_1_abstract_mesh_1a279b4c298c26705ebbaddb5120144ba1" kindref="member">ngl::AbstractMesh::writeToRibSubdiv</ref>  (<ref refid="classngl_1_1_rib_export" kindref="compound">RibExport</ref> &amp;_ribFile) const noexcept</term></varlistentry>
<listitem><para>correct the rib exporter and add Normal information to the export  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000011"/>Class <ref refid="classngl_1_1_bezier_curve" kindref="compound">ngl::BezierCurve</ref>  </term></varlistentry>
<listitem><para>update this class to run the CoxDeBoor algo once and then store the points in a dynamic array based on the LOD value passed in. This will speed up the execution for static curves as at present we calculate each time. Also this array can then be used to draw with VertexArrays and we will not need to create the DisplayLists  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000012"/>Member <ref refid="classngl_1_1_bezier_curve_1a09380788ad51a31e512e39070eb6c670" kindref="member">ngl::BezierCurve::draw</ref>  () const noexcept</term></varlistentry>
<listitem><para>Modify this to use faster method than display lists  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000013"/>Class <ref refid="classngl_1_1_camera" kindref="compound">ngl::Camera</ref>  </term></varlistentry>
<listitem><para>Finish off the different projections modes at present persp and ortho work  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000014"/>Member <ref refid="classngl_1_1_camera_1a82b58d5470b3b5359d721135378df467" kindref="member">ngl::Camera::writeRib</ref>  (<ref refid="classngl_1_1_rib_export" kindref="compound">RibExport</ref> &amp;_rib) const noexcept</term></varlistentry>
<listitem><para>make this and the rest of the Rib class work as a friend class rather than as present  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000015"/>Class <ref refid="classngl_1_1_colour" kindref="compound">ngl::Colour</ref>  </term></varlistentry>
<listitem><para>add code to use other colour spaces, could be done like Renderman with ctor &quot;HSV&quot; etc  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000010"/>Class <ref refid="classngl_1_1_face" kindref="compound">ngl::Face</ref>  </term></varlistentry>
<listitem><para>add the ability to have user installable attribute lists  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000016"/>Class <ref refid="classngl_1_1_hou_dictionary_entry" kindref="compound">ngl::HouDictionaryEntry</ref>  </term></varlistentry>
<listitem><para>finish this off at some stage  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000002"/>Member <ref refid="classngl_1_1_houdini_geo_1a12621d27e36077600d2fce4a0a6cb1c1" kindref="member">ngl::HoudiniGeo::drawDebugPoints</ref>  ()</term></varlistentry>
<listitem><para>write GL3.x code to do this  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000017"/>Class <ref refid="classngl_1_1_light" kindref="compound">ngl::Light</ref>  </term></varlistentry>
<listitem><para>this will need to be changed to work with GLSL lights for GL_VERSION &gt; 3.x  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000003"/>Member <ref refid="classngl_1_1_mat3_1a3f520698492c240dae7596e956e11926" kindref="member">ngl::Mat3::setAtXY</ref>  (GLint _x, GLint _y, Real _equals) noexcept</term></varlistentry>
<listitem><para>replace this with function operator overload ()  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000004"/>Member <ref refid="classngl_1_1_mat4_1a0b29c4d3625ad44862d7dff912619186" kindref="member">ngl::Mat4::setAtXY</ref>  (GLint _x, GLint _y, Real _equals) noexcept</term></varlistentry>
<listitem><para>replace this with function operator overload ()  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000008"/>Member <ref refid="classngl_1_1_path_camera_1ad715afd6ff8e47e3ad745feba84f40cc" kindref="member">ngl::PathCamera::drawPaths</ref>  () const noexcept</term></varlistentry>
<listitem><para>write code to do the drawing  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000007"/>Member <ref refid="classngl_1_1_path_camera_1a350e8c3c5c7ac964c2449f0aafd2757b" kindref="member">ngl::PathCamera::loadPath</ref>  (const std::string &amp;_fName) noexcept</term></varlistentry>
<listitem><para>get this working with loading from a Vector  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000018"/>Class <ref refid="classngl_1_1_rib_export" kindref="compound">ngl::RibExport</ref>  </term></varlistentry>
<listitem><para>add code for exporting basic Rib geometry patches etc.  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000020"/>Class <ref refid="classngl_1_1_texture" kindref="compound">ngl::Texture</ref>  </term></varlistentry>
<listitem><para>make it more flexible for different types of texture operations </para><para>write save method at some stage as well this could grab info from framebuffer and replace the frame writer class  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000009"/>Member <ref refid="classngl_1_1_v_a_o_primitives_1a3333662d6d2f7f017e3d6cad45cb44c7" kindref="member">ngl::VAOPrimitives::createCapsule</ref>  (const std::string &amp;_name, const Real _radius=1.0f, const Real _height=2.0f, const int _precision=20) noexcept</term></varlistentry>
<listitem><para>add UV&apos;s at some stage  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000006"/>File <ref refid="_obj_8cpp" kindref="compound">Obj.cpp</ref>  </term></varlistentry>
<listitem><para>re-write this at some stage to use boost::spirit::qi  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000019"/>File <ref refid="_text_8h" kindref="compound">Text.h</ref>  </term></varlistentry>
<listitem><para>support unicode <ref refid="struct_a_s_c_i_i" kindref="compound">ASCII</ref> is so 1980&apos;s ;-0 This class will generate billboard textures and VertexArrayObjects for each of the font glyphs, this means we need a valid OpenGL context before using this class, therefore it should be constructed in initalizeGL or after. Note for efficiency once the font has been created we can only change the colour, if you need different sizes / emphasis you will need to create a new <ref refid="classngl_1_1_text" kindref="compound">Text</ref> object with the desired size / emphasis. This is accelerated as much as possible but text rendering will sometimes be slow as we bind a new texture for each char being drawn for more details look at the blog post here <ulink url="http://jonmacey.blogspot.com/2011/10/text-rendering-using-opengl-32.html">http://jonmacey.blogspot.com/2011/10/text-rendering-using-opengl-32.html</ulink>  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000021"/>File <ref refid="_vec4_8h" kindref="compound">Vec4.h</ref>  </term></varlistentry>
<listitem><para>lots of tidying up and code optimizations </para><para>at some stage re-write to use Machine Code and MMX extentions </para></listitem>
</variablelist>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
