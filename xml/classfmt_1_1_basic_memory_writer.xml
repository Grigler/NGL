<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classfmt_1_1_basic_memory_writer" kind="class" language="C++" prot="public">
    <compoundname>fmt::BasicMemoryWriter</compoundname>
    <basecompoundref refid="classfmt_1_1_basic_writer" prot="public" virt="non-virtual">fmt::BasicWriter&lt; Char &gt;</basecompoundref>
    <includes refid="format_8h" local="no">format.h</includes>
    <templateparamlist>
      <param>
        <type>typename Char</type>
      </param>
      <param>
        <type>typename Allocator</type>
        <defval>std::allocator&lt;Char&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classfmt_1_1_basic_memory_writer_1aca639802d5fb620dc07e9d67636a0584" prot="private" static="no" mutable="no">
        <type><ref refid="classfmt_1_1internal_1_1_memory_buffer" kindref="compound">internal::MemoryBuffer</ref>&lt; Char, <ref refid="namespacefmt_1_1internal_1a855d655a8b82a933597acb9eee31b1a3abf58574b3f45959f076968509372a2fa" kindref="member">internal::INLINE_BUFFER_SIZE</ref>, Allocator &gt;</type>
        <definition>internal::MemoryBuffer&lt;Char, internal::INLINE_BUFFER_SIZE, Allocator&gt; fmt::BasicMemoryWriter&lt; Char, Allocator &gt;::buffer_</definition>
        <argsstring></argsstring>
        <name>buffer_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="3021" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="3021" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfmt_1_1_basic_memory_writer_1a36ef881adce8fc7a0b3632d2fb66fdfb" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fmt::BasicMemoryWriter&lt; Char, Allocator &gt;::BasicMemoryWriter</definition>
        <argsstring>(const Allocator &amp;alloc=Allocator())</argsstring>
        <name>BasicMemoryWriter</name>
        <param>
          <type>const Allocator &amp;</type>
          <declname>alloc</declname>
          <defval>Allocator()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="3024" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="3024" bodyend="3025"/>
        <references refid="namespacestd_1a37ba44826afa04fddf20fd70c45ac3b4" compoundref="posix_8h" startline="361" endline="361">std::move</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This class template provides operations for formatting and writing data into a character stream. The output is stored in a memory buffer that grows dynamically.</para><para>You can use one of the following typedefs for common character types and the standard allocator:</para><para>+------------<mdash/>+--------------------------------------------------<mdash/>+ | Type | Definition | +===============+=====================================================+ | MemoryWriter | <ref refid="classfmt_1_1_basic_memory_writer" kindref="compound">BasicMemoryWriter</ref>&lt;char, std::allocator&lt;char&gt;&gt; | +------------<mdash/>+--------------------------------------------------<mdash/>+ | WMemoryWriter | <ref refid="classfmt_1_1_basic_memory_writer" kindref="compound">BasicMemoryWriter</ref>&lt;wchar_t, std::allocator&lt;wchar_t&gt;&gt; | +------------<mdash/>+--------------------------------------------------<mdash/>+</para><para>Example**::</para><para>MemoryWriter out; out &lt;&lt; &quot;The answer is &quot; &lt;&lt; 42 &lt;&lt; &quot;\n&quot;; out.write(&quot;({:+f}, {:+f})&quot;, -3.14, 3.14);</para><para>This will write the following output to the <computeroutput>out</computeroutput> object:</para><para>.. code-block:: none</para><para>The answer is 42 (-3.140000, +3.140000)</para><para>The output can be converted to an <computeroutput>std::string</computeroutput> with <computeroutput>out.str()</computeroutput> or accessed as a C string with <computeroutput>out.c_str()</computeroutput>.  </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1282">
        <label>fmt::BasicMemoryWriter&lt; Char, Allocator &gt;</label>
        <link refid="classfmt_1_1_basic_memory_writer"/>
        <childnode refid="1283" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1283">
        <label>fmt::BasicWriter&lt; Char &gt;</label>
        <link refid="classfmt_1_1_basic_writer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1292">
        <label>Char</label>
      </node>
      <node id="1287">
        <label>size_t</label>
      </node>
      <node id="1289">
        <label>T</label>
      </node>
      <node id="1290">
        <label>fmt::internal::MemoryBuffer&lt; Char, internal::INLINE_BUFFER_SIZE, Allocator &gt;</label>
        <link refid="classfmt_1_1internal_1_1_memory_buffer"/>
        <childnode refid="1291" relation="private-inheritance">
        </childnode>
        <childnode refid="1286" relation="public-inheritance">
        </childnode>
        <childnode refid="1292" relation="usage">
          <edgelabel>-data_</edgelabel>
        </childnode>
        <childnode refid="1293" relation="template-instance">
          <edgelabel>&lt; Char, internal::INLINE_BUFFER_SIZE, Allocator &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1286">
        <label>fmt::Buffer&lt; Char &gt;</label>
        <link refid="classfmt_1_1_buffer"/>
        <childnode refid="1287" relation="usage">
          <edgelabel>#size_</edgelabel>
          <edgelabel>#capacity_</edgelabel>
        </childnode>
        <childnode refid="1288" relation="template-instance">
          <edgelabel>&lt; Char &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1293">
        <label>fmt::internal::MemoryBuffer&lt; T, SIZE, Allocator &gt;</label>
        <link refid="classfmt_1_1internal_1_1_memory_buffer"/>
        <childnode refid="1291" relation="private-inheritance">
        </childnode>
        <childnode refid="1288" relation="public-inheritance">
        </childnode>
        <childnode refid="1289" relation="usage">
          <edgelabel>-data_</edgelabel>
        </childnode>
      </node>
      <node id="1284">
        <label>fmt::BasicMemoryWriter&lt; Char, Allocator &gt;</label>
        <link refid="classfmt_1_1_basic_memory_writer"/>
        <childnode refid="1285" relation="public-inheritance">
        </childnode>
        <childnode refid="1290" relation="usage">
          <edgelabel>-buffer_</edgelabel>
        </childnode>
      </node>
      <node id="1288">
        <label>fmt::Buffer&lt; T &gt;</label>
        <link refid="classfmt_1_1_buffer"/>
        <childnode refid="1287" relation="usage">
          <edgelabel>#size_</edgelabel>
          <edgelabel>#capacity_</edgelabel>
        </childnode>
        <childnode refid="1289" relation="usage">
          <edgelabel>#ptr_</edgelabel>
        </childnode>
      </node>
      <node id="1285">
        <label>fmt::BasicWriter&lt; Char &gt;</label>
        <link refid="classfmt_1_1_basic_writer"/>
        <childnode refid="1286" relation="usage">
          <edgelabel>-buffer_</edgelabel>
        </childnode>
      </node>
      <node id="1291">
        <label>Allocator</label>
      </node>
    </collaborationgraph>
    <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="3019" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="3019" bodyend="3048"/>
    <listofallmembers>
      <member refid="classfmt_1_1_basic_memory_writer_1a36ef881adce8fc7a0b3632d2fb66fdfb" prot="public" virt="non-virtual"><scope>fmt::BasicMemoryWriter</scope><name>BasicMemoryWriter</name></member>
      <member refid="classfmt_1_1_basic_writer_1a586c21bbbd38149bcf48fc30376afc9c" prot="protected" virt="non-virtual"><scope>fmt::BasicMemoryWriter</scope><name>BasicWriter</name></member>
      <member refid="classfmt_1_1_basic_writer_1a9b2a71d2ec402005fca013111bb576cb" prot="public" virt="non-virtual"><scope>fmt::BasicMemoryWriter</scope><name>buffer</name></member>
      <member refid="classfmt_1_1_basic_memory_writer_1aca639802d5fb620dc07e9d67636a0584" prot="private" virt="non-virtual"><scope>fmt::BasicMemoryWriter</scope><name>buffer_</name></member>
      <member refid="classfmt_1_1_basic_writer_1a8b68001f5c1c0ea851ddaef27dcbc691" prot="public" virt="non-virtual"><scope>fmt::BasicMemoryWriter</scope><name>c_str</name></member>
      <member refid="classfmt_1_1_basic_writer_1aa5b6f4dd01854cbc3ebf06a7f2fce713" prot="public" virt="non-virtual"><scope>fmt::BasicMemoryWriter</scope><name>clear</name></member>
      <member refid="classfmt_1_1_basic_writer_1a62d1c7b5be9c3580326320d5d178d096" prot="public" virt="non-virtual"><scope>fmt::BasicMemoryWriter</scope><name>data</name></member>
      <member refid="classfmt_1_1_basic_writer_1a3d21148f336a76a71b39abb2fd6c0f88" prot="public" virt="non-virtual"><scope>fmt::BasicMemoryWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classfmt_1_1_basic_writer_1a7ec4d6fb4cf9173b14d4ee100fd4a428" prot="public" virt="non-virtual"><scope>fmt::BasicMemoryWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classfmt_1_1_basic_writer_1a1fd4183e01fd56ec99af40431b32561b" prot="public" virt="non-virtual"><scope>fmt::BasicMemoryWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classfmt_1_1_basic_writer_1a4e0ef5415eb162ec991b69b930245094" prot="public" virt="non-virtual"><scope>fmt::BasicMemoryWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classfmt_1_1_basic_writer_1a2c876284b0b3b7f36cc0354e3348912a" prot="public" virt="non-virtual"><scope>fmt::BasicMemoryWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classfmt_1_1_basic_writer_1afb01c45f06b2c13027343b74ce973a40" prot="public" virt="non-virtual"><scope>fmt::BasicMemoryWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classfmt_1_1_basic_writer_1afa435e67e3db3d214f0272b10c0a3878" prot="public" virt="non-virtual"><scope>fmt::BasicMemoryWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classfmt_1_1_basic_writer_1a90215ced4a6a9fcd5065f1ffd4105a4b" prot="public" virt="non-virtual"><scope>fmt::BasicMemoryWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classfmt_1_1_basic_writer_1a4c7d6b3a40b4083f351de3f9ee0b3818" prot="public" virt="non-virtual"><scope>fmt::BasicMemoryWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classfmt_1_1_basic_writer_1a83967e3236b090ba035d5fc04317f4ed" prot="public" virt="non-virtual"><scope>fmt::BasicMemoryWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classfmt_1_1_basic_writer_1a5f07d053b9f215b548ba3623e7a09212" prot="public" virt="non-virtual"><scope>fmt::BasicMemoryWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classfmt_1_1_basic_writer_1ac0483272173279436f3d47f49894cafb" prot="public" virt="non-virtual"><scope>fmt::BasicMemoryWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classfmt_1_1_basic_writer_1a45ded4f76427103f3c189855be8c5d46" prot="public" virt="non-virtual"><scope>fmt::BasicMemoryWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classfmt_1_1_basic_writer_1a79c23ed8ee17ee205ece04571f0dd79b" prot="public" virt="non-virtual"><scope>fmt::BasicMemoryWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classfmt_1_1_basic_writer_1a1b6721b4ba4d3fa18ac781a36616cc2a" prot="public" virt="non-virtual"><scope>fmt::BasicMemoryWriter</scope><name>size</name></member>
      <member refid="classfmt_1_1_basic_writer_1a91f06ced6e063ee77a99740e0e79faf6" prot="public" virt="non-virtual"><scope>fmt::BasicMemoryWriter</scope><name>str</name></member>
      <member refid="classfmt_1_1_basic_writer_1aaa83498c649d4a90ea3366bae62f4eac" prot="public" virt="non-virtual"><scope>fmt::BasicMemoryWriter</scope><name>write</name></member>
      <member refid="classfmt_1_1_basic_writer_1a25f6fc2e43d3bcfb3de9ac33afe6050d" prot="public" virt="virtual"><scope>fmt::BasicMemoryWriter</scope><name>~BasicWriter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
