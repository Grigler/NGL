<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classfmt_1_1_basic_printf_arg_formatter" kind="class" language="C++" prot="public">
    <compoundname>fmt::BasicPrintfArgFormatter</compoundname>
    <basecompoundref refid="classfmt_1_1internal_1_1_arg_formatter_base" prot="public" virt="non-virtual">fmt::internal::ArgFormatterBase&lt; Impl, Char &gt;</basecompoundref>
    <includes refid="format_8h" local="no">format.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>Impl</declname>
        <defname>Impl</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>Char</declname>
        <defname>Char</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classfmt_1_1_basic_printf_arg_formatter_1a27df457cabe71935d28f7df378fc6de6" prot="private" static="no">
        <type><ref refid="classfmt_1_1internal_1_1_arg_formatter_base" kindref="compound">internal::ArgFormatterBase</ref>&lt; Impl, Char &gt;</type>
        <definition>typedef internal::ArgFormatterBase&lt;Impl, Char&gt; fmt::BasicPrintfArgFormatter&lt; Impl, Char &gt;::Base</definition>
        <argsstring></argsstring>
        <name>Base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/printf.h" line="200" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/printf.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classfmt_1_1_basic_printf_arg_formatter_1a6d33080841bed7fbce18b6a4623fbef5" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>void fmt::BasicPrintfArgFormatter&lt; Impl, Char &gt;::write_null_pointer</definition>
        <argsstring>()</argsstring>
        <name>write_null_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/printf.h" line="195" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/printf.h" bodystart="195" bodyend="198"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfmt_1_1_basic_printf_arg_formatter_1a3e148332a5cbd6bee951ba8ad2b248b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fmt::BasicPrintfArgFormatter&lt; Impl, Char &gt;::BasicPrintfArgFormatter</definition>
        <argsstring>(BasicWriter&lt; Char &gt; &amp;writer, FormatSpec &amp;spec)</argsstring>
        <name>BasicPrintfArgFormatter</name>
        <param>
          <type><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter</ref>&lt; Char &gt; &amp;</type>
          <declname>writer</declname>
        </param>
        <param>
          <type><ref refid="structfmt_1_1_format_spec" kindref="compound">FormatSpec</ref> &amp;</type>
          <declname>spec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs an argument formatter object. writer* is a reference to the output writer and <emphasis>spec</emphasis> contains format specifier information for standard argument types.  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/printf.h" line="210" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/printf.h" bodystart="210" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classfmt_1_1_basic_printf_arg_formatter_1ad7e0c109d588a2e2be9d90f7deee59a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>void fmt::BasicPrintfArgFormatter&lt; Impl, Char &gt;::visit_bool</definition>
        <argsstring>(bool value)</argsstring>
        <name>visit_bool</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Formats an argument of type <computeroutput>bool</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/printf.h" line="214" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/printf.h" bodystart="214" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classfmt_1_1_basic_printf_arg_formatter_1a97f26086d50a4553280fbe831ef7e947" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>void fmt::BasicPrintfArgFormatter&lt; Impl, Char &gt;::visit_char</definition>
        <argsstring>(int value)</argsstring>
        <name>visit_char</name>
        <param>
          <type><ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Formats a character. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/printf.h" line="223" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/printf.h" bodystart="223" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classfmt_1_1_basic_printf_arg_formatter_1a4d5af89db6690ef2507ffc8cc8b38497" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>void fmt::BasicPrintfArgFormatter&lt; Impl, Char &gt;::visit_cstring</definition>
        <argsstring>(const char *value)</argsstring>
        <name>visit_cstring</name>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Formats a null-terminated C string. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/printf.h" line="246" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/printf.h" bodystart="246" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classfmt_1_1_basic_printf_arg_formatter_1a61962abc13a85ba6a69e839fb06270c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>void fmt::BasicPrintfArgFormatter&lt; Impl, Char &gt;::visit_pointer</definition>
        <argsstring>(const void *value)</argsstring>
        <name>visit_pointer</name>
        <param>
          <type>const <ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Formats a pointer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/printf.h" line="256" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/printf.h" bodystart="256" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classfmt_1_1_basic_printf_arg_formatter_1a4bc1a6a180bd532d300c953f0dbafc1e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="wglew_8h_1aeea6e3dfae3acf232096f57d2d57f084" kindref="member">void</ref></type>
        <definition>void fmt::BasicPrintfArgFormatter&lt; Impl, Char &gt;::visit_custom</definition>
        <argsstring>(internal::Arg::CustomValue c)</argsstring>
        <name>visit_custom</name>
        <param>
          <type><ref refid="structfmt_1_1internal_1_1_value_1_1_custom_value" kindref="compound">internal::Arg::CustomValue</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Formats an argument of a custom (user-defined) type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/printf.h" line="264" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/printf.h" bodystart="264" bodyend="269"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A <computeroutput>printf</computeroutput> argument formatter based on the <computeroutput>curiously recurring template pattern &lt;<ulink url="http://en.wikipedia.org/wiki/Curiously_recurring_template_pattern">http://en.wikipedia.org/wiki/Curiously_recurring_template_pattern</ulink>&gt;</computeroutput>_.</para><para>To use <computeroutput>~fmt::BasicPrintfArgFormatter</computeroutput> define a subclass that implements some or all of the visit methods with the same signatures as the methods in <computeroutput>~fmt::ArgVisitor</computeroutput>, for example, <computeroutput>~fmt::ArgVisitor::visit_int()</computeroutput>. Pass the subclass as the <emphasis>Impl</emphasis> template parameter. When a formatting function processes an argument, it will dispatch to a visit method specific to the argument type. For example, if the argument type is <computeroutput>double</computeroutput> then the <computeroutput>~fmt::ArgVisitor::visit_double()</computeroutput> method of a subclass will be called. If the subclass doesn&apos;t contain a method with this signature, then a corresponding method of <computeroutput>~fmt::BasicPrintfArgFormatter</computeroutput> or its superclass will be called.  </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1294">
        <label>fmt::BasicPrintfArgFormatter&lt; Impl, Char &gt;</label>
        <link refid="classfmt_1_1_basic_printf_arg_formatter"/>
        <childnode refid="1295" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1295">
        <label>fmt::internal::ArgFormatterBase&lt; Impl, Char &gt;</label>
        <link refid="classfmt_1_1internal_1_1_arg_formatter_base"/>
        <childnode refid="1296" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1297">
        <label>fmt::ArgVisitor&lt; Impl, Result &gt;</label>
        <link refid="classfmt_1_1_arg_visitor"/>
      </node>
      <node id="1296">
        <label>fmt::ArgVisitor&lt; Impl, void &gt;</label>
        <link refid="classfmt_1_1_arg_visitor"/>
        <childnode refid="1297" relation="template-instance">
          <edgelabel>&lt; Impl, void &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1298">
        <label>fmt::BasicPrintfArgFormatter&lt; PrintfArgFormatter&lt; Char &gt;, Char &gt;</label>
        <link refid="classfmt_1_1_basic_printf_arg_formatter"/>
        <childnode refid="1294" relation="template-instance">
          <edgelabel>&lt; PrintfArgFormatter&lt; Char &gt;, Char &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1299">
        <label>fmt::PrintfArgFormatter&lt; Char &gt;</label>
        <link refid="classfmt_1_1_printf_arg_formatter"/>
        <childnode refid="1298" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1300">
        <label>fmt::BasicPrintfArgFormatter&lt; Impl, Char &gt;</label>
        <link refid="classfmt_1_1_basic_printf_arg_formatter"/>
        <childnode refid="1301" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1301">
        <label>fmt::internal::ArgFormatterBase&lt; Impl, Char &gt;</label>
        <link refid="classfmt_1_1internal_1_1_arg_formatter_base"/>
        <childnode refid="1302" relation="public-inheritance">
        </childnode>
        <childnode refid="1304" relation="usage">
          <edgelabel>-spec_</edgelabel>
        </childnode>
      </node>
      <node id="1306">
        <label>fmt::WidthSpec</label>
        <link refid="structfmt_1_1_width_spec"/>
      </node>
      <node id="1303">
        <label>fmt::ArgVisitor&lt; Impl, Result &gt;</label>
        <link refid="classfmt_1_1_arg_visitor"/>
      </node>
      <node id="1302">
        <label>fmt::ArgVisitor&lt; Impl, void &gt;</label>
        <link refid="classfmt_1_1_arg_visitor"/>
        <childnode refid="1303" relation="template-instance">
          <edgelabel>&lt; Impl, void &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1305">
        <label>fmt::AlignSpec</label>
        <link refid="structfmt_1_1_align_spec"/>
        <childnode refid="1306" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1304">
        <label>fmt::FormatSpec</label>
        <link refid="structfmt_1_1_format_spec"/>
        <childnode refid="1305" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/Users/jmacey/NGL/include/ngl/fmt/format.h" line="385" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.h" bodystart="385" bodyend="-1"/>
    <listofallmembers>
      <member refid="classfmt_1_1internal_1_1_arg_formatter_base_1a67f48acedb2ba3f243150c41f964252b" prot="public" virt="non-virtual"><scope>fmt::BasicPrintfArgFormatter</scope><name>ArgFormatterBase</name></member>
      <member refid="classfmt_1_1_basic_printf_arg_formatter_1a27df457cabe71935d28f7df378fc6de6" prot="private" virt="non-virtual"><scope>fmt::BasicPrintfArgFormatter</scope><name>Base</name></member>
      <member refid="classfmt_1_1_basic_printf_arg_formatter_1a3e148332a5cbd6bee951ba8ad2b248b7" prot="public" virt="non-virtual"><scope>fmt::BasicPrintfArgFormatter</scope><name>BasicPrintfArgFormatter</name></member>
      <member refid="classfmt_1_1_arg_visitor_1a130090f53213407548d93d8ee2801738" prot="public" virt="non-virtual"><scope>fmt::BasicPrintfArgFormatter</scope><name>report_unhandled_arg</name></member>
      <member refid="classfmt_1_1internal_1_1_arg_formatter_base_1acdd3bb185f7b444a60faf98fa9806ed4" prot="protected" virt="non-virtual"><scope>fmt::BasicPrintfArgFormatter</scope><name>spec</name></member>
      <member refid="classfmt_1_1_arg_visitor_1a19a979776fc789baaf038ab216e245bb" prot="public" virt="non-virtual"><scope>fmt::BasicPrintfArgFormatter</scope><name>visit</name></member>
      <member refid="classfmt_1_1internal_1_1_arg_formatter_base_1a670214e1773c9c86002be07c043566dd" prot="public" virt="non-virtual"><scope>fmt::BasicPrintfArgFormatter</scope><name>visit_any_double</name></member>
      <member refid="classfmt_1_1internal_1_1_arg_formatter_base_1ae6f9ce1fa7940ebda3ac594a45edd32d" prot="public" virt="non-virtual"><scope>fmt::BasicPrintfArgFormatter</scope><name>visit_any_int</name></member>
      <member refid="classfmt_1_1_basic_printf_arg_formatter_1ad7e0c109d588a2e2be9d90f7deee59a2" prot="public" virt="non-virtual"><scope>fmt::BasicPrintfArgFormatter</scope><name>visit_bool</name></member>
      <member refid="classfmt_1_1_basic_printf_arg_formatter_1a97f26086d50a4553280fbe831ef7e947" prot="public" virt="non-virtual"><scope>fmt::BasicPrintfArgFormatter</scope><name>visit_char</name></member>
      <member refid="classfmt_1_1_basic_printf_arg_formatter_1a4d5af89db6690ef2507ffc8cc8b38497" prot="public" virt="non-virtual"><scope>fmt::BasicPrintfArgFormatter</scope><name>visit_cstring</name></member>
      <member refid="classfmt_1_1_basic_printf_arg_formatter_1a4bc1a6a180bd532d300c953f0dbafc1e" prot="public" virt="non-virtual"><scope>fmt::BasicPrintfArgFormatter</scope><name>visit_custom</name></member>
      <member refid="classfmt_1_1_arg_visitor_1a2a7a4cbb1df7a8b3c310a607600773ae" prot="public" virt="non-virtual"><scope>fmt::BasicPrintfArgFormatter</scope><name>visit_double</name></member>
      <member refid="classfmt_1_1_arg_visitor_1ac6d79e3d931a9f56f40bca08f8651cdf" prot="public" virt="non-virtual"><scope>fmt::BasicPrintfArgFormatter</scope><name>visit_int</name></member>
      <member refid="classfmt_1_1_arg_visitor_1aa0b2e1792ff7e62d1a49a3118d3c10db" prot="public" virt="non-virtual"><scope>fmt::BasicPrintfArgFormatter</scope><name>visit_long_double</name></member>
      <member refid="classfmt_1_1_arg_visitor_1ab5687cccaae516d3e6e94775737ff798" prot="public" virt="non-virtual"><scope>fmt::BasicPrintfArgFormatter</scope><name>visit_long_long</name></member>
      <member refid="classfmt_1_1_basic_printf_arg_formatter_1a61962abc13a85ba6a69e839fb06270c5" prot="public" virt="non-virtual"><scope>fmt::BasicPrintfArgFormatter</scope><name>visit_pointer</name></member>
      <member refid="classfmt_1_1internal_1_1_arg_formatter_base_1a937a7808ebf21736498e32abba6a0046" prot="public" virt="non-virtual"><scope>fmt::BasicPrintfArgFormatter</scope><name>visit_string</name></member>
      <member refid="classfmt_1_1_arg_visitor_1a51494a02bd4573280fc1cc6fc921f871" prot="public" virt="non-virtual"><scope>fmt::BasicPrintfArgFormatter</scope><name>visit_uint</name></member>
      <member refid="classfmt_1_1_arg_visitor_1ac4424926e9c138b3503039d91c18c087" prot="public" virt="non-virtual"><scope>fmt::BasicPrintfArgFormatter</scope><name>visit_ulong_long</name></member>
      <member refid="classfmt_1_1_arg_visitor_1a8de54a54b863eb63b5c45c4495c12793" prot="public" virt="non-virtual"><scope>fmt::BasicPrintfArgFormatter</scope><name>visit_unhandled_arg</name></member>
      <member refid="classfmt_1_1internal_1_1_arg_formatter_base_1ad3469bff1ffe51395d9f8f0e0824ff2c" prot="public" virt="non-virtual"><scope>fmt::BasicPrintfArgFormatter</scope><name>visit_wstring</name></member>
      <member refid="classfmt_1_1_arg_visitor_1abd76337375076717e6089763dcfb1ad0" prot="public" virt="non-virtual" ambiguityscope="ArgVisitor&lt; Impl, void &gt;::"><scope>fmt::BasicPrintfArgFormatter</scope><name>visit_wstring</name></member>
      <member refid="classfmt_1_1internal_1_1_arg_formatter_base_1a002d52aca6bc9a70d7eb62c037ffadc4" prot="protected" virt="non-virtual"><scope>fmt::BasicPrintfArgFormatter</scope><name>write</name></member>
      <member refid="classfmt_1_1internal_1_1_arg_formatter_base_1a1a706cd6067d51bfa07d5e6c577e0843" prot="protected" virt="non-virtual"><scope>fmt::BasicPrintfArgFormatter</scope><name>write</name></member>
      <member refid="classfmt_1_1_basic_printf_arg_formatter_1a6d33080841bed7fbce18b6a4623fbef5" prot="private" virt="non-virtual"><scope>fmt::BasicPrintfArgFormatter</scope><name>write_null_pointer</name></member>
      <member refid="classfmt_1_1internal_1_1_arg_formatter_base_1a042c1243143197b04c5b4d77a89a4fb5" prot="protected" virt="non-virtual"><scope>fmt::BasicPrintfArgFormatter</scope><name>writer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
