<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="format_8cc" kind="file" language="C++">
    <compoundname>format.cc</compoundname>
    <includes refid="format_8h" local="yes">fmt/format.h</includes>
    <includes refid="printf_8h" local="yes">fmt/printf.h</includes>
    <includes refid="string_8h" local="no">string.h</includes>
    <includes local="no">cctype</includes>
    <includes local="no">cerrno</includes>
    <includes local="no">climits</includes>
    <includes local="no">cmath</includes>
    <includes local="no">cstdarg</includes>
    <includes local="no">cstddef</includes>
    <incdepgraph>
      <node id="4330">
        <label>limits</label>
      </node>
      <node id="4341">
        <label>fmt/ostream.h</label>
        <link refid="ostream_8h"/>
        <childnode refid="4324" relation="include">
        </childnode>
        <childnode refid="4342" relation="include">
        </childnode>
      </node>
      <node id="4327">
        <label>cmath</label>
      </node>
      <node id="4325">
        <label>cassert</label>
      </node>
      <node id="4332">
        <label>stdexcept</label>
      </node>
      <node id="4336">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
        <childnode refid="4337" relation="include">
        </childnode>
        <childnode refid="4338" relation="include">
        </childnode>
      </node>
      <node id="4347">
        <label>cstdarg</label>
      </node>
      <node id="4333">
        <label>string</label>
      </node>
      <node id="4342">
        <label>ostream</label>
      </node>
      <node id="4337">
        <label>limits.h</label>
      </node>
      <node id="4338">
        <label>wchar.h</label>
      </node>
      <node id="4328">
        <label>cstdio</label>
      </node>
      <node id="4334">
        <label>vector</label>
      </node>
      <node id="4335">
        <label>utility</label>
      </node>
      <node id="4324">
        <label>fmt/format.h</label>
        <link refid="format_8h"/>
        <childnode refid="4325" relation="include">
        </childnode>
        <childnode refid="4326" relation="include">
        </childnode>
        <childnode refid="4327" relation="include">
        </childnode>
        <childnode refid="4328" relation="include">
        </childnode>
        <childnode refid="4329" relation="include">
        </childnode>
        <childnode refid="4330" relation="include">
        </childnode>
        <childnode refid="4331" relation="include">
        </childnode>
        <childnode refid="4332" relation="include">
        </childnode>
        <childnode refid="4333" relation="include">
        </childnode>
        <childnode refid="4334" relation="include">
        </childnode>
        <childnode refid="4335" relation="include">
        </childnode>
        <childnode refid="4336" relation="include">
        </childnode>
      </node>
      <node id="4339">
        <label>fmt/printf.h</label>
        <link refid="printf_8h"/>
        <childnode refid="4340" relation="include">
        </childnode>
        <childnode refid="4330" relation="include">
        </childnode>
        <childnode refid="4341" relation="include">
        </childnode>
      </node>
      <node id="4345">
        <label>cerrno</label>
      </node>
      <node id="4326">
        <label>clocale</label>
      </node>
      <node id="4344">
        <label>cctype</label>
      </node>
      <node id="4348">
        <label>cstddef</label>
      </node>
      <node id="4346">
        <label>climits</label>
      </node>
      <node id="4343">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="4324" relation="include">
        </childnode>
      </node>
      <node id="4340">
        <label>algorithm</label>
      </node>
      <node id="4329">
        <label>cstring</label>
      </node>
      <node id="4331">
        <label>memory</label>
      </node>
      <node id="4323">
        <label>format.cc</label>
        <link refid="format.cc"/>
        <childnode refid="4324" relation="include">
        </childnode>
        <childnode refid="4339" relation="include">
        </childnode>
        <childnode refid="4343" relation="include">
        </childnode>
        <childnode refid="4344" relation="include">
        </childnode>
        <childnode refid="4345" relation="include">
        </childnode>
        <childnode refid="4346" relation="include">
        </childnode>
        <childnode refid="4327" relation="include">
        </childnode>
        <childnode refid="4347" relation="include">
        </childnode>
        <childnode refid="4348" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacefmt">fmt</innernamespace>
    <innernamespace refid="namespacefmt_1_1internal">fmt::internal</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="format_8cc_1a4aa79926398ee27fe7d6db8b0dd54edf" prot="public" static="no">
        <name>FMT_TRY</name>
        <initializer>if (true)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.cc" line="60" column="11" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.cc" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8cc_1ab8efe0100a6d7cc74729f5bf7537799c" prot="public" static="no">
        <name>FMT_CATCH</name>
        <param><defname>x</defname></param>
        <initializer>if (false)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.cc" line="61" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.cc" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8cc_1a9a9bb3caa94066b3adc175bb24cb1783" prot="public" static="no">
        <name>FMT_SNPRINTF</name>
        <initializer>snprintf</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.cc" line="91" column="10" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.cc" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8cc_1a7b59f9b149f610d3edd05ed99536253c" prot="public" static="no">
        <name>FMT_SWPRINTF</name>
        <initializer>swprintf</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.cc" line="106" column="11" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.cc" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="format_8cc_1aeff75c93a29bc942ca36b31a4b634fe9" prot="public" static="no">
        <name>FMT_POWERS_OF_10</name>
        <param><defname>factor</defname></param>
        <initializer>factor * 10, \
  factor * 100, \
  factor * 1000, \
  factor * 10000, \
  factor * 100000, \
  factor * 1000000, \
  factor * 10000000, \
  factor * 100000000, \
  factor * 1000000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.cc" line="270" column="9" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.cc" bodystart="270" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="format_8cc_1a1ff0a5371c84bf66b6bb6f8b52068ef5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfmt_1_1internal_1_1_null" kindref="compound">fmt::internal::Null</ref></type>
        <definition>static fmt::internal::Null strerror_r</definition>
        <argsstring>(int, char *,...)</argsstring>
        <name>strerror_r</name>
        <param>
          <type><ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref></type>
        </param>
        <param>
          <type>char *</type>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.cc" line="75" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.cc" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="format_8cc_1ad45b7edc9a4d2e025688ea80c88b07b3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfmt_1_1internal_1_1_null" kindref="compound">fmt::internal::Null</ref></type>
        <definition>static fmt::internal::Null strerror_s</definition>
        <argsstring>(char *, std::size_t,...)</argsstring>
        <name>strerror_s</name>
        <param>
          <type>char *</type>
        </param>
        <param>
          <type>std::size_t</type>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jmacey/NGL/include/ngl/fmt/format.cc" line="78" column="1" bodyfile="/Users/jmacey/NGL/include/ngl/fmt/format.cc" bodystart="78" bodyend="80"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>Formatting<sp/>library<sp/>for<sp/>C++</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>Copyright<sp/>(c)<sp/>2012<sp/>-<sp/>2016,<sp/>Victor<sp/>Zverovich</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="format_8h" kindref="compound">fmt/format.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="printf_8h" kindref="compound">fmt/printf.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="string_8h" kindref="compound">string.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cctype&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cerrno&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;climits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdarg&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>std::ptrdiff_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)<sp/>&amp;&amp;<sp/>defined(__MINGW32__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_WINDOWS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(NOMINMAX)<sp/>||<sp/>defined(FMT_WIN_MINMAX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>NOMINMAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>NOMINMAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">fmt::internal::Arg</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_TRY<sp/>try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_CATCH(x)<sp/>catch<sp/>(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="format_8cc_1a4aa79926398ee27fe7d6db8b0dd54edf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_TRY<sp/>if<sp/>(true)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="format_8cc_1ab8efe0100a6d7cc74729f5bf7537799c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_CATCH(x)<sp/>if<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(disable:<sp/>4127)<sp/><sp/>//<sp/>conditional<sp/>expression<sp/>is<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(disable:<sp/>4702)<sp/><sp/>//<sp/>unreachable<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Disable<sp/>deprecation<sp/>warning<sp/>for<sp/>strerror.<sp/>The<sp/>latter<sp/>is<sp/>not<sp/>called<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>fails<sp/>to<sp/>detect<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(disable:<sp/>4996)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dummy<sp/>implementations<sp/>of<sp/>strerror_r<sp/>and<sp/>strerror_s<sp/>called<sp/>if<sp/>corresponding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>system<sp/>functions<sp/>are<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="format_8cc_1a1ff0a5371c84bf66b6bb6f8b52068ef5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_null" kindref="compound">fmt::internal::Null&lt;&gt;</ref><sp/><ref refid="format_8cc_1a1ff0a5371c84bf66b6bb6f8b52068ef5" kindref="member">strerror_r</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_null" kindref="compound">fmt::internal::Null&lt;&gt;</ref>();</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78" refid="format_8cc_1ad45b7edc9a4d2e025688ea80c88b07b3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_null" kindref="compound">fmt::internal::Null&lt;&gt;</ref><sp/><ref refid="format_8cc_1ad45b7edc9a4d2e025688ea80c88b07b3" kindref="member">strerror_s</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>std::size_t,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_null" kindref="compound">fmt::internal::Null&lt;&gt;</ref>();</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="namespacefmt" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefmt" kindref="compound">fmt</ref><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="classfmt_1_1internal_1_1_runtime_error_1ac9dcb69c5c54f65d2ae0433ed0b32106" refkind="member"><highlight class="normal"><ref refid="format_8h_1a02c8898388e0ae59aab58be14fcd4e05" kindref="member">FMT_FUNC</ref><sp/><ref refid="classfmt_1_1internal_1_1_runtime_error_1ac9dcb69c5c54f65d2ae0433ed0b32106" kindref="member">internal::RuntimeError::~RuntimeError</ref>()<sp/>throw()<sp/>{}</highlight></codeline>
<codeline lineno="85" refid="classfmt_1_1_format_error_1aeae25b349cd2dc682f9b29476d82462b" refkind="member"><highlight class="normal"><ref refid="format_8h_1a02c8898388e0ae59aab58be14fcd4e05" kindref="member">FMT_FUNC</ref><sp/><ref refid="classfmt_1_1_format_error_1aeae25b349cd2dc682f9b29476d82462b" kindref="member">FormatError::~FormatError</ref>()<sp/>throw()<sp/>{}</highlight></codeline>
<codeline lineno="86" refid="classfmt_1_1_system_error_1a9024f2cbb0ef38f45a4c2412cf3739fb" refkind="member"><highlight class="normal"><ref refid="format_8h_1a02c8898388e0ae59aab58be14fcd4e05" kindref="member">FMT_FUNC</ref><sp/><ref refid="classfmt_1_1_system_error_1a9024f2cbb0ef38f45a4c2412cf3739fb" kindref="member">SystemError::~SystemError</ref>()<sp/>throw()<sp/>{}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="format_8cc_1a9a9bb3caa94066b3adc175bb24cb1783" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_SNPRINTF<sp/>snprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/>//<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fmt_snprintf(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="glew_8h_1a6c0f527f003707dfaca177b40f406ed9" kindref="member">buffer</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="glew_8h_1a1e3b09934060e9d373139c3557730d37" kindref="member">format</ref>,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>va_list<sp/>args;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>va_start(args,<sp/>format);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a5fb5836a37f7607602a16ad733ed6357" kindref="member">result</ref><sp/>=<sp/>vsnprintf_s(buffer,<sp/>size,<sp/>_TRUNCATE,<sp/>format,<sp/>args);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a5fb5836a37f7607602a16ad733ed6357" kindref="member">result</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_SNPRINTF<sp/>fmt_snprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)<sp/>&amp;&amp;<sp/>defined(__MINGW32__)<sp/>&amp;&amp;<sp/>!defined(__NO_ISOCEXT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_SWPRINTF<sp/>snwprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="format_8cc_1a7b59f9b149f610d3edd05ed99536253c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FMT_SWPRINTF<sp/>swprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>defined(_WIN32)<sp/>&amp;&amp;<sp/>defined(__MINGW32__)<sp/>&amp;&amp;<sp/>!defined(__NO_ISOCEXT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>RESET_COLOR[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\x1b[0m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a1659df18b3b413a60a397d5a7540f3d2" kindref="member">void</ref><sp/>(*FormatFunc)(<ref refid="class_writer" kindref="compound">Writer</ref><sp/>&amp;,<sp/><ref refid="wglew_8h_1a500a82aecba06f4550f6849b8099ca21" kindref="member">int</ref>,<sp/><ref refid="namespacefmt_1ae5ed3b29f911650a12b4de3d14126c31" kindref="member">StringRef</ref>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Portable<sp/>thread-safe<sp/>version<sp/>of<sp/>strerror.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>buffer<sp/>to<sp/>point<sp/>to<sp/>a<sp/>string<sp/>describing<sp/>the<sp/>error<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>can<sp/>be<sp/>either<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>string<sp/>stored<sp/>in<sp/>buffer,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>a<sp/>pointer<sp/>to<sp/>some<sp/>static<sp/>immutable<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>one<sp/>of<sp/>the<sp/>following<sp/>values:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>success</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ERANGE<sp/>-<sp/>buffer<sp/>is<sp/>not<sp/>large<sp/>enough<sp/>to<sp/>store<sp/>the<sp/>error<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>other<sp/><sp/>-<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Buffer<sp/>should<sp/>be<sp/>at<sp/>least<sp/>of<sp/>size<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>safe_strerror(</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*&amp;<ref refid="glew_8h_1a6c0f527f003707dfaca177b40f406ed9" kindref="member">buffer</ref>,<sp/>std::size_t<sp/>buffer_size)<sp/><ref refid="format_8h_1aef128913e8400683b1cbd1a3a2e11df3" kindref="member">FMT_NOEXCEPT</ref><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a03e7ee720f43adc7d83c652a6a5dd5f8" kindref="member">FMT_ASSERT</ref>(<ref refid="glew_8h_1a6c0f527f003707dfaca177b40f406ed9" kindref="member">buffer</ref><sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>buffer_size<sp/>!=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">StrError<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code_;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*&amp;buffer_;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>buffer_size_;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>noop<sp/>assignment<sp/>operator<sp/>to<sp/>avoid<sp/>bogus<sp/>warnings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StrError<sp/>&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>the<sp/>result<sp/>of<sp/>XSI-compliant<sp/>version<sp/>of<sp/>strerror_r.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>handle(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a5fb5836a37f7607602a16ad733ed6357" kindref="member">result</ref>)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>glibc<sp/>versions<sp/>before<sp/>2.13<sp/>return<sp/>result<sp/>in<sp/>errno.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result<sp/>==<sp/>-1<sp/>?<sp/>errno<sp/>:<sp/><ref refid="glew_8h_1a5fb5836a37f7607602a16ad733ed6357" kindref="member">result</ref>;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>the<sp/>result<sp/>of<sp/>GNU-specific<sp/>version<sp/>of<sp/>strerror_r.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>handle(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="glew_8h_1a7b6161cffb9b8aee272b3b916183d28c" kindref="member">message</ref>)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>buffer<sp/>is<sp/>full<sp/>then<sp/>the<sp/>message<sp/>is<sp/>probably<sp/>truncated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message<sp/>==<sp/>buffer_<sp/>&amp;&amp;<sp/>strlen(buffer_)<sp/>==<sp/>buffer_size_<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ERANGE;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer_<sp/>=<sp/><ref refid="glew_8h_1a7b6161cffb9b8aee272b3b916183d28c" kindref="member">message</ref>;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>the<sp/>case<sp/>when<sp/>strerror_r<sp/>is<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>handle(internal::Null&lt;&gt;)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fallback(<ref refid="format_8cc_1ad45b7edc9a4d2e025688ea80c88b07b3" kindref="member">strerror_s</ref>(buffer_,<sp/>buffer_size_,<sp/>error_code_));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fallback<sp/>to<sp/>strerror_s<sp/>when<sp/>strerror_r<sp/>is<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fallback(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>buffer<sp/>is<sp/>full<sp/>then<sp/>the<sp/>message<sp/>is<sp/>probably<sp/>truncated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>strlen(buffer_)<sp/>==<sp/>buffer_size_<sp/>-<sp/>1<sp/>?</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERANGE<sp/>:<sp/><ref refid="glew_8h_1a5fb5836a37f7607602a16ad733ed6357" kindref="member">result</ref>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fallback<sp/>to<sp/>strerror<sp/>if<sp/>strerror_r<sp/>and<sp/>strerror_s<sp/>are<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fallback(internal::Null&lt;&gt;)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer_<sp/>=<sp/>strerror(error_code_);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>errno;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>StrError(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err_code,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*&amp;<ref refid="glew_8h_1ad8a8baf08bc0399738960c9259571911" kindref="member">buf</ref>,<sp/>std::size_t<sp/>buf_size)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>error_code_(err_code),<sp/>buffer_(buf),<sp/>buffer_size_(buf_size)<sp/>{}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>run()<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8cc_1a1ff0a5371c84bf66b6bb6f8b52068ef5" kindref="member">strerror_r</ref>(0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>Suppress<sp/>a<sp/>warning<sp/>about<sp/>unused<sp/>strerror_r.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle(<ref refid="format_8cc_1a1ff0a5371c84bf66b6bb6f8b52068ef5" kindref="member">strerror_r</ref>(error_code_,<sp/>buffer_,<sp/>buffer_size_));</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StrError(error_code,<sp/><ref refid="glew_8h_1a6c0f527f003707dfaca177b40f406ed9" kindref="member">buffer</ref>,<sp/>buffer_size).run();</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>format_error_code(Writer<sp/>&amp;out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1ae5ed3b29f911650a12b4de3d14126c31" kindref="member">StringRef</ref><sp/><ref refid="glew_8h_1a7b6161cffb9b8aee272b3b916183d28c" kindref="member">message</ref>)<sp/><ref refid="format_8h_1aef128913e8400683b1cbd1a3a2e11df3" kindref="member">FMT_NOEXCEPT</ref><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Report<sp/>error<sp/>code<sp/>making<sp/>sure<sp/>that<sp/>the<sp/>output<sp/>fits<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>INLINE_BUFFER_SIZE<sp/>to<sp/>avoid<sp/>dynamic<sp/>memory<sp/>allocation<sp/>and<sp/>potential</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>bad_alloc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>out.clear();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>SEP[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ERROR_STR[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;error<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>2<sp/>to<sp/>account<sp/>for<sp/>terminating<sp/>null<sp/>characters<sp/>in<sp/>SEP<sp/>and<sp/>ERROR_STR.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>std::size_t<sp/>error_code_size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(SEP)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ERROR_STR)<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>internal::IntTraits&lt;int&gt;::MainType<sp/>MainType;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>MainType<sp/>abs_value<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">MainType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(error_code);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacefmt_1_1internal_1a310d44c09812f7990e50800808c04673" kindref="member">internal::is_negative</ref>(error_code))<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>abs_value<sp/>=<sp/>0<sp/>-<sp/>abs_value;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>++error_code_size;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>error_code_size<sp/>+=<sp/><ref refid="namespacefmt_1_1internal_1abfe52e52001fd2590fb2015cefe95e18" kindref="member">internal::count_digits</ref>(abs_value);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message.size()<sp/>&lt;=<sp/><ref refid="namespacefmt_1_1internal_1a855d655a8b82a933597acb9eee31b1a3abf58574b3f45959f076968509372a2fa" kindref="member">internal::INLINE_BUFFER_SIZE</ref><sp/>-<sp/>error_code_size)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>message<sp/>&lt;&lt;<sp/>SEP;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>out<sp/>&lt;&lt;<sp/>ERROR_STR<sp/>&lt;&lt;<sp/>error_code;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>assert(out.size()<sp/>&lt;=<sp/><ref refid="namespacefmt_1_1internal_1a855d655a8b82a933597acb9eee31b1a3abf58574b3f45959f076968509372a2fa" kindref="member">internal::INLINE_BUFFER_SIZE</ref>);</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>report_error(FormatFunc<sp/>func,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1ae5ed3b29f911650a12b4de3d14126c31" kindref="member">StringRef</ref><sp/>message)<sp/><ref refid="format_8h_1aef128913e8400683b1cbd1a3a2e11df3" kindref="member">FMT_NOEXCEPT</ref><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><ref refid="namespacefmt_1a89c1f31e0358aa86f99b9f24d2149ae6" kindref="member">MemoryWriter</ref><sp/>full_message;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>func(full_message,<sp/>error_code,<sp/>message);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>Writer::data<sp/>instead<sp/>of<sp/>Writer::c_str<sp/>to<sp/>avoid<sp/>potential<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>allocation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>std::fwrite(full_message.data(),<sp/>full_message.size(),<sp/>1,<sp/>stderr);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>std::fputc(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">,<sp/>stderr);</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="namespacefmt_1_1internal" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceinternal" kindref="compound">internal</ref><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>method<sp/>is<sp/>used<sp/>to<sp/>preserve<sp/>binary<sp/>compatibility<sp/>with<sp/>fmt<sp/>3.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>can<sp/>be<sp/>removed<sp/>in<sp/>4.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="namespacefmt_1_1internal_1a74db7f6993170e499037cdf7708a3957" refkind="member"><highlight class="normal"><ref refid="format_8h_1a02c8898388e0ae59aab58be14fcd4e05" kindref="member">FMT_FUNC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1a74db7f6993170e499037cdf7708a3957" kindref="member">format_system_error</ref>(</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">Writer</ref><sp/>&amp;out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code,<sp/><ref refid="classfmt_1_1_basic_string_ref" kindref="compound">StringRef</ref><sp/><ref refid="glew_8h_1a7b6161cffb9b8aee272b3b916183d28c" kindref="member">message</ref>)<sp/><ref refid="format_8h_1aef128913e8400683b1cbd1a3a2e11df3" kindref="member">FMT_NOEXCEPT</ref><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><ref refid="namespacefmt_1a55e659be843597392ab8621a093a0182" kindref="member">fmt::format_system_error</ref>(out,<sp/>error_code,<sp/><ref refid="glew_8h_1a7b6161cffb9b8aee272b3b916183d28c" kindref="member">message</ref>);</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225" refid="classfmt_1_1_system_error_1af42143a0f75c3a962fbe9329cd66720f" refkind="member"><highlight class="normal"><ref refid="format_8h_1a02c8898388e0ae59aab58be14fcd4e05" kindref="member">FMT_FUNC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_system_error_1af42143a0f75c3a962fbe9329cd66720f" kindref="member">SystemError::init</ref>(</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err_code,<sp/><ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">CStringRef</ref><sp/>format_str,<sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>error_code_<sp/>=<sp/>err_code;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_memory_writer" kindref="compound">MemoryWriter</ref><sp/><ref refid="glew_8h_1a433584688554d9a05d22844c39473968" kindref="member">w</ref>;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><ref refid="namespacefmt_1_1internal_1a74db7f6993170e499037cdf7708a3957" kindref="member">format_system_error</ref>(w,<sp/>err_code,<sp/><ref refid="namespacefmt_1a638f25c535b3bfa12dc1478b11885b6f" kindref="member">format</ref>(format_str,<sp/>args));</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>std::runtime_error<sp/>&amp;base<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>base<sp/>=<sp/>std::runtime_error(w.<ref refid="classfmt_1_1_basic_writer_1a91f06ced6e063ee77a99740e0e79faf6" kindref="member">str</ref>());</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="235" refid="classfmt_1_1internal_1_1_char_traits_3_01char_01_4_1a378a229c5a4846ffa8f4eb119534a002" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_char_traits" kindref="compound">internal::CharTraits&lt;char&gt;::format_float</ref>(</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="glew_8h_1a6c0f527f003707dfaca177b40f406ed9" kindref="member">buffer</ref>,<sp/>std::size_t<sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="glew_8h_1a1e3b09934060e9d373139c3557730d37" kindref="member">format</ref>,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1aa105b18f96e6bc2485cb7f576a7fb9ba" kindref="member">width</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1ae6165268264b393d031f89082216499d" kindref="member">precision</ref>,<sp/>T<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>precision<sp/>&lt;<sp/>0<sp/>?</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8cc_1a9a9bb3caa94066b3adc175bb24cb1783" kindref="member">FMT_SNPRINTF</ref>(buffer,<sp/>size,<sp/>format,<sp/>value)<sp/>:</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8cc_1a9a9bb3caa94066b3adc175bb24cb1783" kindref="member">FMT_SNPRINTF</ref>(buffer,<sp/>size,<sp/>format,<sp/>precision,<sp/>value);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>precision<sp/>&lt;<sp/>0<sp/>?</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8cc_1a9a9bb3caa94066b3adc175bb24cb1783" kindref="member">FMT_SNPRINTF</ref>(buffer,<sp/>size,<sp/>format,<sp/>width,<sp/>value)<sp/>:</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8cc_1a9a9bb3caa94066b3adc175bb24cb1783" kindref="member">FMT_SNPRINTF</ref>(buffer,<sp/>size,<sp/>format,<sp/>width,<sp/>precision,<sp/>value);</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="249" refid="classfmt_1_1internal_1_1_char_traits_3_01wchar__t_01_4_1aed134df338cc820d428797528dab4666" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_char_traits" kindref="compound">internal::CharTraits&lt;wchar_t&gt;::format_float</ref>(</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*<ref refid="glew_8h_1a6c0f527f003707dfaca177b40f406ed9" kindref="member">buffer</ref>,<sp/>std::size_t<sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*<ref refid="glew_8h_1a1e3b09934060e9d373139c3557730d37" kindref="member">format</ref>,</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1aa105b18f96e6bc2485cb7f576a7fb9ba" kindref="member">width</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1ae6165268264b393d031f89082216499d" kindref="member">precision</ref>,<sp/>T<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>precision<sp/>&lt;<sp/>0<sp/>?</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8cc_1a7b59f9b149f610d3edd05ed99536253c" kindref="member">FMT_SWPRINTF</ref>(buffer,<sp/>size,<sp/>format,<sp/>value)<sp/>:</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8cc_1a7b59f9b149f610d3edd05ed99536253c" kindref="member">FMT_SWPRINTF</ref>(buffer,<sp/>size,<sp/>format,<sp/>precision,<sp/>value);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>precision<sp/>&lt;<sp/>0<sp/>?</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8cc_1a7b59f9b149f610d3edd05ed99536253c" kindref="member">FMT_SWPRINTF</ref>(buffer,<sp/>size,<sp/>format,<sp/>width,<sp/>value)<sp/>:</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8cc_1a7b59f9b149f610d3edd05ed99536253c" kindref="member">FMT_SWPRINTF</ref>(buffer,<sp/>size,<sp/>format,<sp/>width,<sp/>precision,<sp/>value);</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_basic_data" kindref="compound">internal::BasicData&lt;T&gt;::DIGITS</ref>[]<sp/>=</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;0001020304050607080910111213141516171819&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;2021222324252627282930313233343536373839&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;4041424344454647484950515253545556575859&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;6061626364656667686970717273747576777879&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;8081828384858687888990919293949596979899&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="format_8cc_1aeff75c93a29bc942ca36b31a4b634fe9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_POWERS_OF_10(factor)<sp/>\</highlight></codeline>
<codeline lineno="271"><highlight class="preprocessor"><sp/><sp/>factor<sp/>*<sp/>10,<sp/>\</highlight></codeline>
<codeline lineno="272"><highlight class="preprocessor"><sp/><sp/>factor<sp/>*<sp/>100,<sp/>\</highlight></codeline>
<codeline lineno="273"><highlight class="preprocessor"><sp/><sp/>factor<sp/>*<sp/>1000,<sp/>\</highlight></codeline>
<codeline lineno="274"><highlight class="preprocessor"><sp/><sp/>factor<sp/>*<sp/>10000,<sp/>\</highlight></codeline>
<codeline lineno="275"><highlight class="preprocessor"><sp/><sp/>factor<sp/>*<sp/>100000,<sp/>\</highlight></codeline>
<codeline lineno="276"><highlight class="preprocessor"><sp/><sp/>factor<sp/>*<sp/>1000000,<sp/>\</highlight></codeline>
<codeline lineno="277"><highlight class="preprocessor"><sp/><sp/>factor<sp/>*<sp/>10000000,<sp/>\</highlight></codeline>
<codeline lineno="278"><highlight class="preprocessor"><sp/><sp/>factor<sp/>*<sp/>100000000,<sp/>\</highlight></codeline>
<codeline lineno="279"><highlight class="preprocessor"><sp/><sp/>factor<sp/>*<sp/>1000000000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/><ref refid="structfmt_1_1internal_1_1_basic_data_1abbc4c0076211263be3f19cce9655caf7" kindref="member">internal::BasicData&lt;T&gt;::POWERS_OF_10_32</ref>[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>0,<sp/><ref refid="format_8cc_1aeff75c93a29bc942ca36b31a4b634fe9" kindref="member">FMT_POWERS_OF_10</ref>(1)</highlight></codeline>
<codeline lineno="284"><highlight class="normal">};</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/><ref refid="structfmt_1_1internal_1_1_basic_data_1a5f4f238cffad6816fbdc621e96b0e1d2" kindref="member">internal::BasicData&lt;T&gt;::POWERS_OF_10_64</ref>[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>0,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><ref refid="format_8cc_1aeff75c93a29bc942ca36b31a4b634fe9" kindref="member">FMT_POWERS_OF_10</ref>(1),</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><ref refid="format_8cc_1aeff75c93a29bc942ca36b31a4b634fe9" kindref="member">FMT_POWERS_OF_10</ref>(<ref refid="namespacefmt_1af495ed85910212d4ba243ae2a8ce8f1f" kindref="member">ULongLong</ref>(1000000000)),</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>several<sp/>constants<sp/>instead<sp/>of<sp/>using<sp/>a<sp/>single<sp/>long<sp/>long<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>avoid<sp/>warnings<sp/>about<sp/>C++98<sp/>not<sp/>supporting<sp/>long<sp/>long.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><ref refid="namespacefmt_1af495ed85910212d4ba243ae2a8ce8f1f" kindref="member">ULongLong</ref>(1000000000)<sp/>*<sp/><ref refid="namespacefmt_1af495ed85910212d4ba243ae2a8ce8f1f" kindref="member">ULongLong</ref>(1000000000)<sp/>*<sp/>10</highlight></codeline>
<codeline lineno="294"><highlight class="normal">};</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296" refid="namespacefmt_1_1internal_1a92bdabe812efd23c6f9686ddd6a7805f" refkind="member"><highlight class="normal"><ref refid="format_8h_1a02c8898388e0ae59aab58be14fcd4e05" kindref="member">FMT_FUNC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1a92bdabe812efd23c6f9686ddd6a7805f" kindref="member">internal::report_unknown_type</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="glew_8h_1a8d78e2e8a676abd547a596dd84811285" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>(<ref refid="glew_8h_1a1659df18b3b413a60a397d5a7540f3d2" kindref="member">void</ref>)type;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::isprint(static_cast&lt;unsigned<sp/>char&gt;(code)))<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1a638f25c535b3bfa12dc1478b11885b6f" kindref="member">format</ref>(</highlight><highlight class="stringliteral">&quot;unknown<sp/>format<sp/>code<sp/>&apos;{}&apos;<sp/>for<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>code,<sp/>type)));</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1a638f25c535b3bfa12dc1478b11885b6f" kindref="member">format</ref>(</highlight><highlight class="stringliteral">&quot;unknown<sp/>format<sp/>code<sp/>&apos;\\x{:02x}&apos;<sp/>for<sp/>{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;unsigned&gt;(code),<sp/>type)));</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_WINDOWS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><ref refid="format_8h_1a02c8898388e0ae59aab58be14fcd4e05" kindref="member">FMT_FUNC</ref><sp/>internal::UTF8ToUTF16::UTF8ToUTF16(<ref refid="classfmt_1_1_basic_string_ref" kindref="compound">StringRef</ref><sp/><ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ERROR_MSG[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>convert<sp/>string<sp/>from<sp/>UTF-8<sp/>to<sp/>UTF-16&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.<ref refid="classfmt_1_1_basic_string_ref_1ae38d9106dd5bec69488e5464aedc266a" kindref="member">size</ref>()<sp/>&gt;<sp/>INT_MAX)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(WindowsError(ERROR_INVALID_PARAMETER,<sp/>ERROR_MSG));</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s_size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s.<ref refid="classfmt_1_1_basic_string_ref_1ae38d9106dd5bec69488e5464aedc266a" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a921fa83f7755f0139c84ba1831417a2e" kindref="member">length</ref><sp/>=<sp/>MultiByteToWideChar(</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CP_UTF8,<sp/>MB_ERR_INVALID_CHARS,<sp/>s.<ref refid="classfmt_1_1_basic_string_ref_1ae9c80502c527437215fe1c11dca8b475" kindref="member">data</ref>(),<sp/>s_size,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(WindowsError(GetLastError(),<sp/>ERROR_MSG));</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>buffer_.resize(length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>length<sp/>=<sp/>MultiByteToWideChar(</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>CP_UTF8,<sp/>MB_ERR_INVALID_CHARS,<sp/>s.<ref refid="classfmt_1_1_basic_string_ref_1ae9c80502c527437215fe1c11dca8b475" kindref="member">data</ref>(),<sp/>s_size,<sp/>&amp;buffer_[0],<sp/><ref refid="glew_8h_1a921fa83f7755f0139c84ba1831417a2e" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(WindowsError(GetLastError(),<sp/>ERROR_MSG));</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>buffer_[<ref refid="glew_8h_1a921fa83f7755f0139c84ba1831417a2e" kindref="member">length</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><ref refid="format_8h_1a02c8898388e0ae59aab58be14fcd4e05" kindref="member">FMT_FUNC</ref><sp/>internal::UTF16ToUTF8::UTF16ToUTF8(<ref refid="classfmt_1_1_basic_string_ref" kindref="compound">WStringRef</ref><sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code<sp/>=<sp/><ref refid="namespacefmt_1_1internal_1aedce4aeaa89239024c67c7682cff3370" kindref="member">convert</ref>(s))<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(WindowsError(error_code,</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>convert<sp/>string<sp/>from<sp/>UTF-16<sp/>to<sp/>UTF-8&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><ref refid="format_8h_1a02c8898388e0ae59aab58be14fcd4e05" kindref="member">FMT_FUNC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1aedce4aeaa89239024c67c7682cff3370" kindref="member">internal::UTF16ToUTF8::convert</ref>(<ref refid="classfmt_1_1_basic_string_ref" kindref="compound">WStringRef</ref><sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.<ref refid="classfmt_1_1_basic_string_ref_1ae38d9106dd5bec69488e5464aedc266a" kindref="member">size</ref>()<sp/>&gt;<sp/>INT_MAX)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ERROR_INVALID_PARAMETER;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s_size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s.<ref refid="classfmt_1_1_basic_string_ref_1ae38d9106dd5bec69488e5464aedc266a" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a921fa83f7755f0139c84ba1831417a2e" kindref="member">length</ref><sp/>=<sp/>WideCharToMultiByte(CP_UTF8,<sp/>0,<sp/>s.<ref refid="classfmt_1_1_basic_string_ref_1ae9c80502c527437215fe1c11dca8b475" kindref="member">data</ref>(),<sp/>s_size,<sp/>0,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetLastError();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>buffer_.resize(length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>length<sp/>=<sp/>WideCharToMultiByte(</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>CP_UTF8,<sp/>0,<sp/>s.<ref refid="classfmt_1_1_basic_string_ref_1ae9c80502c527437215fe1c11dca8b475" kindref="member">data</ref>(),<sp/>s_size,<sp/>&amp;buffer_[0],<sp/><ref refid="glew_8h_1a921fa83f7755f0139c84ba1831417a2e" kindref="member">length</ref>,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetLastError();</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>buffer_[<ref refid="glew_8h_1a921fa83f7755f0139c84ba1831417a2e" kindref="member">length</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><ref refid="format_8h_1a02c8898388e0ae59aab58be14fcd4e05" kindref="member">FMT_FUNC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WindowsError::init(</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err_code,<sp/><ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">CStringRef</ref><sp/>format_str,<sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>error_code_<sp/>=<sp/>err_code;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_memory_writer" kindref="compound">MemoryWriter</ref><sp/><ref refid="glew_8h_1a433584688554d9a05d22844c39473968" kindref="member">w</ref>;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>internal::format_windows_error(w,<sp/>err_code,<sp/><ref refid="namespacefmt_1a638f25c535b3bfa12dc1478b11885b6f" kindref="member">format</ref>(format_str,<sp/>args));</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>std::runtime_error<sp/>&amp;base<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>base<sp/>=<sp/>std::runtime_error(w.<ref refid="classfmt_1_1_basic_writer_1a91f06ced6e063ee77a99740e0e79faf6" kindref="member">str</ref>());</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><ref refid="format_8h_1a02c8898388e0ae59aab58be14fcd4e05" kindref="member">FMT_FUNC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>internal::format_windows_error(</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">Writer</ref><sp/>&amp;out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code,<sp/><ref refid="classfmt_1_1_basic_string_ref" kindref="compound">StringRef</ref><sp/><ref refid="glew_8h_1a7b6161cffb9b8aee272b3b916183d28c" kindref="member">message</ref>)<sp/><ref refid="format_8h_1aef128913e8400683b1cbd1a3a2e11df3" kindref="member">FMT_NOEXCEPT</ref><sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><ref refid="format_8cc_1a4aa79926398ee27fe7d6db8b0dd54edf" kindref="member">FMT_TRY</ref><sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfmt_1_1internal_1_1_memory_buffer" kindref="compound">MemoryBuffer&lt;wchar_t, INLINE_BUFFER_SIZE&gt;</ref><sp/><ref refid="glew_8h_1a6c0f527f003707dfaca177b40f406ed9" kindref="member">buffer</ref>;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer.<ref refid="classfmt_1_1_buffer_1a20f893164dc20e8ea8c77810d4ea8d59" kindref="member">resize</ref>(<ref refid="namespacefmt_1_1internal_1a855d655a8b82a933597acb9eee31b1a3abf58574b3f45959f076968509372a2fa" kindref="member">INLINE_BUFFER_SIZE</ref>);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*system_message<sp/>=<sp/>&amp;buffer[0];</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a5fb5836a37f7607602a16ad733ed6357" kindref="member">result</ref><sp/>=<sp/>FormatMessageW(FORMAT_MESSAGE_FROM_SYSTEM<sp/>|<sp/>FORMAT_MESSAGE_IGNORE_INSERTS,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>error_code,<sp/>MAKELANGID(LANG_NEUTRAL,<sp/>SUBLANG_DEFAULT),</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>system_message,<sp/>static_cast&lt;uint32_t&gt;(buffer.<ref refid="classfmt_1_1_buffer_1a14fa72f0ddf584c14ffffb1446f598aa" kindref="member">size</ref>()),<sp/>0);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTF16ToUTF8<sp/>utf8_message;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(utf8_message.convert(system_message)<sp/>==<sp/>ERROR_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>utf8_message;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetLastError()<sp/>!=<sp/>ERROR_INSUFFICIENT_BUFFER)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Can&apos;t<sp/>get<sp/>error<sp/>message,<sp/>report<sp/>error<sp/>code<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer.<ref refid="classfmt_1_1_buffer_1a20f893164dc20e8ea8c77810d4ea8d59" kindref="member">resize</ref>(buffer.<ref refid="classfmt_1_1_buffer_1a14fa72f0ddf584c14ffffb1446f598aa" kindref="member">size</ref>()<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="format_8cc_1ab8efe0100a6d7cc74729f5bf7537799c" kindref="member">FMT_CATCH</ref>(...)<sp/>{}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>fmt::format_error_code(out,<sp/>error_code,<sp/>message);<sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;fmt::&apos;<sp/>is<sp/>for<sp/>bcc32.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>FMT_USE_WINDOWS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386" refid="namespacefmt_1a55e659be843597392ab8621a093a0182" refkind="member"><highlight class="normal"><ref refid="format_8h_1a02c8898388e0ae59aab58be14fcd4e05" kindref="member">FMT_FUNC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1_1internal_1a74db7f6993170e499037cdf7708a3957" kindref="member">format_system_error</ref>(</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">Writer</ref><sp/>&amp;out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code,<sp/><ref refid="classfmt_1_1_basic_string_ref" kindref="compound">StringRef</ref><sp/>message)<sp/><ref refid="format_8h_1aef128913e8400683b1cbd1a3a2e11df3" kindref="member">FMT_NOEXCEPT</ref><sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><ref refid="format_8cc_1a4aa79926398ee27fe7d6db8b0dd54edf" kindref="member">FMT_TRY</ref><sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfmt_1_1internal_1_1_memory_buffer" kindref="compound">internal::MemoryBuffer&lt;char, internal::INLINE_BUFFER_SIZE&gt;</ref><sp/><ref refid="glew_8h_1a6c0f527f003707dfaca177b40f406ed9" kindref="member">buffer</ref>;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer.<ref refid="classfmt_1_1_buffer_1a20f893164dc20e8ea8c77810d4ea8d59" kindref="member">resize</ref>(<ref refid="namespacefmt_1_1internal_1a855d655a8b82a933597acb9eee31b1a3abf58574b3f45959f076968509372a2fa" kindref="member">internal::INLINE_BUFFER_SIZE</ref>);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*system_message<sp/>=<sp/>&amp;buffer[0];</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a5fb5836a37f7607602a16ad733ed6357" kindref="member">result</ref><sp/>=<sp/>safe_strerror(error_code,<sp/>system_message,<sp/>buffer.<ref refid="classfmt_1_1_buffer_1a14fa72f0ddf584c14ffffb1446f598aa" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>system_message;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/>ERANGE)</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Can&apos;t<sp/>get<sp/>error<sp/>message,<sp/>report<sp/>error<sp/>code<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer.<ref refid="classfmt_1_1_buffer_1a20f893164dc20e8ea8c77810d4ea8d59" kindref="member">resize</ref>(buffer.<ref refid="classfmt_1_1_buffer_1a14fa72f0ddf584c14ffffb1446f598aa" kindref="member">size</ref>()<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="format_8cc_1ab8efe0100a6d7cc74729f5bf7537799c" kindref="member">FMT_CATCH</ref>(...)<sp/>{}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>fmt::format_error_code(out,<sp/>error_code,<sp/>message);<sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;fmt::&apos;<sp/>is<sp/>for<sp/>bcc32.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="407" refid="classfmt_1_1internal_1_1_arg_map_1aba1e77b1b5358a8e354acae3d71ea6cf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_arg_map_1aba1e77b1b5358a8e354acae3d71ea6cf" kindref="member">internal::ArgMap&lt;Char&gt;::init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>&amp;args)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!map_.empty())</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_named_arg" kindref="compound">internal::NamedArg&lt;Char&gt;</ref><sp/><ref refid="structfmt_1_1internal_1_1_named_arg" kindref="compound">NamedArg</ref>;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NamedArg<sp/>*named_arg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_values<sp/>=</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args.<ref refid="classfmt_1_1_arg_list_1a1015fadc34dd0258eba1e7e64b8ec0ac" kindref="member">type</ref>(<ref refid="classfmt_1_1_arg_list_1a87b3fb5d620328ea293dff1e545ca6f0a0623031f26b6d8df9dc978c1e5a2bb16" kindref="member">ArgList::MAX_PACKED_ARGS</ref><sp/>-<sp/>1)<sp/>==<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa24ae26361d60b04790c06fffecaa7eda" kindref="member">internal::Arg::NONE</ref>;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_values)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight><highlight class="comment">/*nothing*/</highlight><highlight class="normal">;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaa" kindref="member">internal::Arg::Type</ref><sp/>arg_type<sp/>=<sp/>args.<ref refid="classfmt_1_1_arg_list_1a1015fadc34dd0258eba1e7e64b8ec0ac" kindref="member">type</ref>(i);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(arg_type)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa24ae26361d60b04790c06fffecaa7eda" kindref="member">internal::Arg::NONE</ref>:</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaaa9af5928e9c0951d7d4f644bc3cae639" kindref="member">internal::Arg::NAMED_ARG</ref>:</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named_arg<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">NamedArg*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(args.<ref refid="classfmt_1_1_arg_list_1a6d6ebb19d3418bc3bbb01e242056feaa" kindref="member">values_</ref>[i].<ref refid="structfmt_1_1internal_1_1_value_1a3627bcfa0a5bcb7e48f6fc632243b17d" kindref="member">pointer</ref>);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map_.push_back(<ref refid="classfmt_1_1internal_1_1_arg_map_1ac7eed76cbccf42349f65e88bf6a72bda" kindref="member">Pair</ref>(named_arg-&gt;<ref refid="structfmt_1_1internal_1_1_named_arg_1ab2e3ffba4fa9df8122ed586134eac2c9" kindref="member">name</ref>,<sp/>*named_arg));</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*nothing*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/><ref refid="classfmt_1_1_arg_list_1a87b3fb5d620328ea293dff1e545ca6f0a0623031f26b6d8df9dc978c1e5a2bb16" kindref="member">ArgList::MAX_PACKED_ARGS</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaa" kindref="member">internal::Arg::Type</ref><sp/>arg_type<sp/>=<sp/>args.<ref refid="classfmt_1_1_arg_list_1a1015fadc34dd0258eba1e7e64b8ec0ac" kindref="member">type</ref>(i);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg_type<sp/>==<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaaa9af5928e9c0951d7d4f644bc3cae639" kindref="member">internal::Arg::NAMED_ARG</ref>)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>named_arg<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">NamedArg*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(args.<ref refid="classfmt_1_1_arg_list_1ab80aa26ffd7abd8f4dec943bdf11efc0" kindref="member">args_</ref>[i].<ref refid="structfmt_1_1internal_1_1_value_1a3627bcfa0a5bcb7e48f6fc632243b17d" kindref="member">pointer</ref>);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>map_.push_back(<ref refid="classfmt_1_1internal_1_1_arg_map_1ac7eed76cbccf42349f65e88bf6a72bda" kindref="member">Pair</ref>(named_arg-&gt;<ref refid="structfmt_1_1internal_1_1_named_arg_1ab2e3ffba4fa9df8122ed586134eac2c9" kindref="member">name</ref>,<sp/>*named_arg));</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="classfmt_1_1_arg_list_1a87b3fb5d620328ea293dff1e545ca6f0a0623031f26b6d8df9dc978c1e5a2bb16" kindref="member">ArgList::MAX_PACKED_ARGS</ref>;</highlight><highlight class="comment">/*nothing*/</highlight><highlight class="normal">;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(args.<ref refid="classfmt_1_1_arg_list_1ab80aa26ffd7abd8f4dec943bdf11efc0" kindref="member">args_</ref>[i].<ref refid="structfmt_1_1internal_1_1_arg_1af1165b4e8647bea5913922de82599e2e" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa24ae26361d60b04790c06fffecaa7eda" kindref="member">internal::Arg::NONE</ref>:</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaaa9af5928e9c0951d7d4f644bc3cae639" kindref="member">internal::Arg::NAMED_ARG</ref>:</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>named_arg<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">NamedArg*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(args.<ref refid="classfmt_1_1_arg_list_1ab80aa26ffd7abd8f4dec943bdf11efc0" kindref="member">args_</ref>[i].<ref refid="structfmt_1_1internal_1_1_value_1a3627bcfa0a5bcb7e48f6fc632243b17d" kindref="member">pointer</ref>);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>map_.push_back(<ref refid="classfmt_1_1internal_1_1_arg_map_1ac7eed76cbccf42349f65e88bf6a72bda" kindref="member">Pair</ref>(named_arg-&gt;<ref refid="structfmt_1_1internal_1_1_named_arg_1ab2e3ffba4fa9df8122ed586134eac2c9" kindref="member">name</ref>,<sp/>*named_arg));</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*nothing*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="452" refid="classfmt_1_1internal_1_1_fixed_buffer_1a90dc1dce4e8eac799d57ca519cfeb82d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_fixed_buffer_1a90dc1dce4e8eac799d57ca519cfeb82d" kindref="member">internal::FixedBuffer&lt;Char&gt;::grow</ref>(std::size_t)<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(std::runtime_error(</highlight><highlight class="stringliteral">&quot;buffer<sp/>overflow&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456" refid="classfmt_1_1internal_1_1_formatter_base_1ad902773ddc5de8777c046bb349781e1a" refkind="member"><highlight class="normal"><ref refid="format_8h_1a02c8898388e0ae59aab58be14fcd4e05" kindref="member">FMT_FUNC</ref><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">Arg</ref><sp/><ref refid="classfmt_1_1internal_1_1_formatter_base_1ad902773ddc5de8777c046bb349781e1a" kindref="member">internal::FormatterBase::do_get_arg</ref>(</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>arg_index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*&amp;error)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">Arg</ref><sp/><ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref><sp/>=<sp/>args_[arg_index];</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(arg.<ref refid="structfmt_1_1internal_1_1_arg_1af1165b4e8647bea5913922de82599e2e" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa24ae26361d60b04790c06fffecaa7eda" kindref="member">Arg::NONE</ref>:</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;argument<sp/>index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaaa9af5928e9c0951d7d4f644bc3cae639" kindref="member">Arg::NAMED_ARG</ref>:</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>arg<sp/>=<sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(arg.<ref refid="structfmt_1_1internal_1_1_value_1a3627bcfa0a5bcb7e48f6fc632243b17d" kindref="member">pointer</ref>);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*nothing*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>;</highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472" refid="namespacefmt_1a6ca15e6d89910192be15bddd428c3a17" refkind="member"><highlight class="normal"><ref refid="format_8h_1a02c8898388e0ae59aab58be14fcd4e05" kindref="member">FMT_FUNC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1a6ca15e6d89910192be15bddd428c3a17" kindref="member">report_system_error</ref>(</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code,<sp/><ref refid="classfmt_1_1_basic_string_ref" kindref="compound">fmt::StringRef</ref><sp/>message)<sp/><ref refid="format_8h_1aef128913e8400683b1cbd1a3a2e11df3" kindref="member">FMT_NOEXCEPT</ref><sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;fmt::&apos;<sp/>is<sp/>for<sp/>bcc32.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>report_error(<ref refid="namespacefmt_1_1internal_1a74db7f6993170e499037cdf7708a3957" kindref="member">format_system_error</ref>,<sp/>error_code,<sp/>message);</highlight></codeline>
<codeline lineno="476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_WINDOWS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><ref refid="format_8h_1a02c8898388e0ae59aab58be14fcd4e05" kindref="member">FMT_FUNC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>report_windows_error(</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code,<sp/><ref refid="classfmt_1_1_basic_string_ref" kindref="compound">fmt::StringRef</ref><sp/>message)<sp/><ref refid="format_8h_1aef128913e8400683b1cbd1a3a2e11df3" kindref="member">FMT_NOEXCEPT</ref><sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;fmt::&apos;<sp/>is<sp/>for<sp/>bcc32.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>report_error(internal::format_windows_error,<sp/>error_code,<sp/>message);</highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486" refid="namespacefmt_1adec465a02f79e1e023ec283fa6da9f13" refkind="member"><highlight class="normal"><ref refid="format_8h_1a02c8898388e0ae59aab58be14fcd4e05" kindref="member">FMT_FUNC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1adec465a02f79e1e023ec283fa6da9f13" kindref="member">print</ref>(std::FILE<sp/>*<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>,<sp/><ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">CStringRef</ref><sp/>format_str,<sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_memory_writer" kindref="compound">MemoryWriter</ref><sp/><ref refid="glew_8h_1a433584688554d9a05d22844c39473968" kindref="member">w</ref>;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>w.<ref refid="classfmt_1_1_basic_writer_1aaa83498c649d4a90ea3366bae62f4eac" kindref="member">write</ref>(format_str,<sp/>args);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>std::fwrite(w.<ref refid="classfmt_1_1_basic_writer_1a62d1c7b5be9c3580326320d5d178d096" kindref="member">data</ref>(),<sp/>1,<sp/>w.<ref refid="classfmt_1_1_basic_writer_1a1b6721b4ba4d3fa18ac781a36616cc2a" kindref="member">size</ref>(),<sp/><ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492" refid="namespacefmt_1a7d5857e54045ae471cfcee16e50dbe00" refkind="member"><highlight class="normal"><ref refid="format_8h_1a02c8898388e0ae59aab58be14fcd4e05" kindref="member">FMT_FUNC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1adec465a02f79e1e023ec283fa6da9f13" kindref="member">print</ref>(<ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">CStringRef</ref><sp/>format_str,<sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><ref refid="namespacefmt_1adec465a02f79e1e023ec283fa6da9f13" kindref="member">print</ref>(stdout,<sp/>format_str,<sp/>args);</highlight></codeline>
<codeline lineno="494"><highlight class="normal">}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496" refid="namespacefmt_1abf6b311b54f02ca8e4e2c3de4a563517" refkind="member"><highlight class="normal"><ref refid="format_8h_1a02c8898388e0ae59aab58be14fcd4e05" kindref="member">FMT_FUNC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1abf6b311b54f02ca8e4e2c3de4a563517" kindref="member">print_colored</ref>(<ref refid="namespacefmt_1ace617112a82e0f90aac9858ecb446c8a" kindref="member">Color</ref><sp/><ref refid="glew_8h_1ae0f40feefa74d9cb1721a009573cfce5" kindref="member">c</ref>,<sp/><ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">CStringRef</ref><sp/><ref refid="glew_8h_1a1e3b09934060e9d373139c3557730d37" kindref="member">format</ref>,<sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>escape[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\x1b[30m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>escape[3]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="glew_8h_1ae0f40feefa74d9cb1721a009573cfce5" kindref="member">c</ref>);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>std::fputs(escape,<sp/>stdout);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><ref refid="namespacefmt_1adec465a02f79e1e023ec283fa6da9f13" kindref="member">print</ref>(format,<sp/>args);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>std::fputs(RESET_COLOR,<sp/>stdout);</highlight></codeline>
<codeline lineno="502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1a0ee7afe0f2ddcd93b9e0e4549b9740ec" kindref="member">printf</ref>(<ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter&lt;Char&gt;</ref><sp/>&amp;<ref refid="glew_8h_1a433584688554d9a05d22844c39473968" kindref="member">w</ref>,<sp/><ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">BasicCStringRef&lt;Char&gt;</ref><sp/><ref refid="glew_8h_1a1e3b09934060e9d373139c3557730d37" kindref="member">format</ref>,<sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>args);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507" refid="namespacefmt_1a05a374d05d4f93470bb99170efed28c0" refkind="member"><highlight class="normal"><ref refid="format_8h_1a02c8898388e0ae59aab58be14fcd4e05" kindref="member">FMT_FUNC</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1a05a374d05d4f93470bb99170efed28c0" kindref="member">fprintf</ref>(std::FILE<sp/>*<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>,<sp/><ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">CStringRef</ref><sp/>format,<sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_memory_writer" kindref="compound">MemoryWriter</ref><sp/><ref refid="glew_8h_1a433584688554d9a05d22844c39473968" kindref="member">w</ref>;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><ref refid="namespacefmt_1a0ee7afe0f2ddcd93b9e0e4549b9740ec" kindref="member">printf</ref>(w,<sp/>format,<sp/>args);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>std::size_t<sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref><sp/>=<sp/>w.<ref refid="classfmt_1_1_basic_writer_1a1b6721b4ba4d3fa18ac781a36616cc2a" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::fwrite(w.<ref refid="classfmt_1_1_basic_writer_1a62d1c7b5be9c3580326320d5d178d096" kindref="member">data</ref>(),<sp/>1,<sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>,<sp/><ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>)<sp/>&lt;<sp/>size<sp/>?<sp/>-1<sp/>:<sp/>static_cast&lt;int&gt;(size);</highlight></codeline>
<codeline lineno="512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_HEADER_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_basic_data" kindref="compound">internal::BasicData&lt;void&gt;</ref>;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Explicit<sp/>instantiations<sp/>for<sp/>char.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_fixed_buffer_1a90dc1dce4e8eac799d57ca519cfeb82d" kindref="member">internal::FixedBuffer&lt;char&gt;::grow</ref>(std::size_t);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_arg_map_1aba1e77b1b5358a8e354acae3d71ea6cf" kindref="member">internal::ArgMap&lt;char&gt;::init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>&amp;args);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_printf_formatter_1a295c50e11b9a77720c8078f287040e5c" kindref="member">PrintfFormatter&lt;char&gt;::format</ref>(<ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">CStringRef</ref><sp/>format);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_char_traits" kindref="compound">internal::CharTraits&lt;char&gt;::format_float</ref>(</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="glew_8h_1a6c0f527f003707dfaca177b40f406ed9" kindref="member">buffer</ref>,<sp/>std::size_t<sp/><ref refid="glew_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1aa105b18f96e6bc2485cb7f576a7fb9ba" kindref="member">width</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1ae6165268264b393d031f89082216499d" kindref="member">precision</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>internal::CharTraits&lt;char&gt;::format_float(</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer,<sp/>std::size_t<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Explicit<sp/>instantiations<sp/>for<sp/>wchar_t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_fixed_buffer_1a90dc1dce4e8eac799d57ca519cfeb82d" kindref="member">internal::FixedBuffer&lt;wchar_t&gt;::grow</ref>(std::size_t);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_arg_map_1aba1e77b1b5358a8e354acae3d71ea6cf" kindref="member">internal::ArgMap&lt;wchar_t&gt;::init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>&amp;args);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_printf_formatter_1a295c50e11b9a77720c8078f287040e5c" kindref="member">PrintfFormatter&lt;wchar_t&gt;::format</ref>(<ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">WCStringRef</ref><sp/>format);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_char_traits" kindref="compound">internal::CharTraits&lt;wchar_t&gt;::format_float</ref>(</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*buffer,<sp/>std::size_t<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*format,</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>internal::CharTraits&lt;wchar_t&gt;::format_float(</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*buffer,<sp/>std::size_t<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*format,</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>FMT_HEADER_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>fmt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/jmacey/NGL/include/ngl/fmt/format.cc"/>
  </compounddef>
</doxygen>
