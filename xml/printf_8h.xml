<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="printf_8h" kind="file" language="C++">
    <compoundname>printf.h</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">limits</includes>
    <includes refid="ostream_8h" local="yes">fmt/ostream.h</includes>
    <includedby refid="format_8cc" local="yes">format.cc</includedby>
    <incdepgraph>
      <node id="5561">
        <label>limits</label>
      </node>
      <node id="5562">
        <label>fmt/ostream.h</label>
        <link refid="ostream_8h"/>
        <childnode refid="5563" relation="include">
        </childnode>
        <childnode refid="5577" relation="include">
        </childnode>
      </node>
      <node id="5566">
        <label>cmath</label>
      </node>
      <node id="5564">
        <label>cassert</label>
      </node>
      <node id="5570">
        <label>stdexcept</label>
      </node>
      <node id="5574">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
        <childnode refid="5575" relation="include">
        </childnode>
        <childnode refid="5576" relation="include">
        </childnode>
      </node>
      <node id="5571">
        <label>string</label>
      </node>
      <node id="5577">
        <label>ostream</label>
      </node>
      <node id="5575">
        <label>limits.h</label>
      </node>
      <node id="5576">
        <label>wchar.h</label>
      </node>
      <node id="5567">
        <label>cstdio</label>
      </node>
      <node id="5572">
        <label>vector</label>
      </node>
      <node id="5573">
        <label>utility</label>
      </node>
      <node id="5563">
        <label>fmt/format.h</label>
        <link refid="format_8h"/>
        <childnode refid="5564" relation="include">
        </childnode>
        <childnode refid="5565" relation="include">
        </childnode>
        <childnode refid="5566" relation="include">
        </childnode>
        <childnode refid="5567" relation="include">
        </childnode>
        <childnode refid="5568" relation="include">
        </childnode>
        <childnode refid="5561" relation="include">
        </childnode>
        <childnode refid="5569" relation="include">
        </childnode>
        <childnode refid="5570" relation="include">
        </childnode>
        <childnode refid="5571" relation="include">
        </childnode>
        <childnode refid="5572" relation="include">
        </childnode>
        <childnode refid="5573" relation="include">
        </childnode>
        <childnode refid="5574" relation="include">
        </childnode>
      </node>
      <node id="5559">
        <label>printf.h</label>
        <link refid="printf.h"/>
        <childnode refid="5560" relation="include">
        </childnode>
        <childnode refid="5561" relation="include">
        </childnode>
        <childnode refid="5562" relation="include">
        </childnode>
      </node>
      <node id="5565">
        <label>clocale</label>
      </node>
      <node id="5560">
        <label>algorithm</label>
      </node>
      <node id="5568">
        <label>cstring</label>
      </node>
      <node id="5569">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5578">
        <label>printf.h</label>
        <link refid="printf.h"/>
        <childnode refid="5579" relation="include">
        </childnode>
      </node>
      <node id="5579">
        <label>format.cc</label>
        <link refid="format_8cc"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structfmt_1_1internal_1_1_int_checker" prot="public">fmt::internal::IntChecker</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1_int_checker_3_01true_01_4" prot="public">fmt::internal::IntChecker&lt; true &gt;</innerclass>
    <innerclass refid="classfmt_1_1internal_1_1_precision_handler" prot="public">fmt::internal::PrecisionHandler</innerclass>
    <innerclass refid="classfmt_1_1internal_1_1_is_zero_int" prot="public">fmt::internal::IsZeroInt</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1is__same" prot="public">fmt::internal::is_same</innerclass>
    <innerclass refid="structfmt_1_1internal_1_1is__same_3_01_t_00_01_t_01_4" prot="public">fmt::internal::is_same&lt; T, T &gt;</innerclass>
    <innerclass refid="classfmt_1_1internal_1_1_arg_converter" prot="public">fmt::internal::ArgConverter</innerclass>
    <innerclass refid="classfmt_1_1internal_1_1_char_converter" prot="public">fmt::internal::CharConverter</innerclass>
    <innerclass refid="classfmt_1_1internal_1_1_width_handler" prot="public">fmt::internal::WidthHandler</innerclass>
    <innerclass refid="classfmt_1_1_basic_printf_arg_formatter" prot="public">fmt::BasicPrintfArgFormatter</innerclass>
    <innerclass refid="classfmt_1_1_printf_arg_formatter" prot="public">fmt::PrintfArgFormatter</innerclass>
    <innerclass refid="classfmt_1_1_printf_formatter" prot="public">fmt::PrintfFormatter</innerclass>
    <innernamespace refid="namespacefmt">fmt</innernamespace>
    <innernamespace refid="namespacefmt_1_1internal">fmt::internal</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>Formatting<sp/>library<sp/>for<sp/>C++</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>Copyright<sp/>(c)<sp/>2012<sp/>-<sp/>2016,<sp/>Victor<sp/>Zverovich</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>For<sp/>the<sp/>license<sp/>information<sp/>refer<sp/>to<sp/>format.h.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_PRINTF_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_PRINTF_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::fill_n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::numeric_limits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ostream_8h" kindref="compound">fmt/ostream.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefmt" kindref="compound">fmt</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceinternal" kindref="compound">internal</ref><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Checks<sp/>if<sp/>a<sp/>value<sp/>fits<sp/>in<sp/>int<sp/>-<sp/>used<sp/>to<sp/>avoid<sp/>warnings<sp/>about<sp/>comparing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>signed<sp/>and<sp/>unsigned<sp/>integers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsSigned&gt;</highlight></codeline>
<codeline lineno="24" refid="structfmt_1_1internal_1_1_int_checker" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_int_checker" kindref="compound">IntChecker</ref><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="26" refid="structfmt_1_1internal_1_1_int_checker_1a56792099fa26819159d5a846b2cc0f44" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_int_checker_1a56792099fa26819159d5a846b2cc0f44" kindref="member">fits_in_int</ref>(T<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>std::numeric_limits&lt;int&gt;::max();</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>&lt;=<sp/>max;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="30" refid="structfmt_1_1internal_1_1_int_checker_1a75f90ce4807e8028578427a0ce0296c5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_int_checker_1a75f90ce4807e8028578427a0ce0296c5" kindref="member">fits_in_int</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal">};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="34" refid="structfmt_1_1internal_1_1_int_checker_3_01true_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_int_checker" kindref="compound">IntChecker</ref>&lt;true&gt;<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="36" refid="structfmt_1_1internal_1_1_int_checker_3_01true_01_4_1ab68f0d0f8662a15eb04acd0c183f4033" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_int_checker_3_01true_01_4_1ab68f0d0f8662a15eb04acd0c183f4033" kindref="member">fits_in_int</ref>(T<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>&gt;=<sp/>std::numeric_limits&lt;int&gt;::min()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value &lt;= std::numeric_limits&lt;int&gt;::max</ref>();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="40" refid="structfmt_1_1internal_1_1_int_checker_3_01true_01_4_1a6a4a5cbf56c25c1dbd9757233ae4b8ca" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_int_checker_3_01true_01_4_1a6a4a5cbf56c25c1dbd9757233ae4b8ca" kindref="member">fits_in_int</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal">};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="classfmt_1_1internal_1_1_precision_handler" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1internal_1_1_precision_handler" kindref="compound">PrecisionHandler</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_arg_visitor" kindref="compound">ArgVisitor</ref>&lt;PrecisionHandler,<sp/>int&gt;<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="45" refid="classfmt_1_1internal_1_1_precision_handler_1a454fac72486ed88aaee33e63607316fa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_precision_handler_1a454fac72486ed88aaee33e63607316fa" kindref="member">report_unhandled_arg</ref>()<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(</highlight><highlight class="stringliteral">&quot;precision<sp/>is<sp/>not<sp/>integer&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="50" refid="classfmt_1_1internal_1_1_precision_handler_1a525d499f85d35bb9dbf1d920cd784d57" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_precision_handler_1a525d499f85d35bb9dbf1d920cd784d57" kindref="member">visit_any_int</ref>(T<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="structfmt_1_1internal_1_1_int_checker" kindref="compound">IntChecker</ref>&lt;std::numeric_limits&lt;T&gt;::is_signed&gt;::<ref refid="structfmt_1_1internal_1_1_int_checker_1a56792099fa26819159d5a846b2cc0f44" kindref="member">fits_in_int</ref>(value))</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(</highlight><highlight class="stringliteral">&quot;number<sp/>is<sp/>too<sp/>big&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal">};</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IsZeroInt::visit(arg)<sp/>returns<sp/>true<sp/>iff<sp/>arg<sp/>is<sp/>a<sp/>zero<sp/>integer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="classfmt_1_1internal_1_1_is_zero_int" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1internal_1_1_is_zero_int" kindref="compound">IsZeroInt</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_arg_visitor" kindref="compound">ArgVisitor</ref>&lt;IsZeroInt,<sp/>bool&gt;<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="61" refid="classfmt_1_1internal_1_1_is_zero_int_1acf4f0a7ba2f320d2a6e59f8e7694fa3f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_is_zero_int_1acf4f0a7ba2f320d2a6e59f8e7694fa3f" kindref="member">visit_any_int</ref>(T<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>==<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal">};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="65" refid="structfmt_1_1internal_1_1is__same" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1is__same" kindref="compound">is_same</ref><sp/>{</highlight></codeline>
<codeline lineno="66" refid="structfmt_1_1internal_1_1is__same_1a23125d0c56f0b99465371aa210eda79ba361c7726a05250072dab2c89065e7015" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref><sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="67"><highlight class="normal">};</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="70" refid="structfmt_1_1internal_1_1is__same_3_01_t_00_01_t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1internal_1_1is__same" kindref="compound">is_same</ref>&lt;T,<sp/>T&gt;<sp/>{</highlight></codeline>
<codeline lineno="71" refid="structfmt_1_1internal_1_1is__same_3_01_t_00_01_t_01_4_1ad1f8aecf02ce3ab4b9cc7f5eb96d8067af3e6c23755ef30449cfdf7e3f5666ffe" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref><sp/>=<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="72"><highlight class="normal">};</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>argument<sp/>visitor<sp/>that<sp/>converts<sp/>an<sp/>integer<sp/>argument<sp/>to<sp/>T<sp/>for<sp/>printf,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>T<sp/>is<sp/>an<sp/>integral<sp/>type.<sp/>If<sp/>T<sp/>is<sp/>void,<sp/>the<sp/>argument<sp/>is<sp/>converted<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>corresponding<sp/>signed<sp/>or<sp/>unsigned<sp/>type<sp/>depending<sp/>on<sp/>the<sp/>type<sp/>specifier:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&apos;d&apos;<sp/>and<sp/>&apos;i&apos;<sp/>-<sp/>signed,<sp/>other<sp/>-<sp/>unsigned)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="79" refid="classfmt_1_1internal_1_1_arg_converter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1internal_1_1_arg_converter" kindref="compound">ArgConverter</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_arg_visitor" kindref="compound">ArgVisitor</ref>&lt;ArgConverter&lt;T&gt;,<sp/>void&gt;<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="81" refid="classfmt_1_1internal_1_1_arg_converter_1ac5d7f2407f2192a0ab554951d6f0bd23" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref><sp/>&amp;<ref refid="classfmt_1_1internal_1_1_arg_converter_1ac5d7f2407f2192a0ab554951d6f0bd23" kindref="member">arg_</ref>;</highlight></codeline>
<codeline lineno="82" refid="classfmt_1_1internal_1_1_arg_converter_1aad1d68e5ece7515bc8f7119c4afbd4b9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_arg_converter_1aad1d68e5ece7515bc8f7119c4afbd4b9" kindref="member">type_</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1acc0b3b39544c7a0930ae1567d952a8d4" kindref="member">FMT_DISALLOW_COPY_AND_ASSIGN</ref>(<ref refid="classfmt_1_1internal_1_1_arg_converter" kindref="compound">ArgConverter</ref>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="87" refid="classfmt_1_1internal_1_1_arg_converter_1a27980bd1d0d003f75cd61905d24ef2a7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1internal_1_1_arg_converter_1a27980bd1d0d003f75cd61905d24ef2a7" kindref="member">ArgConverter</ref>(<ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref><sp/>&amp;<ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a8d78e2e8a676abd547a596dd84811285" kindref="member">type</ref>)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>arg_(arg),<sp/>type_(type)<sp/>{}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="classfmt_1_1internal_1_1_arg_converter_1a988d8f53c852fc906f817a94732d65b4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_arg_converter_1a988d8f53c852fc906f817a94732d65b4" kindref="member">visit_bool</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>visit_any_int(value);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="96" refid="classfmt_1_1internal_1_1_arg_converter_1a17ef10158defdeb450bcf9c1c8a03d52" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_arg_converter_1a17ef10158defdeb450bcf9c1c8a03d52" kindref="member">visit_any_int</ref>(U<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_signed<sp/>=<sp/>type_<sp/>==<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal"><sp/>||<sp/>type_<sp/>==<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_conditional" kindref="compound">internal::Conditional</ref>&lt;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfmt_1_1internal_1_1is__same" kindref="compound">is_same&lt;T, void&gt;::value</ref>,<sp/>U,<sp/>T&gt;<ref refid="glew_8h_1a8d78e2e8a676abd547a596dd84811285" kindref="member">::type</ref><sp/>TargetType;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(TargetType)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extra<sp/>casts<sp/>are<sp/>used<sp/>to<sp/>silence<sp/>warnings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_signed)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg_.<ref refid="structfmt_1_1internal_1_1_arg_1af1165b4e8647bea5913922de82599e2e" kindref="member">type</ref><sp/>=<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa6ab1b5ad31036f4c90bae16e873b3396" kindref="member">Arg::INT</ref>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg_.<ref refid="structfmt_1_1internal_1_1_value_1ac295b81747c26b97893be505a03381c8" kindref="member">int_value</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TargetType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg_.<ref refid="structfmt_1_1internal_1_1_arg_1af1165b4e8647bea5913922de82599e2e" kindref="member">type</ref><sp/>=<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaac7303224391053ae45d4ff13ad0f017c" kindref="member">Arg::UINT</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_make_unsigned_1a57cbf18702f14a837ba104412394bfba" kindref="member">internal::MakeUnsigned&lt;TargetType&gt;::Type</ref><sp/>Unsigned;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg_.<ref refid="structfmt_1_1internal_1_1_value_1a9ced917767812c9572065509f22bec18" kindref="member">uint_value</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_signed)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg_.<ref refid="structfmt_1_1internal_1_1_arg_1af1165b4e8647bea5913922de82599e2e" kindref="member">type</ref><sp/>=<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa7674f34a96c22fec85d9f27d082b4412" kindref="member">Arg::LONG_LONG</ref>;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>glibc&apos;s<sp/>printf<sp/>doesn&apos;t<sp/>sign<sp/>extend<sp/>arguments<sp/>of<sp/>smaller<sp/>types:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>std::printf(&quot;%lld&quot;,<sp/>-42);<sp/><sp/>//<sp/>prints<sp/>&quot;4294967254&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>we<sp/>don&apos;t<sp/>have<sp/>to<sp/>do<sp/>the<sp/>same<sp/>because<sp/>it&apos;s<sp/>a<sp/>UB.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg_.<ref refid="structfmt_1_1internal_1_1_value_1a1dab8b1df1f88c35b6893d63b1b72af8" kindref="member">long_long_value</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespacefmt_1aef84b50b68fdc25388fed2952c2db563" kindref="member">LongLong</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg_.<ref refid="structfmt_1_1internal_1_1_arg_1af1165b4e8647bea5913922de82599e2e" kindref="member">type</ref><sp/>=<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa8c2ffe6909d26d46781aa6fb9b8ae418" kindref="member">Arg::ULONG_LONG</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg_.<ref refid="structfmt_1_1internal_1_1_value_1a78424f46c0150190010e5c27ec3c69a0" kindref="member">ulong_long_value</ref><sp/>=</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">typename<sp/><ref refid="structfmt_1_1internal_1_1_make_unsigned_1a57cbf18702f14a837ba104412394bfba" kindref="member">internal::MakeUnsigned&lt;U&gt;::Type</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal">};</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>an<sp/>integer<sp/>argument<sp/>to<sp/>char<sp/>for<sp/>printf.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="classfmt_1_1internal_1_1_char_converter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1internal_1_1_char_converter" kindref="compound">CharConverter</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_arg_visitor" kindref="compound">ArgVisitor</ref>&lt;CharConverter,<sp/>void&gt;<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="130" refid="classfmt_1_1internal_1_1_char_converter_1a1943ce4887ad478e1e56d2f2d1e1cf91" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref><sp/>&amp;<ref refid="classfmt_1_1internal_1_1_char_converter_1a1943ce4887ad478e1e56d2f2d1e1cf91" kindref="member">arg_</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1acc0b3b39544c7a0930ae1567d952a8d4" kindref="member">FMT_DISALLOW_COPY_AND_ASSIGN</ref>(<ref refid="classfmt_1_1internal_1_1_char_converter" kindref="compound">CharConverter</ref>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="135" refid="classfmt_1_1internal_1_1_char_converter_1a17441a458d9a43b46d4aa347fad16d6e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_char_converter_1a17441a458d9a43b46d4aa347fad16d6e" kindref="member">CharConverter</ref>(<ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref><sp/>&amp;<ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>)<sp/>:<sp/>arg_(arg)<sp/>{}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="138" refid="classfmt_1_1internal_1_1_char_converter_1a45f7fa70f2eca8915632712f79164617" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_char_converter_1a45f7fa70f2eca8915632712f79164617" kindref="member">visit_any_int</ref>(T<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>arg_.<ref refid="structfmt_1_1internal_1_1_arg_1af1165b4e8647bea5913922de82599e2e" kindref="member">type</ref><sp/>=<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa4000e36300596c89b956b964a23114e0" kindref="member">internal::Arg::CHAR</ref>;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>arg_.<ref refid="structfmt_1_1internal_1_1_value_1ac295b81747c26b97893be505a03381c8" kindref="member">int_value</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal">};</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Checks<sp/>if<sp/>an<sp/>argument<sp/>is<sp/>a<sp/>valid<sp/>printf<sp/>width<sp/>specifier<sp/>and<sp/>sets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>left<sp/>alignment<sp/>if<sp/>it<sp/>is<sp/>negative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="classfmt_1_1internal_1_1_width_handler" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1internal_1_1_width_handler" kindref="compound">WidthHandler</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_arg_visitor" kindref="compound">ArgVisitor</ref>&lt;WidthHandler,<sp/>unsigned&gt;<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="148" refid="classfmt_1_1internal_1_1_width_handler_1a4d26bd88ca41fc6923c0da7f2224ddbb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1_format_spec" kindref="compound">FormatSpec</ref><sp/>&amp;<ref refid="classfmt_1_1internal_1_1_width_handler_1a4d26bd88ca41fc6923c0da7f2224ddbb" kindref="member">spec_</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1acc0b3b39544c7a0930ae1567d952a8d4" kindref="member">FMT_DISALLOW_COPY_AND_ASSIGN</ref>(<ref refid="classfmt_1_1internal_1_1_width_handler" kindref="compound">WidthHandler</ref>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="153" refid="classfmt_1_1internal_1_1_width_handler_1af98b4bed872a72eef079c0f3fcc5f8ad" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_width_handler_1af98b4bed872a72eef079c0f3fcc5f8ad" kindref="member">WidthHandler</ref>(<ref refid="structfmt_1_1_format_spec" kindref="compound">FormatSpec</ref><sp/>&amp;spec)<sp/>:<sp/>spec_(spec)<sp/>{}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="classfmt_1_1internal_1_1_width_handler_1ae4c3cae468a226af52eb9793b39facec" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_width_handler_1ae4c3cae468a226af52eb9793b39facec" kindref="member">report_unhandled_arg</ref>()<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(</highlight><highlight class="stringliteral">&quot;width<sp/>is<sp/>not<sp/>integer&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="160" refid="classfmt_1_1internal_1_1_width_handler_1a5c19eabb80250563f3547df9d547d890" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_width_handler_1a5c19eabb80250563f3547df9d547d890" kindref="member">visit_any_int</ref>(T<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_int_traits" kindref="compound">internal::IntTraits&lt;T&gt;::MainType</ref><sp/>UnsignedType;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>UnsignedType<sp/><ref refid="glew_8h_1aa105b18f96e6bc2485cb7f576a7fb9ba" kindref="member">width</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">UnsignedType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacefmt_1_1internal_1a310d44c09812f7990e50800808c04673" kindref="member">internal::is_negative</ref>(value))<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spec_.<ref refid="structfmt_1_1_align_spec_1aac93fb3829d550af86479f1ecaa73f95" kindref="member">align_</ref><sp/>=<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2a37d3391e09dceceb0e75094f691b02eb" kindref="member">ALIGN_LEFT</ref>;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>=<sp/>0<sp/>-<sp/><ref refid="glew_8h_1aa105b18f96e6bc2485cb7f576a7fb9ba" kindref="member">width</ref>;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int_max<sp/>=<sp/>std::numeric_limits&lt;int&gt;::max();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>&gt;<sp/>int_max)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(</highlight><highlight class="stringliteral">&quot;number<sp/>is<sp/>too<sp/>big&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="glew_8h_1aa105b18f96e6bc2485cb7f576a7fb9ba" kindref="member">width</ref>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal">};</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Impl,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1_basic_printf_arg_formatter" kindref="compound">BasicPrintfArgFormatter</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_arg_formatter_base" kindref="compound">internal::ArgFormatterBase</ref>&lt;Impl,<sp/>Char&gt;<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="195" refid="classfmt_1_1_basic_printf_arg_formatter_1a6d33080841bed7fbce18b6a4623fbef5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_printf_arg_formatter_1a6d33080841bed7fbce18b6a4623fbef5" kindref="member">write_null_pointer</ref>()<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;spec().type_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="namespacefmt_1_1internal_1a7c721969e9660580a237bd4130422ab6" kindref="member">write</ref>(</highlight><highlight class="stringliteral">&quot;(nil)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="classfmt_1_1_basic_printf_arg_formatter_1a27df457cabe71935d28f7df378fc6de6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_arg_formatter_base" kindref="compound">internal::ArgFormatterBase&lt;Impl, Char&gt;</ref><sp/><ref refid="classfmt_1_1_basic_printf_arg_formatter_1a27df457cabe71935d28f7df378fc6de6" kindref="member">Base</ref>;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="210" refid="classfmt_1_1_basic_printf_arg_formatter_1a3e148332a5cbd6bee951ba8ad2b248b7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_printf_arg_formatter_1a3e148332a5cbd6bee951ba8ad2b248b7" kindref="member">BasicPrintfArgFormatter</ref>(<ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter&lt;Char&gt;</ref><sp/>&amp;writer,<sp/><ref refid="structfmt_1_1_format_spec" kindref="compound">FormatSpec</ref><sp/>&amp;spec)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="namespaceinternal" kindref="compound">internal</ref>::ArgFormatterBase&lt;Impl,<sp/>Char&gt;(writer,<sp/>spec)<sp/>{}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="classfmt_1_1_basic_printf_arg_formatter_1ad7e0c109d588a2e2be9d90f7deee59a2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_printf_arg_formatter_1ad7e0c109d588a2e2be9d90f7deee59a2" kindref="member">visit_bool</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfmt_1_1_format_spec" kindref="compound">FormatSpec</ref><sp/>&amp;fmt_spec<sp/>=<sp/>this-&gt;spec();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmt_spec.<ref refid="structfmt_1_1_format_spec_1aa6f085ef583f708dde9636c03adea6ab" kindref="member">type_</ref><sp/>!=<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;visit_any_int(value);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt_spec.<ref refid="structfmt_1_1_format_spec_1aa6f085ef583f708dde9636c03adea6ab" kindref="member">type_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="namespacefmt_1_1internal_1a7c721969e9660580a237bd4130422ab6" kindref="member">write</ref>(value);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="223" refid="classfmt_1_1_basic_printf_arg_formatter_1a97f26086d50a4553280fbe831ef7e947" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_printf_arg_formatter_1a97f26086d50a4553280fbe831ef7e947" kindref="member">visit_char</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1_format_spec" kindref="compound">FormatSpec</ref><sp/>&amp;fmt_spec<sp/>=<sp/>this-&gt;spec();</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter&lt;Char&gt;</ref><sp/>&amp;<ref refid="glew_8h_1a433584688554d9a05d22844c39473968" kindref="member">w</ref><sp/>=<sp/>this-&gt;writer();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmt_spec.<ref refid="structfmt_1_1_format_spec_1aa6f085ef583f708dde9636c03adea6ab" kindref="member">type_</ref><sp/>&amp;&amp;<sp/>fmt_spec.<ref refid="structfmt_1_1_format_spec_1aa6f085ef583f708dde9636c03adea6ab" kindref="member">type_</ref><sp/>!=<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w.<ref refid="classfmt_1_1_basic_writer_1a2eb820ad907cede8df8226af444f59d6" kindref="member">write_int</ref>(value,<sp/>fmt_spec);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_writer_1aedef35be3b8871bc55d10936289f1d9b" kindref="member">BasicWriter&lt;Char&gt;::CharPtr</ref><sp/>CharPtr;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>CharPtr<sp/>out<sp/>=<sp/>CharPtr();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmt_spec.<ref refid="structfmt_1_1_width_spec_1a83fed5d5a674ea54a48feb6edef4c1c7" kindref="member">width_</ref><sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Char<sp/>fill<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>w.<ref refid="classfmt_1_1_basic_writer_1a974243e12ba11701c6007bbe080c9db5" kindref="member">grow_buffer</ref>(fmt_spec.<ref refid="structfmt_1_1_width_spec_1a83fed5d5a674ea54a48feb6edef4c1c7" kindref="member">width_</ref>);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmt_spec.<ref refid="structfmt_1_1_align_spec_1aac93fb3829d550af86479f1ecaa73f95" kindref="member">align_</ref><sp/>!=<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2a37d3391e09dceceb0e75094f691b02eb" kindref="member">ALIGN_LEFT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill_n(out,<sp/>fmt_spec.<ref refid="structfmt_1_1_width_spec_1a83fed5d5a674ea54a48feb6edef4c1c7" kindref="member">width_</ref><sp/>-<sp/>1,<sp/>fill);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>fmt_spec.<ref refid="structfmt_1_1_width_spec_1a83fed5d5a674ea54a48feb6edef4c1c7" kindref="member">width_</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill_n(out<sp/>+<sp/>1,<sp/>fmt_spec.<ref refid="structfmt_1_1_width_spec_1a83fed5d5a674ea54a48feb6edef4c1c7" kindref="member">width_</ref><sp/>-<sp/>1,<sp/>fill);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>w.<ref refid="classfmt_1_1_basic_writer_1a974243e12ba11701c6007bbe080c9db5" kindref="member">grow_buffer</ref>(1);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>*out<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="246" refid="classfmt_1_1_basic_printf_arg_formatter_1a4d5af89db6690ef2507ffc8cc8b38497" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_printf_arg_formatter_1a4d5af89db6690ef2507ffc8cc8b38497" kindref="member">visit_cstring</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Base::visit_cstring(value);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;spec().type_<sp/>==<sp/></highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>write_null_pointer();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="namespacefmt_1_1internal_1a7c721969e9660580a237bd4130422ab6" kindref="member">write</ref>(</highlight><highlight class="stringliteral">&quot;(null)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="256" refid="classfmt_1_1_basic_printf_arg_formatter_1a61962abc13a85ba6a69e839fb06270c5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_printf_arg_formatter_1a61962abc13a85ba6a69e839fb06270c5" kindref="member">visit_pointer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Base::visit_pointer(value);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;spec().type_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>write_null_pointer();</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="classfmt_1_1_basic_printf_arg_formatter_1a4bc1a6a180bd532d300c953f0dbafc1e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_printf_arg_formatter_1a4bc1a6a180bd532d300c953f0dbafc1e" kindref="member">visit_custom</ref>(<ref refid="structfmt_1_1internal_1_1_value_1_1_custom_value" kindref="compound">internal::Arg::CustomValue</ref><sp/><ref refid="glew_8h_1ae0f40feefa74d9cb1721a009573cfce5" kindref="member">c</ref>)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classfmt_1_1_basic_formatter" kindref="compound">BasicFormatter&lt;Char&gt;</ref><sp/>formatter(<ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref>(),<sp/>this-&gt;writer());</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>format_str[]<sp/>=<sp/>{</highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">,<sp/>0};</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*<ref refid="glew_8h_1a1e3b09934060e9d373139c3557730d37" kindref="member">format</ref><sp/>=<sp/>format_str;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>c.<ref refid="structfmt_1_1internal_1_1_value_1_1_custom_value_1a36f27ca0939e90a5fe6d7d355ea0f97a" kindref="member">format</ref>(&amp;formatter,<sp/>c.<ref refid="structfmt_1_1internal_1_1_value_1_1_custom_value_1aaaa7c10023f8b3886bee9593cddea150" kindref="member">value</ref>,<sp/>&amp;format);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal">};</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="274" refid="classfmt_1_1_printf_arg_formatter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1_printf_arg_formatter" kindref="compound">PrintfArgFormatter</ref></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_basic_printf_arg_formatter" kindref="compound">BasicPrintfArgFormatter</ref>&lt;PrintfArgFormatter&lt;Char&gt;,<sp/>Char&gt;<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="278" refid="classfmt_1_1_printf_arg_formatter_1aa4b9526d3c614205d607f63918c33245" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_printf_arg_formatter_1aa4b9526d3c614205d607f63918c33245" kindref="member">PrintfArgFormatter</ref>(<ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter&lt;Char&gt;</ref><sp/>&amp;<ref refid="glew_8h_1a433584688554d9a05d22844c39473968" kindref="member">w</ref>,<sp/><ref refid="structfmt_1_1_format_spec" kindref="compound">FormatSpec</ref><sp/>&amp;<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="classfmt_1_1_basic_printf_arg_formatter" kindref="compound">BasicPrintfArgFormatter</ref>&lt;<ref refid="classfmt_1_1_printf_arg_formatter" kindref="compound">PrintfArgFormatter</ref>&lt;Char&gt;,<sp/>Char&gt;(w,<sp/>s)<sp/>{}</highlight></codeline>
<codeline lineno="280"><highlight class="normal">};</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgFormatter<sp/>=<sp/>Pr</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">fArgFormatter&lt;Char&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="284" refid="classfmt_1_1_printf_formatter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfmt_1_1_printf_formatter" kindref="compound">PrintfFormatter</ref><sp/>:<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_formatter_base" kindref="compound">internal::FormatterBase</ref><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="286" refid="classfmt_1_1_printf_formatter_1a9f2f1f256d5b1f6f2090b226bdbf6ae4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter&lt;Char&gt;</ref><sp/>&amp;<ref refid="classfmt_1_1_printf_formatter_1a9f2f1f256d5b1f6f2090b226bdbf6ae4" kindref="member">writer_</ref>;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parse_flags(<ref refid="structfmt_1_1_format_spec" kindref="compound">FormatSpec</ref><sp/>&amp;spec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*&amp;<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>argument<sp/>with<sp/>specified<sp/>index<sp/>or,<sp/>if<sp/>arg_index<sp/>is<sp/>equal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>maximum<sp/>unsigned<sp/>value,<sp/>the<sp/>next<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref><sp/>get_arg(</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>arg_index<sp/>=<sp/>(std::numeric_limits&lt;unsigned&gt;::max)());</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parses<sp/>argument<sp/>index,<sp/>flags<sp/>and<sp/>width<sp/>and<sp/>returns<sp/>the<sp/>argument<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>parse_header(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*&amp;s,<sp/><ref refid="structfmt_1_1_format_spec" kindref="compound">FormatSpec</ref><sp/>&amp;spec);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="307" refid="classfmt_1_1_printf_formatter_1a08e27f97564935cbeac71fb8a0628f35" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_printf_formatter_1a08e27f97564935cbeac71fb8a0628f35" kindref="member">PrintfFormatter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>&amp;args,<sp/><ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter&lt;Char&gt;</ref><sp/>&amp;<ref refid="glew_8h_1a433584688554d9a05d22844c39473968" kindref="member">w</ref>)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>FormatterBase(args),<sp/>writer_(w)<sp/>{}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><ref refid="format_8h_1a9a4960b70582ed2620911a0b75dce0b5" kindref="member">FMT_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1a638f25c535b3bfa12dc1478b11885b6f" kindref="member">format</ref>(<ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">BasicCStringRef&lt;Char&gt;</ref><sp/>format_str);</highlight></codeline>
<codeline lineno="312"><highlight class="normal">};</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AF&gt;</highlight></codeline>
<codeline lineno="315" refid="classfmt_1_1_printf_formatter_1a9d091db6f48931782be245fcbb0da5c5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_printf_formatter_1a9d091db6f48931782be245fcbb0da5c5" kindref="member">PrintfFormatter&lt;Char, AF&gt;::parse_flags</ref>(<ref refid="structfmt_1_1_format_spec" kindref="compound">FormatSpec</ref><sp/>&amp;spec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*&amp;s)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*s++)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_align_spec_1aac93fb3829d550af86479f1ecaa73f95" kindref="member">align_</ref><sp/>=<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2a37d3391e09dceceb0e75094f691b02eb" kindref="member">ALIGN_LEFT</ref>;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_format_spec_1a9fbd00ed2b8e3b96eaa2beb54aff641e" kindref="member">flags_</ref><sp/>|=<sp/><ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea41bce447447361e7a4b3e9d8a84877db" kindref="member">SIGN_FLAG</ref><sp/>|<sp/><ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea2b053d8fd806a73492750893f902a694" kindref="member">PLUS_FLAG</ref>;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_width_spec_1ad1c9740afb2b05c4ac7b2d9fa9760891" kindref="member">fill_</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_format_spec_1a9fbd00ed2b8e3b96eaa2beb54aff641e" kindref="member">flags_</ref><sp/>|=<sp/><ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea41bce447447361e7a4b3e9d8a84877db" kindref="member">SIGN_FLAG</ref>;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_format_spec_1a9fbd00ed2b8e3b96eaa2beb54aff641e" kindref="member">flags_</ref><sp/>|=<sp/><ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea02280924fe002ad252cfbcc0cf6492aa" kindref="member">HASH_FLAG</ref>;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AF&gt;</highlight></codeline>
<codeline lineno="341" refid="classfmt_1_1_printf_formatter_1a771c36f34331ffc3389ba25a87bf7ea0" refkind="member"><highlight class="normal"><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref><sp/><ref refid="classfmt_1_1_printf_formatter_1a771c36f34331ffc3389ba25a87bf7ea0" kindref="member">PrintfFormatter&lt;Char, AF&gt;::get_arg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*s,</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>arg_index)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>(<ref refid="glew_8h_1a1659df18b3b413a60a397d5a7540f3d2" kindref="member">void</ref>)s;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref><sp/><ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref><sp/>=<sp/>arg_index<sp/>==<sp/>std::numeric_limits&lt;unsigned&gt;::max()<sp/>?</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>next_arg(error)<sp/>:<sp/><ref refid="classfmt_1_1internal_1_1_formatter_base_1ad5baca90f220f3f54c0c4a620ec80b7b" kindref="member">FormatterBase::get_arg</ref>(arg_index<sp/>-<sp/>1,<sp/>error);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error)</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(!*s<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>format<sp/>string&quot;</highlight><highlight class="normal"><sp/>:<sp/>error));</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>;</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AF&gt;</highlight></codeline>
<codeline lineno="353" refid="classfmt_1_1_printf_formatter_1a847c4173cd8b0138fd066eb9b9d0877c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_printf_formatter_1a847c4173cd8b0138fd066eb9b9d0877c" kindref="member">PrintfFormatter&lt;Char, AF&gt;::parse_header</ref>(</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*&amp;s,<sp/><ref refid="structfmt_1_1_format_spec" kindref="compound">FormatSpec</ref><sp/>&amp;spec)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>arg_index<sp/>=<sp/>std::numeric_limits&lt;unsigned&gt;::max();</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>Char<sp/><ref refid="glew_8h_1ae0f40feefa74d9cb1721a009573cfce5" kindref="member">c</ref><sp/>=<sp/>*<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>an<sp/>argument<sp/>index<sp/>(if<sp/>followed<sp/>by<sp/>&apos;$&apos;)<sp/>or<sp/>a<sp/>width<sp/>possibly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>preceded<sp/>with<sp/>&apos;0&apos;<sp/>flag(s).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref><sp/>=<sp/><ref refid="namespacefmt_1_1internal_1a20352082f5ee17703e71a37e30c6ddaf" kindref="member">internal::parse_nonnegative_int</ref>(s);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>==<sp/></highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal">)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>value<sp/>is<sp/>an<sp/>argument<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arg_index<sp/>=<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_width_spec_1ad1c9740afb2b05c4ac7b2d9fa9760891" kindref="member">fill_</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nonzero<sp/>value<sp/>means<sp/>that<sp/>we<sp/>parsed<sp/>width<sp/>and<sp/>don&apos;t<sp/>need<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>it<sp/>or<sp/>flags<sp/>again,<sp/>so<sp/>return<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_width_spec_1a83fed5d5a674ea54a48feb6edef4c1c7" kindref="member">width_</ref><sp/>=<sp/><ref refid="glew_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg_index;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>parse_flags(spec,<sp/>s);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>width.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*s<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_width_spec_1a83fed5d5a674ea54a48feb6edef4c1c7" kindref="member">width_</ref><sp/>=<sp/><ref refid="namespacefmt_1_1internal_1a20352082f5ee17703e71a37e30c6ddaf" kindref="member">internal::parse_nonnegative_int</ref>(s);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_width_spec_1a83fed5d5a674ea54a48feb6edef4c1c7" kindref="member">width_</ref><sp/>=<sp/><ref refid="classfmt_1_1internal_1_1_width_handler" kindref="compound">internal::WidthHandler</ref>(spec).<ref refid="classfmt_1_1_arg_visitor_1a19a979776fc789baaf038ab216e245bb" kindref="member">visit</ref>(get_arg(s));</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg_index;</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AF&gt;</highlight></codeline>
<codeline lineno="387" refid="classfmt_1_1_printf_formatter_1a295c50e11b9a77720c8078f287040e5c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1_printf_formatter_1a295c50e11b9a77720c8078f287040e5c" kindref="member">PrintfFormatter&lt;Char, AF&gt;::format</ref>(<ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">BasicCStringRef&lt;Char&gt;</ref><sp/>format_str)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*<ref refid="glew_8h_1ac55adc720a3098c1b454d2a4647f4361" kindref="member">start</ref><sp/>=<sp/>format_str.<ref refid="classfmt_1_1_basic_c_string_ref_1ae3bafa845b53339b20c4f5edb4f635f9" kindref="member">c_str</ref>();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char<sp/>*s<sp/>=<sp/><ref refid="glew_8h_1ac55adc720a3098c1b454d2a4647f4361" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>Char<sp/><ref refid="glew_8h_1ae0f40feefa74d9cb1721a009573cfce5" kindref="member">c</ref><sp/>=<sp/>*s++;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>==<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1a7c721969e9660580a237bd4130422ab6" kindref="member">write</ref>(writer_,<sp/>start,<sp/>s);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>++<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacefmt_1_1internal_1a7c721969e9660580a237bd4130422ab6" kindref="member">write</ref>(writer_,<sp/>start,<sp/>s<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfmt_1_1_format_spec" kindref="compound">FormatSpec</ref><sp/>spec;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_align_spec_1aac93fb3829d550af86479f1ecaa73f95" kindref="member">align_</ref><sp/>=<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2ab4ab67c39e6d8562a116f3da83de391a" kindref="member">ALIGN_RIGHT</ref>;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>argument<sp/>index,<sp/>flags<sp/>and<sp/>width.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>arg_index<sp/>=<sp/>parse_header(s,<sp/>spec);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>precision.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>*s<sp/>&amp;&amp;<sp/>*s<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_format_spec_1a8444724bdd0a55bf3226a17e321c12c5" kindref="member">precision_</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespacefmt_1_1internal_1a20352082f5ee17703e71a37e30c6ddaf" kindref="member">internal::parse_nonnegative_int</ref>(s));</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_format_spec_1a8444724bdd0a55bf3226a17e321c12c5" kindref="member">precision_</ref><sp/>=<sp/><ref refid="classfmt_1_1internal_1_1_precision_handler" kindref="compound">internal::PrecisionHandler</ref>().<ref refid="classfmt_1_1_arg_visitor_1a19a979776fc789baaf038ab216e245bb" kindref="member">visit</ref>(get_arg(s));</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1internal_1_1_arg" kindref="compound">internal::Arg</ref>;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>Arg<sp/><ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref><sp/>=<sp/>get_arg(s,<sp/>arg_index);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec.<ref refid="structfmt_1_1_format_spec_1a2ee0e9bf9979641418a8b30b4e7740f2" kindref="member">flag</ref>(<ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea02280924fe002ad252cfbcc0cf6492aa" kindref="member">HASH_FLAG</ref>)<sp/>&amp;&amp;<sp/><ref refid="classfmt_1_1internal_1_1_is_zero_int" kindref="compound">internal::IsZeroInt</ref>().<ref refid="classfmt_1_1_arg_visitor_1a19a979776fc789baaf038ab216e245bb" kindref="member">visit</ref>(arg))</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_format_spec_1a9fbd00ed2b8e3b96eaa2beb54aff641e" kindref="member">flags_</ref><sp/>&amp;=<sp/>~internal::to_unsigned&lt;int&gt;(<ref refid="namespacefmt_1ac14c51c5c796819e98c600fd04a2fdbea02280924fe002ad252cfbcc0cf6492aa" kindref="member">HASH_FLAG</ref>);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec.<ref refid="structfmt_1_1_width_spec_1ad1c9740afb2b05c4ac7b2d9fa9760891" kindref="member">fill_</ref><sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg.type<sp/>&lt;=<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaad9dbf0826103ba0fed6466a53bb0421b" kindref="member">Arg::LAST_NUMERIC_TYPE</ref>)</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_align_spec_1aac93fb3829d550af86479f1ecaa73f95" kindref="member">align_</ref><sp/>=<sp/><ref refid="namespacefmt_1ac0671080923edbf0a7c67a567417f0d2a93f62fb67b1cbabf62cab3185bb5f4e3" kindref="member">ALIGN_NUMERIC</ref>;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_width_spec_1ad1c9740afb2b05c4ac7b2d9fa9760891" kindref="member">fill_</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Ignore<sp/>&apos;0&apos;<sp/>flag<sp/>for<sp/>non-numeric<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>length<sp/>and<sp/>convert<sp/>the<sp/>argument<sp/>to<sp/>the<sp/>required<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classfmt_1_1internal_1_1_arg_converter" kindref="compound">internal::ArgConverter</ref>;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*s++)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>==<sp/></highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgConverter&lt;signed<sp/>char&gt;(<ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>,<sp/>*++<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>).visit(arg);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgConverter&lt;short&gt;(<ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>,<sp/>*<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>).visit(arg);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>==<sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgConverter&lt;fmt::LongLong&gt;(<ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>,<sp/>*++<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>).visit(arg);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgConverter&lt;long&gt;(<ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>,<sp/>*<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>).visit(arg);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;j&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ArgConverter&lt;intmax_t&gt;(<ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>,<sp/>*<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>).visit(arg);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ArgConverter&lt;std::size_t&gt;(<ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>,<sp/>*<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>).visit(arg);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ArgConverter&lt;std::ptrdiff_t&gt;(<ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>,<sp/>*<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>).visit(arg);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;L&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf<sp/>produces<sp/>garbage<sp/>when<sp/>&apos;L&apos;<sp/>is<sp/>omitted<sp/>for<sp/>long<sp/>double,<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>do<sp/>the<sp/>same.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ArgConverter&lt;void&gt;(<ref refid="namespacefmt_1a4649a895b3f769fe24b268e39a8cf152" kindref="member">arg</ref>,<sp/>*<ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>).visit(arg);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*s)</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="format_8h_1ad9e2ed6d3b432a04c9622c34a2495304" kindref="member">FMT_THROW</ref>(<ref refid="classfmt_1_1_format_error" kindref="compound">FormatError</ref>(</highlight><highlight class="stringliteral">&quot;invalid<sp/>format<sp/>string&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_format_spec_1aa6f085ef583f708dde9636c03adea6ab" kindref="member">type_</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*s++);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg.type<sp/>&lt;=<sp/><ref refid="structfmt_1_1internal_1_1_value_1a0305339d0a9571e14e26f385367fedaaa1cc1a5881e640c0009f58a05b653d535" kindref="member">Arg::LAST_INTEGER_TYPE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Normalize<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(spec.<ref refid="structfmt_1_1_format_spec_1aa6f085ef583f708dde9636c03adea6ab" kindref="member">type_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="structfmt_1_1_format_spec_1aa6f085ef583f708dde9636c03adea6ab" kindref="member">type_</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>handle<sp/>wchar_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classfmt_1_1internal_1_1_char_converter" kindref="compound">internal::CharConverter</ref>(arg).<ref refid="classfmt_1_1_arg_visitor_1a19a979776fc789baaf038ab216e245bb" kindref="member">visit</ref>(arg);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/><ref refid="glew_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Format<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>AF(writer_,<sp/>spec).visit(arg);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><ref refid="namespacefmt_1_1internal_1a7c721969e9660580a237bd4130422ab6" kindref="member">write</ref>(writer_,<sp/>start,<sp/>s);</highlight></codeline>
<codeline lineno="484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="487" refid="namespacefmt_1a0ee7afe0f2ddcd93b9e0e4549b9740ec" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1a0ee7afe0f2ddcd93b9e0e4549b9740ec" kindref="member">printf</ref>(<ref refid="classfmt_1_1_basic_writer" kindref="compound">BasicWriter&lt;Char&gt;</ref><sp/>&amp;<ref refid="glew_8h_1a433584688554d9a05d22844c39473968" kindref="member">w</ref>,<sp/><ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">BasicCStringRef&lt;Char&gt;</ref><sp/><ref refid="glew_8h_1a1e3b09934060e9d373139c3557730d37" kindref="member">format</ref>,<sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_printf_formatter" kindref="compound">PrintfFormatter&lt;Char&gt;</ref>(args,<sp/><ref refid="glew_8h_1a433584688554d9a05d22844c39473968" kindref="member">w</ref>).<ref refid="namespacefmt_1a638f25c535b3bfa12dc1478b11885b6f" kindref="member">format</ref>(format);</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="500" refid="namespacefmt_1a956d655d1291fb85203c58fadd4bba1a" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="glew_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/><ref refid="namespacefmt_1a956d655d1291fb85203c58fadd4bba1a" kindref="member">sprintf</ref>(<ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">CStringRef</ref><sp/><ref refid="glew_8h_1a1e3b09934060e9d373139c3557730d37" kindref="member">format</ref>,<sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_memory_writer" kindref="compound">MemoryWriter</ref><sp/><ref refid="glew_8h_1a433584688554d9a05d22844c39473968" kindref="member">w</ref>;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><ref refid="namespacefmt_1a0ee7afe0f2ddcd93b9e0e4549b9740ec" kindref="member">printf</ref>(w,<sp/>format,<sp/>args);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>w.<ref refid="classfmt_1_1_basic_writer_1a91f06ced6e063ee77a99740e0e79faf6" kindref="member">str</ref>();</highlight></codeline>
<codeline lineno="504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><ref refid="format_8h_1a65215c7dfcc0e942cd0798860877e86b" kindref="member">FMT_VARIADIC</ref>(<ref refid="glew_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref>,<sp/><ref refid="namespacefmt_1a956d655d1291fb85203c58fadd4bba1a" kindref="member">sprintf</ref>,<sp/><ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">CStringRef</ref>)</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507" refid="namespacefmt_1a4e36b6c0e05b8176814d0e3e44c77627" refkind="member"><highlight class="normal">inline<sp/><ref refid="namespacestd" kindref="compound">std</ref>::wstring<sp/><ref refid="namespacefmt_1a956d655d1291fb85203c58fadd4bba1a" kindref="member">sprintf</ref>(<ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">WCStringRef</ref><sp/><ref refid="glew_8h_1a1e3b09934060e9d373139c3557730d37" kindref="member">format</ref>,<sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_memory_writer" kindref="compound">WMemoryWriter</ref><sp/><ref refid="glew_8h_1a433584688554d9a05d22844c39473968" kindref="member">w</ref>;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><ref refid="namespacefmt_1a0ee7afe0f2ddcd93b9e0e4549b9740ec" kindref="member">printf</ref>(w,<sp/>format,<sp/>args);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>w.<ref refid="classfmt_1_1_basic_writer_1a91f06ced6e063ee77a99740e0e79faf6" kindref="member">str</ref>();</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><ref refid="format_8h_1ade3d94cf1857de68f99e7059277d51f5" kindref="member">FMT_VARIADIC_W</ref>(std::wstring,<sp/><ref refid="namespacefmt_1a956d655d1291fb85203c58fadd4bba1a" kindref="member">sprintf</ref>,<sp/><ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">WCStringRef</ref>)</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><ref refid="format_8h_1a9a4960b70582ed2620911a0b75dce0b5" kindref="member">FMT_API</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1a05a374d05d4f93470bb99170efed28c0" kindref="member">fprintf</ref>(std::FILE<sp/>*<ref refid="glew_8h_1a691492ec0bd6383f91200e49f6ae40ed" kindref="member">f</ref>,<sp/><ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">CStringRef</ref><sp/><ref refid="glew_8h_1a1e3b09934060e9d373139c3557730d37" kindref="member">format</ref>,<sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>args);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><ref refid="format_8h_1a65215c7dfcc0e942cd0798860877e86b" kindref="member">FMT_VARIADIC</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>fprintf,<sp/>std::FILE<sp/>*,<sp/><ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">CStringRef</ref>)</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="535" refid="namespacefmt_1aa936ffccf89f4609cd9fce18825f0b14" refkind="member"><highlight class="normal">inline<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1a0ee7afe0f2ddcd93b9e0e4549b9740ec" kindref="member">printf</ref>(<ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">CStringRef</ref><sp/>format,<sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1a05a374d05d4f93470bb99170efed28c0" kindref="member">fprintf</ref>(stdout,<sp/>format,<sp/>args);</highlight></codeline>
<codeline lineno="537"><highlight class="normal">}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><ref refid="format_8h_1a65215c7dfcc0e942cd0798860877e86b" kindref="member">FMT_VARIADIC</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/><ref refid="namespacefmt_1a0ee7afe0f2ddcd93b9e0e4549b9740ec" kindref="member">printf</ref>,<sp/><ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">CStringRef</ref>)</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="549" refid="namespacefmt_1adf9e00e4ddf5cad224a101333cfac9e8" refkind="member"><highlight class="normal">inline<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacefmt_1a05a374d05d4f93470bb99170efed28c0" kindref="member">fprintf</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::ostream<sp/>&amp;os,<sp/><ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">CStringRef</ref><sp/>format_str,<sp/><ref refid="classfmt_1_1_arg_list" kindref="compound">ArgList</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><ref refid="classfmt_1_1_basic_memory_writer" kindref="compound">MemoryWriter</ref><sp/><ref refid="glew_8h_1a433584688554d9a05d22844c39473968" kindref="member">w</ref>;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><ref refid="namespacefmt_1a0ee7afe0f2ddcd93b9e0e4549b9740ec" kindref="member">printf</ref>(w,<sp/>format_str,<sp/>args);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><ref refid="namespacefmt_1_1internal_1a7c721969e9660580a237bd4130422ab6" kindref="member">internal::write</ref>(os,<sp/>w);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(w.<ref refid="classfmt_1_1_basic_writer_1a1b6721b4ba4d3fa18ac781a36616cc2a" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><ref refid="format_8h_1a65215c7dfcc0e942cd0798860877e86b" kindref="member">FMT_VARIADIC</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/><ref refid="namespacefmt_1a05a374d05d4f93470bb99170efed28c0" kindref="member">fprintf</ref>,<sp/>std::ostream<sp/>&amp;,<sp/><ref refid="classfmt_1_1_basic_c_string_ref" kindref="compound">CStringRef</ref>)</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>fmt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>FMT_PRINTF_H_</highlight></codeline>
    </programlisting>
    <location file="/Users/jmacey/NGL/include/ngl/fmt/printf.h"/>
  </compounddef>
</doxygen>
